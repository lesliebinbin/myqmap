shadow$provide["module$node_modules$draft_js$lib$removeRangeFromContentState"]=function(global,process,require,module,exports,shadow$shims){var ContentBlockNode=require("module$node_modules$draft_js$lib$ContentBlockNode");var Immutable=require("module$node_modules$immutable$dist$immutable");var getNextDelimiterBlockKey=require("module$node_modules$draft_js$lib$getNextDelimiterBlockKey");var List=Immutable.List,Map=Immutable.Map;var transformBlock=function transformBlock(key,blockMap,func){if(!key)return;
var block=blockMap.get(key);if(!block)return;blockMap.set(key,func(block))};var getAncestorsKeys=function getAncestorsKeys(blockKey,blockMap){var parents=[];if(!blockKey)return parents;var blockNode=blockMap.get(blockKey);while(blockNode&&blockNode.getParentKey()){var parentKey=blockNode.getParentKey();if(parentKey)parents.push(parentKey);blockNode=parentKey?blockMap.get(parentKey):null}return parents};var getNextDelimitersBlockKeys=function getNextDelimitersBlockKeys(block,blockMap){var nextDelimiters=
[];if(!block)return nextDelimiters;var nextDelimiter=getNextDelimiterBlockKey(block,blockMap);while(nextDelimiter&&blockMap.get(nextDelimiter)){var _block=blockMap.get(nextDelimiter);nextDelimiters.push(nextDelimiter);nextDelimiter=_block.getParentKey()?getNextDelimiterBlockKey(_block,blockMap):null}return nextDelimiters};var getNextValidSibling=function getNextValidSibling(block,blockMap,originalBlockMap){if(!block)return null;var nextValidSiblingKey=originalBlockMap.get(block.getKey()).getNextSiblingKey();
while(nextValidSiblingKey&&!blockMap.get(nextValidSiblingKey))nextValidSiblingKey=originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey()||null;return nextValidSiblingKey};var getPrevValidSibling=function getPrevValidSibling(block,blockMap,originalBlockMap){if(!block)return null;var prevValidSiblingKey=originalBlockMap.get(block.getKey()).getPrevSiblingKey();while(prevValidSiblingKey&&!blockMap.get(prevValidSiblingKey))prevValidSiblingKey=originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey()||
null;return prevValidSiblingKey};var updateBlockMapLinks=function updateBlockMapLinks(blockMap,startBlock,endBlock,originalBlockMap){return blockMap.withMutations(function(blocks){transformBlock(startBlock.getKey(),blocks,function(block){return block.merge({nextSibling:getNextValidSibling(startBlock,blocks,originalBlockMap),prevSibling:getPrevValidSibling(startBlock,blocks,originalBlockMap)})});transformBlock(endBlock.getKey(),blocks,function(block){return block.merge({nextSibling:getNextValidSibling(endBlock,
blocks,originalBlockMap),prevSibling:getPrevValidSibling(endBlock,blocks,originalBlockMap)})});getAncestorsKeys(startBlock.getKey(),originalBlockMap).forEach(function(parentKey){return transformBlock(parentKey,blocks,function(block){return block.merge({children:block.getChildKeys().filter(function(key){return blocks.get(key)}),nextSibling:getNextValidSibling(block,blocks,originalBlockMap),prevSibling:getPrevValidSibling(block,blocks,originalBlockMap)})})});transformBlock(startBlock.getNextSiblingKey(),
blocks,function(block){return block.merge({prevSibling:startBlock.getPrevSiblingKey()})});transformBlock(startBlock.getPrevSiblingKey(),blocks,function(block){return block.merge({nextSibling:getNextValidSibling(startBlock,blocks,originalBlockMap)})});transformBlock(endBlock.getNextSiblingKey(),blocks,function(block){return block.merge({prevSibling:getPrevValidSibling(endBlock,blocks,originalBlockMap)})});transformBlock(endBlock.getPrevSiblingKey(),blocks,function(block){return block.merge({nextSibling:endBlock.getNextSiblingKey()})});
getAncestorsKeys(endBlock.getKey(),originalBlockMap).forEach(function(parentKey){transformBlock(parentKey,blocks,function(block){return block.merge({children:block.getChildKeys().filter(function(key){return blocks.get(key)}),nextSibling:getNextValidSibling(block,blocks,originalBlockMap),prevSibling:getPrevValidSibling(block,blocks,originalBlockMap)})})});getNextDelimitersBlockKeys(endBlock,originalBlockMap).forEach(function(delimiterKey){return transformBlock(delimiterKey,blocks,function(block){return block.merge({nextSibling:getNextValidSibling(block,
blocks,originalBlockMap),prevSibling:getPrevValidSibling(block,blocks,originalBlockMap)})})})})};var removeRangeFromContentState=function removeRangeFromContentState(contentState,selectionState){if(selectionState.isCollapsed())return contentState;var blockMap=contentState.getBlockMap();var startKey=selectionState.getStartKey();var startOffset=selectionState.getStartOffset();var endKey=selectionState.getEndKey();var endOffset=selectionState.getEndOffset();var startBlock=blockMap.get(startKey);var endBlock=
blockMap.get(endKey);var isExperimentalTreeBlock=startBlock instanceof ContentBlockNode;var parentAncestors=[];if(isExperimentalTreeBlock){var endBlockchildrenKeys=endBlock.getChildKeys();var endBlockAncestors=getAncestorsKeys(endKey,blockMap);if(endBlock.getNextSiblingKey())parentAncestors=parentAncestors.concat(endBlockAncestors);if(!endBlockchildrenKeys.isEmpty())parentAncestors=parentAncestors.concat(endBlockAncestors.concat([endKey]));parentAncestors=parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock,
blockMap),blockMap))}var characterList=void 0;if(startBlock===endBlock)characterList=removeFromList(startBlock.getCharacterList(),startOffset,endOffset);else characterList=startBlock.getCharacterList().slice(0,startOffset).concat(endBlock.getCharacterList().slice(endOffset));var modifiedStart=startBlock.merge({text:startBlock.getText().slice(0,startOffset)+endBlock.getText().slice(endOffset),characterList:characterList});var newBlocks=blockMap.toSeq().skipUntil(function(_,k){return k===startKey}).takeUntil(function(_,
k){return k===endKey}).filter(function(_,k){return parentAncestors.indexOf(k)===-1}).concat(Map([[endKey,null]])).map(function(_,k){return k===startKey?modifiedStart:null});var updatedBlockMap=blockMap.merge(newBlocks).filter(function(block){return!!block});if(isExperimentalTreeBlock)updatedBlockMap=updateBlockMapLinks(updatedBlockMap,startBlock,endBlock,blockMap);return contentState.merge({blockMap:updatedBlockMap,selectionBefore:selectionState,selectionAfter:selectionState.merge({anchorKey:startKey,
anchorOffset:startOffset,focusKey:startKey,focusOffset:startOffset,isBackward:false})})};var removeFromList=function removeFromList(targetList,startOffset,endOffset){if(startOffset===0)while(startOffset<endOffset){targetList=targetList.shift();startOffset++}else if(endOffset===targetList.count())while(endOffset>startOffset){targetList=targetList.pop();endOffset--}else{var head=targetList.slice(0,startOffset);var tail=targetList.slice(endOffset);targetList=head.concat(tail).toList()}return targetList};
module.exports=removeRangeFromContentState}
//# sourceMappingURL=module$node_modules$draft_js$lib$removeRangeFromContentState.js.map
