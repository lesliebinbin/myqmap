{
"version":3,
"file":"module$node_modules$prop_types$checkPropTypes.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,+CAAf,CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAU/H,IAAIC,aAAeA,QAAQ,EAAG,EAE9B,IAAIC,aAAJ,GAA6B,YAA7B,CAA2C,CACzC,IAAIC,qBAAuBN,OAAA,CAAQ,yDAAR,CAC3B,KAAIO,mBAAqB,EACzB,KAAIC,IAAMC,QAAAC,KAAAC,KAAA,CAAmBC,MAAAC,UAAAC,eAAnB,CAEVV,aAAA,CAAeA,QAAQ,CAACW,IAAD,CAAO,CAC5B,IAAIC,QAAU,WAAVA,CAAwBD,IAC5B,IAAI,MAAOE,QAAX,GAAuB,WAAvB,CACEA,OAAAC,MAAA,CAAcF,OAAd,CAEF,IAAI,CAIF,KAAM,KAAIG,KAAJ,CAAUH,OAAV,CAAN;AAJE,CAKF,MAAOI,CAAP,CAAU,EAVgB,CALW,CA8B3CC,QAASA,eAAc,CAACC,SAAD,CAAYC,MAAZ,CAAoBC,QAApB,CAA8BC,aAA9B,CAA6CC,QAA7C,CAAuD,CAC5E,GAAIrB,aAAJ,GAA6B,YAA7B,CACE,IAAK,IAAIsB,YAAT,GAAyBL,UAAzB,CACE,GAAId,GAAA,CAAIc,SAAJ,CAAeK,YAAf,CAAJ,CAAkC,CAChC,IAAIT,KAIJ,IAAI,CAGF,GAAI,MAAOI,UAAA,CAAUK,YAAV,CAAX,GAAuC,UAAvC,CAAmD,CACjD,IAAIC,IAAMT,KAAA,EACPM,aADO,EACU,aADV,EAC2B,IAD3B,CACkCD,QADlC,CAC6C,SAD7C,CACyDG,YADzD,CACwE,gBADxE,CAER,8EAFQ,CAEyE,MAAOL,UAAA,CAAUK,YAAV,CAFhF,CAE0G,IAF1G,CAIVC,IAAAC,KAAA,CAAW,qBACX,MAAMD,IAAN;AANiD,CAQnDV,KAAA,CAAQI,SAAA,CAAUK,YAAV,CAAA,CAAwBJ,MAAxB,CAAgCI,YAAhC,CAA8CF,aAA9C,CAA6DD,QAA7D,CAAuE,IAAvE,CAA6ElB,oBAA7E,CAXN,CAYF,MAAOwB,EAAP,CAAW,CACXZ,KAAA,CAAQY,EADG,CAGb,GAAIZ,KAAJ,EAAa,EAAEA,KAAF,WAAmBC,MAAnB,CAAb,CACEf,YAAA,EACGqB,aADH,EACoB,aADpB,EACqC,0BADrC,CAEED,QAFF,CAEa,IAFb,CAEoBG,YAFpB,CAEmC,iCAFnC,CAGE,2DAHF,CAGgE,MAAOT,MAHvE,CAG+E,IAH/E,CAIE,iEAJF,CAKE,gEALF,CAME,iCANF,CASF;GAAIA,KAAJ,WAAqBC,MAArB,EAA8B,EAAED,KAAAF,QAAF,GAAmBT,mBAAnB,CAA9B,CAAsE,CAGpEA,kBAAA,CAAmBW,KAAAF,QAAnB,CAAA,CAAoC,IAEpC,KAAIe,MAAQL,QAAA,CAAWA,QAAA,EAAX,CAAwB,EAEpCtB,aAAA,CACE,SADF,CACcoB,QADd,CACyB,SADzB,CACqCN,KAAAF,QADrC,EACsDe,KAAA,EAAS,IAAT,CAAgBA,KAAhB,CAAwB,EAD9E,EAPoE,CA9BtC,CAHsC,CAsD9EV,cAAAW,kBAAA,CAAmCC,QAAQ,EAAG,CAC5C,GAAI5B,aAAJ,GAA6B,YAA7B,CACEE,kBAAA,CAAqB,EAFqB,CAM9CN,OAAAC,QAAA,CAAiBmB,cAtG8G;",
"sources":["node_modules/prop-types/checkPropTypes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prop_types$checkPropTypes\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","printWarning","NODE_ENV","ReactPropTypesSecret","loggedTypeFailures","has","Function","call","bind","Object","prototype","hasOwnProperty","text","message","console","error","Error","x","checkPropTypes","typeSpecs","values","location","componentName","getStack","typeSpecName","err","name","ex","stack","resetWarningCache","checkPropTypes.resetWarningCache"]
}
