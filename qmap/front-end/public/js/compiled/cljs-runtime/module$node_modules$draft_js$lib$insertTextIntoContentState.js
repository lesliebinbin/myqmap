shadow$provide["module$node_modules$draft_js$lib$insertTextIntoContentState"]=function(global,process,require,module,exports,shadow$shims){var Immutable=require("module$node_modules$immutable$dist$immutable");var insertIntoList=require("module$node_modules$draft_js$lib$insertIntoList");var invariant=require("module$node_modules$fbjs$lib$invariant");var Repeat=Immutable.Repeat;function insertTextIntoContentState(contentState,selectionState,text,characterMetadata){!selectionState.isCollapsed()?"development"!==
"production"?invariant(false,"`insertText` should only be called with a collapsed range."):invariant(false):void 0;var len=text.length;if(!len)return contentState;var blockMap=contentState.getBlockMap();var key=selectionState.getStartKey();var offset=selectionState.getStartOffset();var block=blockMap.get(key);var blockText=block.getText();var newBlock=block.merge({text:blockText.slice(0,offset)+text+blockText.slice(offset,block.getLength()),characterList:insertIntoList(block.getCharacterList(),Repeat(characterMetadata,
len).toList(),offset)});var newOffset=offset+len;return contentState.merge({blockMap:blockMap.set(key,newBlock),selectionAfter:selectionState.merge({anchorOffset:newOffset,focusOffset:newOffset})})}module.exports=insertTextIntoContentState}
//# sourceMappingURL=module$node_modules$draft_js$lib$insertTextIntoContentState.js.map
