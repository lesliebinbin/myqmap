{
"version":3,
"file":"module$node_modules$draft_js$lib$modifyBlockForContentState.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,6DAAf,CAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB7I,IAAIC,UAAYJ,OAAA,CAAQ,8CAAR,CAEhB,KAAIK,IAAMD,SAAAC,IAGVC,SAASA,2BAA0B,CAACC,YAAD,CAAeC,cAAf,CAA+BC,SAA/B,CAA0C,CAC3E,IAAIC,SAAWF,cAAAG,YAAA,EACf,KAAIC,OAASJ,cAAAK,UAAA,EACb,KAAIC,SAAWP,YAAAQ,YAAA,EACf,KAAIC,UAAYF,QAAAG,MAAA,EAAAC,UAAA,CAA2B,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACzD,MAAOA,EAAP,GAAaV,QAD4C,CAA3C,CAAAW,UAAA,CAEH,QAAS,CAACF,CAAD;AAAIC,CAAJ,CAAO,CAC3B,MAAOA,EAAP,GAAaR,MADc,CAFb,CAAAU,OAAA,CAINjB,GAAA,CAAI,CAAC,CAACO,MAAD,CAASE,QAAAS,IAAA,CAAaX,MAAb,CAAT,CAAD,CAAJ,CAJM,CAAAY,IAAA,CAIqCf,SAJrC,CAMhB,OAAOF,aAAAkB,MAAA,CAAmB,CACxBX,SAAUA,QAAAW,MAAA,CAAeT,SAAf,CADc,CAExBU,gBAAiBlB,cAFO,CAGxBmB,eAAgBnB,cAHQ,CAAnB,CAVoE,CAiB7EP,MAAAC,QAAA,CAAiBI,0BAtC4H;",
"sources":["node_modules/draft-js/lib/modifyBlockForContentState.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$modifyBlockForContentState\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule modifyBlockForContentState\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar Map = Immutable.Map;\n\n\nfunction modifyBlockForContentState(contentState, selectionState, operation) {\n  var startKey = selectionState.getStartKey();\n  var endKey = selectionState.getEndKey();\n  var blockMap = contentState.getBlockMap();\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(operation);\n\n  return contentState.merge({\n    blockMap: blockMap.merge(newBlocks),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n}\n\nmodule.exports = modifyBlockForContentState;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Immutable","Map","modifyBlockForContentState","contentState","selectionState","operation","startKey","getStartKey","endKey","getEndKey","blockMap","getBlockMap","newBlocks","toSeq","skipUntil","_","k","takeUntil","concat","get","map","merge","selectionBefore","selectionAfter"]
}
