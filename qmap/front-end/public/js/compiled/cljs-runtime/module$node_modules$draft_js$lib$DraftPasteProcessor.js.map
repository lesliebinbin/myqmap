{
"version":3,
"file":"module$node_modules$draft_js$lib$DraftPasteProcessor.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAe,sDAAf,CAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBtI,IAAIC,QAAUJ,OAAA,CAAQ,yCAAR,CAEd,KAAIK,SAAWD,OAAXC,EAAsB,QAAS,CAACC,MAAD,CAAS,CAAE,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,SAAAC,OAApB,CAAsCF,CAAA,EAAtC,CAA2C,CAAE,IAAIG,OAASF,SAAA,CAAUD,CAAV,CAAc,KAAK,IAAII,GAAT,GAAgBD,OAAhB,CAA0B,GAAIE,MAAAC,UAAAC,eAAAC,KAAA,CAAqCL,MAArC,CAA6CC,GAA7C,CAAJ,CAAyDL,MAAA,CAAOK,GAAP,CAAA,CAAcD,MAAA,CAAOC,GAAP,CAA9H,CAAiJ,MAAOL,OAArM,CAE5C,KAAIU,kBAAoBhB,OAAA,CAAQ,oDAAR,CACxB,KAAIiB;AAAejB,OAAA,CAAQ,+CAAR,CACnB,KAAIkB,iBAAmBlB,OAAA,CAAQ,mDAAR,CACvB,KAAImB,kBAAoBnB,OAAA,CAAQ,oDAAR,CACxB,KAAIoB,UAAYpB,OAAA,CAAQ,8CAAR,CAEhB,KAAIqB,+BAAiCrB,OAAA,CAAQ,iEAAR,CACrC,KAAIsB,kBAAoBtB,OAAA,CAAQ,oDAAR,CACxB,KAAIuB;AAAsBvB,OAAA,CAAQ,sDAAR,CAC1B,KAAIwB,kBAAoBxB,OAAA,CAAQ,oDAAR,CAExB,KAAIyB,KAAOL,SAAAK,KAAX,CACIC,OAASN,SAAAM,OAGb,KAAIC,4BAA8BR,iBAAAS,wBAClC,KAAIC,mBAAqBF,2BAAA,CAA8BT,gBAA9B,CAAiDD,YAE1E,KAAIa,oBAAsB,CACxBC,YAAaA,QAASA,YAAW,CAACC,IAAD,CAAOC,cAAP,CAAuB,CACtD,MAAOZ,+BAAA,CAA+BW,IAA/B,CAAqCT,mBAArC,CAA0DU,cAA1D,CAD+C,CADhC;AAIxBC,YAAaA,QAASA,YAAW,CAACC,UAAD,CAAaC,SAAb,CAAwBC,IAAxB,CAA8B,CAC7D,MAAOF,WAAAG,OAAA,CAAkB,QAAS,CAACC,GAAD,CAAMC,QAAN,CAAgBC,KAAhB,CAAuB,CACvDD,QAAA,CAAWhB,iBAAA,CAAkBgB,QAAlB,CACX,KAAI7B,IAAMW,iBAAA,EAEV,KAAIoB,gBAAkB,CACpB/B,IAAKA,GADe,CAEpB0B,KAAMA,IAFc,CAGpBM,KAAMH,QAHc,CAIpBI,cAAenB,IAAA,CAAKC,MAAA,CAAOU,SAAP,CAAkBI,QAAA/B,OAAlB,CAAL,CAJK,CAQtB,IAAIkB,2BAAJ,EAAmCc,KAAnC,GAA6C,CAA7C,CAAgD,CAC9C,IAAII,iBAAmBJ,KAAnBI,CAA2B,CAE/B,KAAIC,cAAgBP,GAAA,CAAIM,gBAAJ,CAAhBC,CAAwCP,GAAA,CAAIM,gBAAJ,CAAAE,MAAA,CAA4B,CACtEC,YAAarC,GADyD,CAA5B,CAG5C+B,gBAAA,CAAkBrC,QAAA,CAAS,EAAT,CAAaqC,eAAb,CAA8B,CAC9CO,YAAaH,aAAAI,OAAA,EADiC,CAA9B,CAN4B,CAWhDX,GAAAY,KAAA,CAAS,IAAItB,kBAAJ,CAAuBa,eAAvB,CAAT,CAEA;MAAOH,IAzBgD,CAAlD,CA0BJ,EA1BI,CADsD,CAJvC,CAmC1BtC,OAAAC,QAAA,CAAiB4B,mBAzEqH;",
"sources":["node_modules/draft-js/lib/DraftPasteProcessor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$DraftPasteProcessor\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftPasteProcessor\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar Immutable = require('immutable');\n\nvar convertFromHTMLtoContentBlocks = require('./convertFromHTMLToContentBlocks');\nvar generateRandomKey = require('./generateRandomKey');\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\n\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\n\nvar DraftPasteProcessor = {\n  processHTML: function processHTML(html, blockRenderMap) {\n    return convertFromHTMLtoContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);\n  },\n  processText: function processText(textBlocks, character, type) {\n    return textBlocks.reduce(function (acc, textLine, index) {\n      textLine = sanitizeDraftText(textLine);\n      var key = generateRandomKey();\n\n      var blockNodeConfig = {\n        key: key,\n        type: type,\n        text: textLine,\n        characterList: List(Repeat(character, textLine.length))\n      };\n\n      // next block updates previous block\n      if (experimentalTreeDataSupport && index !== 0) {\n        var prevSiblingIndex = index - 1;\n        // update previous block\n        var previousBlock = acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({\n          nextSibling: key\n        });\n        blockNodeConfig = _extends({}, blockNodeConfig, {\n          prevSibling: previousBlock.getKey()\n        });\n      }\n\n      acc.push(new ContentBlockRecord(blockNodeConfig));\n\n      return acc;\n    }, []);\n  }\n};\n\nmodule.exports = DraftPasteProcessor;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_assign","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","CharacterMetadata","ContentBlock","ContentBlockNode","DraftFeatureFlags","Immutable","convertFromHTMLtoContentBlocks","generateRandomKey","getSafeBodyFromHTML","sanitizeDraftText","List","Repeat","experimentalTreeDataSupport","draft_tree_data_support","ContentBlockRecord","DraftPasteProcessor","processHTML","html","blockRenderMap","processText","textBlocks","character","type","reduce","acc","textLine","index","blockNodeConfig","text","characterList","prevSiblingIndex","previousBlock","merge","nextSibling","prevSibling","getKey","push"]
}
