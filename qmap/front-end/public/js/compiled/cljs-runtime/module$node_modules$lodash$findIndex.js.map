{
"version":3,
"file":"module$node_modules$lodash$findIndex.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,sCAAf,CAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CACtH,IAAIC,cAAgBJ,OAAA,CAAQ,2CAAR,CAApB,CACIK,aAAeL,OAAA,CAAQ,0CAAR,CADnB,CAEIM,UAAYN,OAAA,CAAQ,sCAAR,CAGhB,KAAIO,UAAYC,IAAAC,IAqChBC,SAASA,UAAS,CAACC,KAAD,CAAQC,SAAR,CAAmBC,SAAnB,CAA8B,CAC9C,IAAIC,OAASH,KAAA,EAAS,IAAT,CAAgB,CAAhB,CAAoBA,KAAAG,OACjC,IAAI,CAACA,MAAL,CACE,MAAQ,EAEV,KAAIC,MAAQF,SAAA,EAAa,IAAb,CAAoB,CAApB,CAAwBP,SAAA,CAAUO,SAAV,CACpC,IAAIE,KAAJ,CAAY,CAAZ,CACEA,KAAA;AAAQR,SAAA,CAAUO,MAAV,CAAmBC,KAAnB,CAA0B,CAA1B,CAEV,OAAOX,cAAA,CAAcO,KAAd,CAAqBN,YAAA,CAAaO,SAAb,CAAwB,CAAxB,CAArB,CAAiDG,KAAjD,CATuC,CAYhDd,MAAAC,QAAA,CAAiBQ,SAvDqG;",
"sources":["node_modules/lodash/findIndex.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$findIndex\"] = function(global,process,require,module,exports,shadow$shims) {\nvar baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","baseFindIndex","baseIteratee","toInteger","nativeMax","Math","max","findIndex","array","predicate","fromIndex","length","index"]
}
