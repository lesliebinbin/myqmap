shadow$provide["module$node_modules$draft_js$lib$DraftEditorCompositionHandler"]=function(global,process,require,module,exports,shadow$shims){var DraftFeatureFlags=require("module$node_modules$draft_js$lib$DraftFeatureFlags");var DraftModifier=require("module$node_modules$draft_js$lib$DraftModifier");var EditorState=require("module$node_modules$draft_js$lib$EditorState");var Keys=require("module$node_modules$fbjs$lib$Keys");var getEntityKeyForSelection=require("module$node_modules$draft_js$lib$getEntityKeyForSelection");
var isEventHandled=require("module$node_modules$draft_js$lib$isEventHandled");var isSelectionAtLeafStart=require("module$node_modules$draft_js$lib$isSelectionAtLeafStart");var RESOLVE_DELAY=20;var resolved=false;var stillComposing=false;var textInputData="";var DraftEditorCompositionHandler={onBeforeInput:function onBeforeInput(editor,e){textInputData=(textInputData||"")+e.data},onCompositionStart:function onCompositionStart(editor){stillComposing=true},onCompositionEnd:function onCompositionEnd(editor){resolved=
false;stillComposing=false;setTimeout(function(){if(!resolved)DraftEditorCompositionHandler.resolveComposition(editor)},RESOLVE_DELAY)},onKeyDown:function onKeyDown(editor,e){if(!stillComposing){DraftEditorCompositionHandler.resolveComposition(editor);editor._onKeyDown(e);return}if(e.which===Keys.RIGHT||e.which===Keys.LEFT)e.preventDefault()},onKeyPress:function onKeyPress(editor,e){if(e.which===Keys.RETURN)e.preventDefault()},resolveComposition:function resolveComposition(editor){if(stillComposing)return;
resolved=true;var composedChars=textInputData;textInputData="";var editorState=EditorState.set(editor._latestEditorState,{inCompositionMode:false});var currentStyle=editorState.getCurrentInlineStyle();var entityKey=getEntityKeyForSelection(editorState.getCurrentContent(),editorState.getSelection());var mustReset=!composedChars||isSelectionAtLeafStart(editorState)||currentStyle.size>0||entityKey!==null;if(mustReset)editor.restoreEditorDOM();editor.exitCurrentMode();if(composedChars){if(DraftFeatureFlags.draft_handlebeforeinput_composed_text&&
editor.props.handleBeforeInput&&isEventHandled(editor.props.handleBeforeInput(composedChars,editorState)))return;var contentState=DraftModifier.replaceText(editorState.getCurrentContent(),editorState.getSelection(),composedChars,currentStyle,entityKey);editor.update(EditorState.push(editorState,contentState,"insert-characters"));return}if(mustReset)editor.update(EditorState.set(editorState,{nativelyRenderedContent:null,forceSelection:true}))}};module.exports=DraftEditorCompositionHandler}
//# sourceMappingURL=module$node_modules$draft_js$lib$DraftEditorCompositionHandler.js.map
