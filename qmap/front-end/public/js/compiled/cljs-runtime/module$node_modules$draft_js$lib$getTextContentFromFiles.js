shadow$provide["module$node_modules$draft_js$lib$getTextContentFromFiles"]=function(global,process,require,module,exports,shadow$shims){var invariant=require("module$node_modules$fbjs$lib$invariant");var TEXT_CLIPPING_REGEX=/\.textClipping$/;var TEXT_TYPES={"text/plain":true,"text/html":true,"text/rtf":true};var TEXT_SIZE_UPPER_BOUND=5E3;function getTextContentFromFiles(files,callback){var readCount=0;var results=[];files.forEach(function(file){readFile(file,function(text){readCount++;text&&results.push(text.slice(0,
TEXT_SIZE_UPPER_BOUND));if(readCount==files.length)callback(results.join("\r"))})})}function readFile(file,callback){if(!global.FileReader||file.type&&!(file.type in TEXT_TYPES)){callback("");return}if(file.type===""){var contents="";if(TEXT_CLIPPING_REGEX.test(file.name))contents=file.name.replace(TEXT_CLIPPING_REGEX,"");callback(contents);return}var reader=new FileReader;reader.onload=function(){var result=reader.result;!(typeof result==="string")?"development"!=="production"?invariant(false,'We should be calling "FileReader.readAsText" which returns a string'):
invariant(false):void 0;callback(result)};reader.onerror=function(){callback("")};reader.readAsText(file)}module.exports=getTextContentFromFiles}
//# sourceMappingURL=module$node_modules$draft_js$lib$getTextContentFromFiles.js.map
