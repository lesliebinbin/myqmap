{
"version":3,
"file":"module$node_modules$draft_js$lib$keyCommandBackspaceWord.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,0DAAf,CAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB1I,IAAIC,mBAAqBJ,OAAA,CAAQ,qDAAR,CACzB,KAAIK,YAAcL,OAAA,CAAQ,8CAAR,CAElB,KAAIM,sBAAwBN,OAAA,CAAQ,wDAAR,CAC5B,KAAIO,uBAAyBP,OAAA,CAAQ,yDAAR,CAM7BQ,SAASA,wBAAuB,CAACC,WAAD,CAAc,CAC5C,IAAIC;AAAeH,sBAAA,CAAuBE,WAAvB,CAAoC,QAAS,CAACE,aAAD,CAAgB,CAC9E,IAAIC,UAAYD,aAAAE,aAAA,EAChB,KAAIC,OAASF,SAAAG,eAAA,EAEb,IAAID,MAAJ,GAAe,CAAf,CACE,MAAOR,sBAAA,CAAsBK,aAAtB,CAAqC,CAArC,CAET,KAAIK,IAAMJ,SAAAK,YAAA,EACV,KAAIC,QAAUP,aAAAQ,kBAAA,EACd,KAAIC,KAAOF,OAAAG,eAAA,CAAuBL,GAAvB,CAAAM,QAAA,EAAAC,MAAA,CAA4C,CAA5C,CAA+CT,MAA/C,CACX,KAAIU,SAAWpB,kBAAAqB,YAAA,CAA+BL,IAA/B,CACf,OAAOd,sBAAA,CAAsBK,aAAtB,CAAqCa,QAAAE,OAArC,EAAwD,CAAxD,CAXuE,CAA7D,CAYhB,UAZgB,CAcnB,IAAIhB,YAAJ,GAAqBD,WAAAU,kBAAA,EAArB,CACE,MAAOV,YAGT;MAAOJ,YAAAsB,KAAA,CAAiBlB,WAAjB,CAA8BC,YAA9B,CAA4C,cAA5C,CAnBqC,CAsB9CT,MAAAC,QAAA,CAAiBM,uBAhDyH;",
"sources":["node_modules/draft-js/lib/keyCommandBackspaceWord.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$keyCommandBackspaceWord\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandBackspaceWord\n * @format\n * \n */\n\n'use strict';\n\nvar DraftRemovableWord = require('./DraftRemovableWord');\nvar EditorState = require('./EditorState');\n\nvar moveSelectionBackward = require('./moveSelectionBackward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\n/**\n * Delete the word that is left of the cursor, as well as any spaces or\n * punctuation after the word.\n */\nfunction keyCommandBackspaceWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    // If there are no words before the cursor, remove the preceding newline.\n    if (offset === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(0, offset);\n    var toRemove = DraftRemovableWord.getBackward(text);\n    return moveSelectionBackward(strategyState, toRemove.length || 1);\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceWord;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DraftRemovableWord","EditorState","moveSelectionBackward","removeTextWithStrategy","keyCommandBackspaceWord","editorState","afterRemoval","strategyState","selection","getSelection","offset","getStartOffset","key","getStartKey","content","getCurrentContent","text","getBlockForKey","getText","slice","toRemove","getBackward","length","push"]
}
