{
"version":3,
"file":"module$node_modules$rc_tree_select$lib$propTypes.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,kDAAf,CAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAGlIC,MAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,IADoC,CAA7C,CAGAJ,QAAAK,YAAA,CAAsBA,WACtBL,QAAAM,UAAA,CAAoBA,SAEpB,KAAIC,WAAaC,sBAAA,CAAuBV,OAAA,CAAQ,sCAAR,CAAvB,CAEjB,KAAIW,MAAQX,OAAA,CAAQ,6CAAR,CAEZU,SAASA,uBAAsB,CAACE,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CAErC,IAAIE;AAAkBL,UAAA,CAAW,SAAX,CAAAM,UAAA,CAAgC,CAACN,UAAA,CAAW,SAAX,CAAAO,OAAD,CAA+BP,UAAA,CAAW,SAAX,CAAAQ,OAA/B,CAAhC,CAEtBV,SAASA,YAAW,CAACW,QAAD,CAAW,CAC7B,MAAOT,WAAA,CAAW,SAAX,CAAAM,UAAA,CAAgC,CAACG,QAAD,CAAWT,UAAA,CAAW,SAAX,CAAAU,QAAA,CAA8BD,QAA9B,CAAX,CAAhC,CADsB,CAU/BV,QAASA,UAAS,EAAG,CACnB,IAAK,IAAIY,KAAOC,SAAAC,OAAX,CAA6BC,KAAO,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,CAAqDK,KAAO,CAAjE,CAAoEA,IAApE,CAA2EL,IAA3E,CAAiFK,IAAA,EAAjF,CACEF,IAAA,CAAKE,IAAL,CAAA,CAAaJ,SAAA,CAAUI,IAAV,CAGf,KAAIC,MAAQH,IAAA,CAAK,CAAL,CAAZ,CACII,SAAWJ,IAAA,CAAK,CAAL,CADf,CAEIK,UAAYL,IAAA,CAAK,CAAL,CAEhB,IAAI,CAAC,CAAA,CAAGZ,KAAAkB,eAAJ,EAA0BH,KAA1B,CAAJ,CAAsC,CACpC,IAAII,KAAOvB,WAAA,CAAYE,UAAA,CAAW,SAAX,CAAAsB,MAAA,CAA4B,CACjDC,MAAOvB,UAAA,CAAW,SAAX,CAAAwB,KAD0C;AAEjD3B,MAAOQ,eAF0C,CAA5B,CAAZ,CAAAoB,MAAA,CAGD,IAAK,EAHJ,CAGOX,IAHP,CAKX,IAAIO,IAAJ,CACE,MAAO,KAAIK,KAAJ,CAAU,gBAAAC,OAAA,CAAwBT,QAAxB,CAAkC,iBAAlC,CAAAS,OAAA,CAA4DR,SAA5D,CAAuE,KAAvE,CAAV,CAA0F,kHAA1F,CAGT,OAAO,KAV6B,CAatC,IAAIS,IAAM9B,WAAA,CAAYO,eAAZ,CAAAoB,MAAA,CAAmC,IAAK,EAAxC,CAA2CX,IAA3C,CAEV,IAAIc,GAAJ,CACE,MAAO,KAAIF,KAAJ,CAAU,gBAAAC,OAAA,CAAwBT,QAAxB,CAAkC,iBAAlC,CAAAS,OAAA,CAA4DR,SAA5D,CAAuE,KAAvE,CAAV,CAA0F,4CAA1F,CAGT,OAAO,KA5BY,CA3B6G;",
"sources":["node_modules/rc-tree-select/lib/propTypes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rc_tree_select$lib$propTypes\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.genArrProps = genArrProps;\nexports.valueProp = valueProp;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar internalValProp = _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]);\n\nfunction genArrProps(propType) {\n  return _propTypes[\"default\"].oneOfType([propType, _propTypes[\"default\"].arrayOf(propType)]);\n}\n/**\n * Origin code check `multiple` is true when `treeCheckStrictly` & `labelInValue`.\n * But in process logic is already cover to array.\n * Check array is not necessary. Let's simplify this check logic.\n */\n\n\nfunction valueProp() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var props = args[0],\n      propName = args[1],\n      Component = args[2];\n\n  if ((0, _util.isLabelInValue)(props)) {\n    var _err = genArrProps(_propTypes[\"default\"].shape({\n      label: _propTypes[\"default\"].node,\n      value: internalValProp\n    })).apply(void 0, args);\n\n    if (_err) {\n      return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.\");\n    }\n\n    return null;\n  }\n\n  var err = genArrProps(internalValProp).apply(void 0, args);\n\n  if (err) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use string or [string] instead.\");\n  }\n\n  return null;\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Object","defineProperty","value","genArrProps","valueProp","_propTypes","_interopRequireDefault","_util","obj","__esModule","internalValProp","oneOfType","string","number","propType","arrayOf","_len","arguments","length","args","Array","_key","props","propName","Component","isLabelInValue","_err","shape","label","node","apply","Error","concat","err"]
}
