{
"version":3,
"file":"module$node_modules$draft_js$lib$convertFromRawToDraftState.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/draft-js/lib/convertFromRawToDraftState.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$convertFromRawToDraftState\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromRawToDraftState\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar ContentState = require('./ContentState');\nvar DraftEntity = require('./DraftEntity');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar DraftTreeAdapter = require('./DraftTreeAdapter');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar createCharacterList = require('./createCharacterList');\nvar decodeEntityRanges = require('./decodeEntityRanges');\nvar decodeInlineStyleRanges = require('./decodeInlineStyleRanges');\nvar generateRandomKey = require('./generateRandomKey');\nvar invariant = require('fbjs/lib/invariant');\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\n\nvar List = Immutable.List,\n    Map = Immutable.Map,\n    OrderedMap = Immutable.OrderedMap;\n\n\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityMap) {\n  var key = block.key,\n      type = block.type,\n      data = block.data,\n      text = block.text,\n      depth = block.depth;\n\n\n  var blockNodeConfig = {\n    text: text,\n    depth: depth || 0,\n    type: type || 'unstyled',\n    key: key || generateRandomKey(),\n    data: Map(data),\n    characterList: decodeCharacterList(block, entityMap)\n  };\n\n  return blockNodeConfig;\n};\n\nvar decodeCharacterList = function decodeCharacterList(block, entityMap) {\n  var text = block.text,\n      rawEntityRanges = block.entityRanges,\n      rawInlineStyleRanges = block.inlineStyleRanges;\n\n\n  var entityRanges = rawEntityRanges || [];\n  var inlineStyleRanges = rawInlineStyleRanges || [];\n\n  // Translate entity range keys to the DraftEntity map.\n  return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function (range) {\n    return entityMap.hasOwnProperty(range.key);\n  }).map(function (range) {\n    return _extends({}, range, { key: entityMap[range.key] });\n  })));\n};\n\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n  return _extends({}, block, {\n    key: block.key || generateRandomKey()\n  });\n};\n\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */\nvar updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n  var nodesWithParentRef = nodes.map(function (block) {\n    return _extends({}, block, {\n      parentRef: parentRef\n    });\n  });\n\n  // since we pop nodes from the stack we need to insert them in reverse\n  return stack.concat(nodesWithParentRef.reverse());\n};\n\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */\nvar decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n  return blocks\n  // ensure children have valid keys to enable sibling links\n  .map(addKeyIfMissing).reduce(function (blockMap, block, index) {\n    !Array.isArray(block.children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0;\n\n    // ensure children have valid keys to enable sibling links\n    var children = block.children.map(addKeyIfMissing);\n\n    // root level nodes\n    var contentBlockNode = new ContentBlockNode(_extends({}, decodeBlockNodeConfig(block, entityMap), {\n      prevSibling: index === 0 ? null : blocks[index - 1].key,\n      nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n      children: List(children.map(function (child) {\n        return child.key;\n      }))\n    }));\n\n    // push root node to blockMap\n    blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode);\n\n    // this stack is used to ensure we visit all nodes respecting depth ordering\n    var stack = updateNodeStack([], children, contentBlockNode);\n\n    // start computing children nodes\n    while (stack.length > 0) {\n      // we pop from the stack and start processing this node\n      var node = stack.pop();\n\n      // parentRef already points to a converted ContentBlockNode\n      var parentRef = node.parentRef;\n      var siblings = parentRef.getChildKeys();\n      var _index = siblings.indexOf(node.key);\n      var isValidBlock = Array.isArray(node.children);\n\n      if (!isValidBlock) {\n        !isValidBlock ? process.env.NODE_ENV !== 'production' ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0;\n        break;\n      }\n\n      // ensure children have valid keys to enable sibling links\n      var _children = node.children.map(addKeyIfMissing);\n\n      var _contentBlockNode = new ContentBlockNode(_extends({}, decodeBlockNodeConfig(node, entityMap), {\n        parent: parentRef.getKey(),\n        children: List(_children.map(function (child) {\n          return child.key;\n        })),\n        prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n        nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n      }));\n\n      // push node to blockMap\n      blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode);\n\n      // this stack is used to ensure we visit all nodes respecting depth ordering\n      stack = updateNodeStack(stack, _children, _contentBlockNode);\n    }\n\n    return blockMap;\n  }, OrderedMap());\n};\n\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityMap) {\n  return OrderedMap(blocks.map(function (block) {\n    var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityMap));\n    return [contentBlock.getKey(), contentBlock];\n  }));\n};\n\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityMap) {\n  var isTreeRawBlock = Array.isArray(rawState.blocks[0].children);\n  var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n\n  if (!experimentalTreeDataSupport) {\n    return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityMap);\n  }\n\n  return decodeContentBlockNodes(rawBlocks, entityMap);\n};\n\nvar decodeRawEntityMap = function decodeRawEntityMap(rawState) {\n  var rawEntityMap = rawState.entityMap;\n\n  var entityMap = {};\n\n  // TODO: Update this once we completely remove DraftEntity\n  Object.keys(rawEntityMap).forEach(function (rawEntityKey) {\n    var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey],\n        type = _rawEntityMap$rawEnti.type,\n        mutability = _rawEntityMap$rawEnti.mutability,\n        data = _rawEntityMap$rawEnti.data;\n\n    // get the key reference to created entity\n\n    entityMap[rawEntityKey] = DraftEntity.__create(type, mutability, data || {});\n  });\n\n  return entityMap;\n};\n\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n  !Array.isArray(rawState.blocks) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'invalid RawDraftContentState') : invariant(false) : void 0;\n\n  // decode entities\n  var entityMap = decodeRawEntityMap(rawState);\n\n  // decode blockMap\n  var blockMap = decodeRawBlocks(rawState, entityMap);\n\n  // create initial selection\n  var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n\n  return new ContentState({\n    blockMap: blockMap,\n    entityMap: entityMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n};\n\nmodule.exports = convertFromRawToDraftState;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_assign","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","ContentBlock","ContentBlockNode","ContentState","DraftEntity","DraftFeatureFlags","DraftTreeAdapter","Immutable","SelectionState","createCharacterList","decodeEntityRanges","decodeInlineStyleRanges","generateRandomKey","invariant","experimentalTreeDataSupport","draft_tree_data_support","List","Map","OrderedMap","decodeBlockNodeConfig","block","entityMap","type","data","text","depth","blockNodeConfig","characterList","decodeCharacterList","rawEntityRanges","entityRanges","rawInlineStyleRanges","inlineStyleRanges","filter","range","map","addKeyIfMissing","updateNodeStack","stack","nodes","parentRef","nodesWithParentRef","concat","reverse","decodeContentBlockNodes","blocks","reduce","blockMap","index","Array","isArray","children","NODE_ENV","contentBlockNode","prevSibling","nextSibling","child","set","getKey","node","pop","siblings","getChildKeys","_index","indexOf","isValidBlock","_children","_contentBlockNode","parent","get","size","decodeContentBlocks","contentBlock","decodeRawBlocks","rawState","isTreeRawBlock","rawBlocks","fromRawStateToRawTreeState","fromRawTreeStateToRawState","decodeRawEntityMap","rawEntityMap","keys","forEach","rawEntityKey","_rawEntityMap$rawEnti","mutability","__create","convertFromRawToDraftState","selectionState","isEmpty","createEmpty","first","selectionBefore","selectionAfter"]
}
