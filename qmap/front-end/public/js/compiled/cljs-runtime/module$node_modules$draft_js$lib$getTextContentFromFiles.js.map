{
"version":3,
"file":"module$node_modules$draft_js$lib$getTextContentFromFiles.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,0DAAf,CAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB1I,IAAIC,UAAYJ,OAAA,CAAQ,wCAAR,CAEhB,KAAIK,oBAAsB,iBAE1B,KAAIC,WAAa,CACf,aAAc,IADC,CAEf,YAAa,IAFE,CAGf,WAAY,IAHG,CAOjB,KAAIC,sBAAwB,GAK5BC,SAASA,wBAAuB,CAACC,KAAD,CAAQC,QAAR,CAAkB,CAChD,IAAIC,UAAY,CAChB,KAAIC,QAAU,EACdH,MAAAI,QAAA,CAAc,QAAS,CAAUC,IAAV,CAAgB,CACrCC,QAAA,CAASD,IAAT,CAAe,QAAS,CAAYE,IAAZ,CAAkB,CACxCL,SAAA,EACAK,KAAA,EAAQJ,OAAAK,KAAA,CAAaD,IAAAE,MAAA,CAAW,CAAX;AAAcX,qBAAd,CAAb,CACR,IAAII,SAAJ,EAAiBF,KAAAU,OAAjB,CACET,QAAA,CAASE,OAAAQ,KAAA,CAAa,IAAb,CAAT,CAJsC,CAA1C,CADqC,CAAvC,CAHgD,CAiBlDL,QAASA,SAAQ,CAACD,IAAD,CAAOJ,QAAP,CAAiB,CAChC,GAAI,CAACZ,MAAAuB,WAAL,EAA0BP,IAAAQ,KAA1B,EAAuC,EAAER,IAAAQ,KAAF,GAAehB,WAAf,CAAvC,CAAmE,CACjEI,QAAA,CAAS,EAAT,CACA,OAFiE,CAKnE,GAAII,IAAAQ,KAAJ,GAAkB,EAAlB,CAAsB,CACpB,IAAIC,SAAW,EAKf,IAAIlB,mBAAAmB,KAAA,CAAyBV,IAAAW,KAAzB,CAAJ,CACEF,QAAA,CAAWT,IAAAW,KAAAC,QAAA,CAAkBrB,mBAAlB,CAAuC,EAAvC,CAEbK,SAAA,CAASa,QAAT,CACA,OAVoB,CAatB,IAAII,OAAS,IAAIN,UACjBM,OAAAC,OAAA,CAAgBC,QAAS,EAAG,CAC1B,IAAIC,OAASH,MAAAG,OACb,GAAE,MAAOA,OAAT,GAAoB,QAApB,CAAA,CAAgCC,aAAA,GAAyB,YAAzB,CAAwC3B,SAAA,CAAU,KAAV,CAAiB,qEAAjB,CAAxC;AAAkIA,SAAA,CAAU,KAAV,CAAlK,CAAqL,IAAK,EAC1LM,SAAA,CAASoB,MAAT,CAH0B,CAK5BH,OAAAK,QAAA,CAAiBC,QAAS,EAAG,CAC3BvB,QAAA,CAAS,EAAT,CAD2B,CAG7BiB,OAAAO,WAAA,CAAkBpB,IAAlB,CA5BgC,CA+BlCb,MAAAC,QAAA,CAAiBM,uBAhFyH;",
"sources":["node_modules/draft-js/lib/getTextContentFromFiles.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$getTextContentFromFiles\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getTextContentFromFiles\n * @format\n * \n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar TEXT_CLIPPING_REGEX = /\\.textClipping$/;\n\nvar TEXT_TYPES = {\n  'text/plain': true,\n  'text/html': true,\n  'text/rtf': true\n};\n\n// Somewhat arbitrary upper bound on text size. Let's not lock up the browser.\nvar TEXT_SIZE_UPPER_BOUND = 5000;\n\n/**\n * Extract the text content from a file list.\n */\nfunction getTextContentFromFiles(files, callback) {\n  var readCount = 0;\n  var results = [];\n  files.forEach(function ( /*blob*/file) {\n    readFile(file, function ( /*string*/text) {\n      readCount++;\n      text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));\n      if (readCount == files.length) {\n        callback(results.join('\\r'));\n      }\n    });\n  });\n}\n\n/**\n * todo isaac: Do work to turn html/rtf into a content fragment.\n */\nfunction readFile(file, callback) {\n  if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {\n    callback('');\n    return;\n  }\n\n  if (file.type === '') {\n    var contents = '';\n    // Special-case text clippings, which have an empty type but include\n    // `.textClipping` in the file name. `readAsText` results in an empty\n    // string for text clippings, so we force the file name to serve\n    // as the text value for the file.\n    if (TEXT_CLIPPING_REGEX.test(file.name)) {\n      contents = file.name.replace(TEXT_CLIPPING_REGEX, '');\n    }\n    callback(contents);\n    return;\n  }\n\n  var reader = new FileReader();\n  reader.onload = function () {\n    var result = reader.result;\n    !(typeof result === 'string') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'We should be calling \"FileReader.readAsText\" which returns a string') : invariant(false) : void 0;\n    callback(result);\n  };\n  reader.onerror = function () {\n    callback('');\n  };\n  reader.readAsText(file);\n}\n\nmodule.exports = getTextContentFromFiles;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","invariant","TEXT_CLIPPING_REGEX","TEXT_TYPES","TEXT_SIZE_UPPER_BOUND","getTextContentFromFiles","files","callback","readCount","results","forEach","file","readFile","text","push","slice","length","join","FileReader","type","contents","test","name","replace","reader","onload","reader.onload","result","NODE_ENV","onerror","reader.onerror","readAsText"]
}
