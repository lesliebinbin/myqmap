{
"version":3,
"file":"module$node_modules$draft_js$lib$insertTextIntoContentState.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,6DAAf,CAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB7I,IAAIC,UAAYJ,OAAA,CAAQ,8CAAR,CAEhB,KAAIK,eAAiBL,OAAA,CAAQ,iDAAR,CACrB,KAAIM,UAAYN,OAAA,CAAQ,wCAAR,CAEhB,KAAIO,OAASH,SAAAG,OAGbC,SAASA,2BAA0B,CAACC,YAAD,CAAeC,cAAf,CAA+BC,IAA/B,CAAqCC,iBAArC,CAAwD,CACzF,CAACF,cAAAG,YAAA,EAAD,CAAgCC,aAAA;AAAyB,YAAzB,CAAwCR,SAAA,CAAU,KAAV,CAAiB,4DAAjB,CAAxC,CAAyHA,SAAA,CAAU,KAAV,CAAzJ,CAA4K,IAAK,EAEjL,KAAIS,IAAMJ,IAAAK,OACV,IAAI,CAACD,GAAL,CACE,MAAON,aAGT,KAAIQ,SAAWR,YAAAS,YAAA,EACf,KAAIC,IAAMT,cAAAU,YAAA,EACV,KAAIC,OAASX,cAAAY,eAAA,EACb,KAAIC,MAAQN,QAAAO,IAAA,CAAaL,GAAb,CACZ,KAAIM,UAAYF,KAAAG,QAAA,EAEhB,KAAIC,SAAWJ,KAAAK,MAAA,CAAY,CACzBjB,KAAMc,SAAAI,MAAA,CAAgB,CAAhB,CAAmBR,MAAnB,CAANV,CAAmCA,IAAnCA,CAA0Cc,SAAAI,MAAA,CAAgBR,MAAhB,CAAwBE,KAAAO,UAAA,EAAxB,CADjB,CAEzBC,cAAe1B,cAAA,CAAekB,KAAAS,iBAAA,EAAf,CAAyCzB,MAAA,CAAOK,iBAAP;AAA0BG,GAA1B,CAAAkB,OAAA,EAAzC,CAAkFZ,MAAlF,CAFU,CAAZ,CAKf,KAAIa,UAAYb,MAAZa,CAAqBnB,GAEzB,OAAON,aAAAmB,MAAA,CAAmB,CACxBX,SAAUA,QAAAkB,IAAA,CAAahB,GAAb,CAAkBQ,QAAlB,CADc,CAExBS,eAAgB1B,cAAAkB,MAAA,CAAqB,CACnCS,aAAcH,SADqB,CAEnCI,YAAaJ,SAFsB,CAArB,CAFQ,CAAnB,CArBkF,CA8B3FjC,MAAAC,QAAA,CAAiBM,0BAtD4H;",
"sources":["node_modules/draft-js/lib/insertTextIntoContentState.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$insertTextIntoContentState\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertTextIntoContentState\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar insertIntoList = require('./insertIntoList');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Repeat = Immutable.Repeat;\n\n\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;\n\n  var len = text.length;\n  if (!len) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var key = selectionState.getStartKey();\n  var offset = selectionState.getStartOffset();\n  var block = blockMap.get(key);\n  var blockText = block.getText();\n\n  var newBlock = block.merge({\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n  });\n\n  var newOffset = offset + len;\n\n  return contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: newOffset,\n      focusOffset: newOffset\n    })\n  });\n}\n\nmodule.exports = insertTextIntoContentState;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Immutable","insertIntoList","invariant","Repeat","insertTextIntoContentState","contentState","selectionState","text","characterMetadata","isCollapsed","NODE_ENV","len","length","blockMap","getBlockMap","key","getStartKey","offset","getStartOffset","block","get","blockText","getText","newBlock","merge","slice","getLength","characterList","getCharacterList","toList","newOffset","set","selectionAfter","anchorOffset","focusOffset"]
}
