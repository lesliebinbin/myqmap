{
"version":3,
"file":"module$node_modules$draft_js$lib$editOnCut.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,4CAAf,CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB5H,IAAIC,cAAgBJ,OAAA,CAAQ,gDAAR,CACpB,KAAIK,YAAcL,OAAA,CAAQ,8CAAR,CAClB,KAAIM,MAAQN,OAAA,CAAQ,oCAAR,CAEZ,KAAIO,yBAA2BP,OAAA,CAAQ,2DAAR,CAC/B,KAAIQ,kBAAoBR,OAAA,CAAQ,gDAAR,CAWxBS;QAASA,UAAS,CAACC,MAAD,CAASC,CAAT,CAAY,CAC5B,IAAIC,YAAcF,MAAAG,mBAClB,KAAIC,UAAYF,WAAAG,aAAA,EAChB,KAAIC,QAAUL,CAAAM,OACd,KAAIC,eAAiB,IAAK,EAG1B,IAAIJ,SAAAK,YAAA,EAAJ,CAA6B,CAC3BR,CAAAS,eAAA,EACA,OAF2B,CAO7B,GAAIJ,OAAJ,WAAuBK,KAAvB,CACEH,cAAA,CAAiBV,iBAAA,CAAkBF,KAAAgB,gBAAA,CAAsBN,OAAtB,CAAlB,CAGnB,KAAIO,SAAWhB,wBAAA,CAAyBK,WAAzB,CACfF,OAAAc,aAAA,CAAoBD,QAApB,CAGAb,OAAAe,QAAA,CAAe,KAAf,CAGAC,WAAA,CAAW,QAAS,EAAG,CACrBhB,MAAAiB,iBAAA,CAAwBT,cAAxB,CACAR,OAAAkB,gBAAA,EACAlB,OAAAmB,OAAA,CAAcC,cAAA,CAAelB,WAAf,CAAd,CAHqB,CAAvB;AAIG,CAJH,CAzB4B,CAgC9BkB,QAASA,eAAc,CAAClB,WAAD,CAAc,CACnC,IAAImB,WAAa3B,aAAA4B,YAAA,CAA0BpB,WAAAqB,kBAAA,EAA1B,CAA2DrB,WAAAG,aAAA,EAA3D,CAAuF,SAAvF,CACjB,OAAOV,YAAA6B,KAAA,CAAiBtB,WAAjB,CAA8BmB,UAA9B,CAA0C,cAA1C,CAF4B,CAKrC9B,MAAAC,QAAA,CAAiBO,SArE2G;",
"sources":["node_modules/draft-js/lib/editOnCut.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$editOnCut\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCut\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Style = require('fbjs/lib/Style');\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\nvar getScrollPosition = require('fbjs/lib/getScrollPosition');\n\n/**\n * On `cut` events, native behavior is allowed to occur so that the system\n * clipboard is set properly. This means that we need to take steps to recover\n * the editor DOM state after the `cut` has occurred in order to maintain\n * control of the component.\n *\n * In addition, we can keep a copy of the removed fragment, including all\n * styles and entities, for use as an internal paste.\n */\nfunction editOnCut(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection();\n  var element = e.target;\n  var scrollPosition = void 0;\n\n  // No selection, so there's nothing to cut.\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n\n  // Track the current scroll position so that it can be forced back in place\n  // after the editor regains control of the DOM.\n  if (element instanceof Node) {\n    scrollPosition = getScrollPosition(Style.getScrollParent(element));\n  }\n\n  var fragment = getFragmentFromSelection(editorState);\n  editor.setClipboard(fragment);\n\n  // Set `cut` mode to disable all event handling temporarily.\n  editor.setMode('cut');\n\n  // Let native `cut` behavior occur, then recover control.\n  setTimeout(function () {\n    editor.restoreEditorDOM(scrollPosition);\n    editor.exitCurrentMode();\n    editor.update(removeFragment(editorState));\n  }, 0);\n}\n\nfunction removeFragment(editorState) {\n  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');\n  return EditorState.push(editorState, newContent, 'remove-range');\n}\n\nmodule.exports = editOnCut;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DraftModifier","EditorState","Style","getFragmentFromSelection","getScrollPosition","editOnCut","editor","e","editorState","_latestEditorState","selection","getSelection","element","target","scrollPosition","isCollapsed","preventDefault","Node","getScrollParent","fragment","setClipboard","setMode","setTimeout","restoreEditorDOM","exitCurrentMode","update","removeFragment","newContent","removeRange","getCurrentContent","push"]
}
