{
"version":3,
"file":"module$node_modules$fbjs$lib$VersionRange.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/fbjs/lib/VersionRange.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$VersionRange\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\nvar componentRegex = /\\./;\nvar orRegex = /\\|\\|/;\nvar rangeRegex = /\\s+\\-\\s+/;\nvar modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\\s*(.+)/;\nvar numericRegex = /^(\\d*)(.*)/;\n\n/**\n * Splits input `range` on \"||\" and returns true if any subrange matches\n * `version`.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkOrExpression(range, version) {\n  var expressions = range.split(orRegex);\n\n  if (expressions.length > 1) {\n    return expressions.some(function (range) {\n      return VersionRange.contains(range, version);\n    });\n  } else {\n    range = expressions[0].trim();\n    return checkRangeExpression(range, version);\n  }\n}\n\n/**\n * Splits input `range` on \" - \" (the surrounding whitespace is required) and\n * returns true if version falls between the two operands.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkRangeExpression(range, version) {\n  var expressions = range.split(rangeRegex);\n\n  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'the \"-\" operator expects exactly 2 operands') : invariant(false) : void 0;\n\n  if (expressions.length === 1) {\n    return checkSimpleExpression(expressions[0], version);\n  } else {\n    var startVersion = expressions[0],\n        endVersion = expressions[1];\n\n    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'operands to the \"-\" operator must be simple (no modifiers)') : invariant(false) : void 0;\n\n    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);\n  }\n}\n\n/**\n * Checks if `range` matches `version`. `range` should be a \"simple\" range (ie.\n * not a compound range using the \" - \" or \"||\" operators).\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkSimpleExpression(range, version) {\n  range = range.trim();\n  if (range === '') {\n    return true;\n  }\n\n  var versionComponents = version.split(componentRegex);\n\n  var _getModifierAndCompon = getModifierAndComponents(range),\n      modifier = _getModifierAndCompon.modifier,\n      rangeComponents = _getModifierAndCompon.rangeComponents;\n\n  switch (modifier) {\n    case '<':\n      return checkLessThan(versionComponents, rangeComponents);\n    case '<=':\n      return checkLessThanOrEqual(versionComponents, rangeComponents);\n    case '>=':\n      return checkGreaterThanOrEqual(versionComponents, rangeComponents);\n    case '>':\n      return checkGreaterThan(versionComponents, rangeComponents);\n    case '~':\n    case '~>':\n      return checkApproximateVersion(versionComponents, rangeComponents);\n    default:\n      return checkEqual(versionComponents, rangeComponents);\n  }\n}\n\n/**\n * Checks whether `a` is less than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThan(a, b) {\n  return compareComponents(a, b) === -1;\n}\n\n/**\n * Checks whether `a` is less than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === -1 || result === 0;\n}\n\n/**\n * Checks whether `a` is equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkEqual(a, b) {\n  return compareComponents(a, b) === 0;\n}\n\n/**\n * Checks whether `a` is greater than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === 1 || result === 0;\n}\n\n/**\n * Checks whether `a` is greater than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThan(a, b) {\n  return compareComponents(a, b) === 1;\n}\n\n/**\n * Checks whether `a` is \"reasonably close\" to `b` (as described in\n * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is \"1.3.1\"\n * then \"reasonably close\" is defined as \">= 1.3.1 and < 1.4\".\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkApproximateVersion(a, b) {\n  var lowerBound = b.slice();\n  var upperBound = b.slice();\n\n  if (upperBound.length > 1) {\n    upperBound.pop();\n  }\n  var lastIndex = upperBound.length - 1;\n  var numeric = parseInt(upperBound[lastIndex], 10);\n  if (isNumber(numeric)) {\n    upperBound[lastIndex] = numeric + 1 + '';\n  }\n\n  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);\n}\n\n/**\n * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version\n * components from `range`.\n *\n * For example, given `range` \">= 1.2.3\" returns an object with a `modifier` of\n * `\">=\"` and `components` of `[1, 2, 3]`.\n *\n * @param {string} range\n * @returns {object}\n */\nfunction getModifierAndComponents(range) {\n  var rangeComponents = range.split(componentRegex);\n  var matches = rangeComponents[0].match(modifierRegex);\n  !matches ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expected regex to match but it did not') : invariant(false) : void 0;\n\n  return {\n    modifier: matches[1],\n    rangeComponents: [matches[2]].concat(rangeComponents.slice(1))\n  };\n}\n\n/**\n * Determines if `number` is a number.\n *\n * @param {mixed} number\n * @returns {boolean}\n */\nfunction isNumber(number) {\n  return !isNaN(number) && isFinite(number);\n}\n\n/**\n * Tests whether `range` is a \"simple\" version number without any modifiers\n * (\">\", \"~\" etc).\n *\n * @param {string} range\n * @returns {boolean}\n */\nfunction isSimpleVersion(range) {\n  return !getModifierAndComponents(range).modifier;\n}\n\n/**\n * Zero-pads array `array` until it is at least `length` long.\n *\n * @param {array} array\n * @param {number} length\n */\nfunction zeroPad(array, length) {\n  for (var i = array.length; i < length; i++) {\n    array[i] = '0';\n  }\n}\n\n/**\n * Normalizes `a` and `b` in preparation for comparison by doing the following:\n *\n * - zero-pads `a` and `b`\n * - marks any \"x\", \"X\" or \"*\" component in `b` as equivalent by zero-ing it out\n *   in both `a` and `b`\n * - marks any final \"*\" component in `b` as a greedy wildcard by zero-ing it\n *   and all of its successors in `a`\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {array<array<string>>}\n */\nfunction normalizeVersions(a, b) {\n  a = a.slice();\n  b = b.slice();\n\n  zeroPad(a, b.length);\n\n  // mark \"x\" and \"*\" components as equal\n  for (var i = 0; i < b.length; i++) {\n    var matches = b[i].match(/^[x*]$/i);\n    if (matches) {\n      b[i] = a[i] = '0';\n\n      // final \"*\" greedily zeros all remaining components\n      if (matches[0] === '*' && i === b.length - 1) {\n        for (var j = i; j < a.length; j++) {\n          a[j] = '0';\n        }\n      }\n    }\n  }\n\n  zeroPad(b, a.length);\n\n  return [a, b];\n}\n\n/**\n * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.\n *\n * For example, `10-alpha` is greater than `2-beta`.\n *\n * @param {string} a\n * @param {string} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareNumeric(a, b) {\n  var aPrefix = a.match(numericRegex)[1];\n  var bPrefix = b.match(numericRegex)[1];\n  var aNumeric = parseInt(aPrefix, 10);\n  var bNumeric = parseInt(bPrefix, 10);\n\n  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {\n    return compare(aNumeric, bNumeric);\n  } else {\n    return compare(a, b);\n  }\n}\n\n/**\n * Returns the ordering of `a` and `b`.\n *\n * @param {string|number} a\n * @param {string|number} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compare(a, b) {\n  !(typeof a === typeof b) ? process.env.NODE_ENV !== 'production' ? invariant(false, '\"a\" and \"b\" must be of the same type') : invariant(false) : void 0;\n\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Compares arrays of version components.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareComponents(a, b) {\n  var _normalizeVersions = normalizeVersions(a, b),\n      aNormalized = _normalizeVersions[0],\n      bNormalized = _normalizeVersions[1];\n\n  for (var i = 0; i < bNormalized.length; i++) {\n    var result = compareNumeric(aNormalized[i], bNormalized[i]);\n    if (result) {\n      return result;\n    }\n  }\n\n  return 0;\n}\n\nvar VersionRange = {\n  /**\n   * Checks whether `version` satisfies the `range` specification.\n   *\n   * We support a subset of the expressions defined in\n   * https://www.npmjs.org/doc/misc/semver.html:\n   *\n   *    version   Must match version exactly\n   *    =version  Same as just version\n   *    >version  Must be greater than version\n   *    >=version Must be greater than or equal to version\n   *    <version  Must be less than version\n   *    <=version Must be less than or equal to version\n   *    ~version  Must be at least version, but less than the next significant\n   *              revision above version:\n   *              \"~1.2.3\" is equivalent to \">= 1.2.3 and < 1.3\"\n   *    ~>version Equivalent to ~version\n   *    1.2.x     Must match \"1.2.x\", where \"x\" is a wildcard that matches\n   *              anything\n   *    1.2.*     Similar to \"1.2.x\", but \"*\" in the trailing position is a\n   *              \"greedy\" wildcard, so will match any number of additional\n   *              components:\n   *              \"1.2.*\" will match \"1.2.1\", \"1.2.1.1\", \"1.2.1.1.1\" etc\n   *    *         Any version\n   *    \"\"        (Empty string) Same as *\n   *    v1 - v2   Equivalent to \">= v1 and <= v2\"\n   *    r1 || r2  Passes if either r1 or r2 are satisfied\n   *\n   * @param {string} range\n   * @param {string} version\n   * @returns {boolean}\n   */\n  contains: function contains(range, version) {\n    return checkOrExpression(range.trim(), version.trim());\n  }\n};\n\nmodule.exports = VersionRange;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","invariant","componentRegex","orRegex","rangeRegex","modifierRegex","numericRegex","checkOrExpression","range","version","expressions","split","length","some","VersionRange","contains","trim","checkRangeExpression","NODE_ENV","checkSimpleExpression","startVersion","endVersion","isSimpleVersion","versionComponents","_getModifierAndCompon","getModifierAndComponents","modifier","rangeComponents","checkLessThan","checkLessThanOrEqual","checkGreaterThanOrEqual","checkGreaterThan","checkApproximateVersion","checkEqual","a","b","compareComponents","result","lowerBound","slice","upperBound","pop","lastIndex","numeric","parseInt","isNumber","matches","match","concat","number","isNaN","isFinite","zeroPad","array","i","normalizeVersions","j","compareNumeric","aPrefix","bPrefix","aNumeric","bNumeric","compare","_normalizeVersions","aNormalized","bNormalized"]
}
