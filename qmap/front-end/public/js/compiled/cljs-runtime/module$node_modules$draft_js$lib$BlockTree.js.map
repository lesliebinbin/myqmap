{
"version":3,
"file":"module$node_modules$draft_js$lib$BlockTree.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/draft-js/lib/BlockTree.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$BlockTree\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\n\nvar returnTrue = emptyFunction.thatReturnsTrue;\n\nvar FINGERPRINT_DELIMITER = '-';\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\n\nvar LeafRange = Record(defaultLeafRange);\n\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\n\nvar DecoratorRange = Record(defaultDecoratorRange);\n\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({ start: 0, end: 0 }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n\n    var chars = block.getCharacterList();\n\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n\n    return List(leafSets);\n  },\n\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n\n/**\n * Generate LeafRange records for a given character list.\n */\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Immutable","emptyFunction","findRangesImmutable","List","Repeat","Record","returnTrue","thatReturnsTrue","FINGERPRINT_DELIMITER","defaultLeafRange","start","end","LeafRange","defaultDecoratorRange","decoratorKey","leaves","DecoratorRange","BlockTree","generate","contentState","block","decorator","textLength","getLength","of","leafSets","decorations","getDecorations","chars","getCharacterList","areEqual","push","get","generateLeaves","slice","toList","getFingerprint","tree","map","leafSet","fingerprintString","size","join","characters","offset","inlineStyles","c","getStyle","a","b"]
}
