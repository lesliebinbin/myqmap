{
"version":3,
"file":"module$node_modules$lodash$_cloneBuffer.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,yCAAf,CAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CACzH,IAAIC,KAAOJ,OAAA,CAAQ,kCAAR,CAGX,KAAIK,YAAc,MAAOH,QAArBG,EAAgC,QAAhCA,EAA4CH,OAA5CG,EAAuD,CAACH,OAAAI,SAAxDD,EAA4EH,OAGhF,KAAIK,WAAaF,WAAbE,EAA4B,MAAON,OAAnCM,EAA6C,QAA7CA,EAAyDN,MAAzDM,EAAmE,CAACN,MAAAK,SAApEC,EAAuFN,MAG3F,KAAIO,cAAgBD,UAAhBC,EAA8BD,UAAAL,QAA9BM,GAAqDH,WAGzD,KAAII,OAASD,aAAA,CAAgBJ,IAAAK,OAAhB,CAA8BC,SAA3C,CACIC,YAAcF,MAAA,CAASA,MAAAE,YAAT,CAA8BD,SAUhDE,SAASA,YAAW,CAACC,MAAD;AAASC,MAAT,CAAiB,CACnC,GAAIA,MAAJ,CACE,MAAOD,OAAAE,MAAA,EAET,KAAIC,OAASH,MAAAG,OAAb,CACIC,OAASN,WAAA,CAAcA,WAAA,CAAYK,MAAZ,CAAd,CAAoC,IAAIH,MAAAK,YAAJ,CAAuBF,MAAvB,CAEjDH,OAAAM,KAAA,CAAYF,MAAZ,CACA,OAAOA,OAR4B,CAWrChB,MAAAC,QAAA,CAAiBU,WAnCwG;",
"sources":["node_modules/lodash/_cloneBuffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_cloneBuffer\"] = function(global,process,require,module,exports,shadow$shims) {\nvar root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","root","freeExports","nodeType","freeModule","moduleExports","Buffer","undefined","allocUnsafe","cloneBuffer","buffer","isDeep","slice","length","result","constructor","copy"]
}
