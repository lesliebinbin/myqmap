{
"version":3,
"file":"module$node_modules$draft_js$lib$convertFromDraftStateToRaw.js",
"lineCount":7,
"mappings":"AAAAA,cAAA,CAAe,6DAAf,CAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB7I,IAAIC,QAAUJ,OAAA,CAAQ,yCAAR,CAEd,KAAIK,SAAWD,OAAXC,EAAsB,QAAS,CAACC,MAAD,CAAS,CAAE,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,SAAAC,OAApB,CAAsCF,CAAA,EAAtC,CAA2C,CAAE,IAAIG,OAASF,SAAA,CAAUD,CAAV,CAAc,KAAK,IAAII,GAAT,GAAgBD,OAAhB,CAA0B,GAAIE,MAAAC,UAAAC,eAAAC,KAAA,CAAqCL,MAArC,CAA6CC,GAA7C,CAAJ,CAAyDL,MAAA,CAAOK,GAAP,CAAA,CAAcD,MAAA,CAAOC,GAAP,CAA9H,CAAiJ,MAAOL,OAArM,CAE5C,KAAIU,aAAehB,OAAA,CAAQ,+CAAR,CACnB,KAAIiB;AAAmBjB,OAAA,CAAQ,mDAAR,CACvB,KAAIkB,eAAiBlB,OAAA,CAAQ,iDAAR,CAErB,KAAImB,mBAAqBnB,OAAA,CAAQ,qDAAR,CACzB,KAAIoB,wBAA0BpB,OAAA,CAAQ,0DAAR,CAC9B,KAAIqB,UAAYrB,OAAA,CAAQ,wCAAR,CAEhB,KAAIsB,eAAiBA,QAASA,eAAc,CAACC,KAAD,CAAQC,gBAAR,CAA0B,CACpE,MAAO,CACLb,IAAKY,KAAAE,OAAA,EADA,CAELC,KAAMH,KAAAI,QAAA,EAFD,CAGLC,KAAML,KAAAM,QAAA,EAHD;AAILC,MAAOP,KAAAQ,SAAA,EAJF,CAKLC,kBAAmBZ,uBAAA,CAAwBG,KAAxB,CALd,CAMLU,aAAcd,kBAAA,CAAmBI,KAAnB,CAA0BC,gBAA1B,CANT,CAOLU,KAAMX,KAAAY,QAAA,EAAAC,SAAA,EAPD,CAD6D,CAYtE,KAAIC,eAAiBA,QAASA,eAAc,CAACd,KAAD,CAAQe,SAAR,CAAmBC,SAAnB,CAA8BC,aAA9B,CAA6C,CACvF,GAAIjB,KAAJ,WAAqBP,aAArB,CAAmC,CACjCuB,SAAAE,KAAA,CAAenB,cAAA,CAAeC,KAAf,CAAsBe,SAAtB,CAAf,CACA,OAFiC,CAKnC,EAAEf,KAAF,WAAmBN,iBAAnB,CAAA,CAAuCyB,aAAA,GAAyB,YAAzB,CAAwCrB,SAAA,CAAU,KAAV,CAAiB,0BAAjB,CAAxC,CAAuFA,SAAA,CAAU,KAAV,CAA9H,CAAiJ,IAAK,EAEtJ,KAAIsB,UAAYpB,KAAAqB,aAAA,EAChB;IAAIC,SAAWL,aAAA,CAAcjB,KAAAE,OAAA,EAAd,CAAXoB,CAA2CxC,QAAA,CAAS,EAAT,CAAaiB,cAAA,CAAeC,KAAf,CAAsBe,SAAtB,CAAb,CAA+C,CAC5FQ,SAAU,EADkF,CAA/C,CAI/C,IAAIH,SAAJ,CAAe,CACbH,aAAA,CAAcG,SAAd,CAAAG,SAAAL,KAAA,CAAuCI,QAAvC,CACA,OAFa,CAKfN,SAAAE,KAAA,CAAeI,QAAf,CAlBuF,CAqBzF,KAAIE,gBAAkBA,QAASA,gBAAe,CAACC,YAAD,CAAeC,QAAf,CAAyB,CACrE,IAAIX,UAAYW,QAAAX,UAGhB,KAAIC,UAAY,EAEhB,KAAIC,cAAgB,EACpB,KAAIU,eAAiB,EACrB,KAAIC,iBAAmB,CAEvBH,aAAAI,YAAA,EAAAC,QAAA,CAAmC,QAAS,CAAC9B,KAAD,CAAQ,CAClDA,KAAA+B,iBAAA,CAAuB,QAAS,CAACC,SAAD,CAAY,CAC1C,MAAOA,UAAAC,UAAA,EAAP;AAAiC,IADS,CAA5C,CAEG,QAAS,CAACC,KAAD,CAAQ,CAClB,IAAIC,UAAYnC,KAAAoC,YAAA,CAAkBF,KAAlB,CAEhB,KAAIG,qBAAuB1C,cAAA2C,UAAA,CAAyBH,SAAzB,CAG3B,IAAIR,cAAA,CAAeU,oBAAf,CAAJ,CACE,MAEFV,eAAA,CAAeU,oBAAf,CAAA,CAAuCF,SAKvCpB,UAAA,CAAUsB,oBAAV,CAAA,CAAkC,EAAlC,CAAuCT,gBACvCA,iBAAA,EAfkB,CAFpB,CAoBAd,eAAA,CAAed,KAAf,CAAsBe,SAAtB,CAAiCC,SAAjC,CAA4CC,aAA5C,CArBkD,CAApD,CAwBA,OAAO,CACLsB,OAAQvB,SADH,CAELD,UAAWA,SAFN,CAlC8D,CA0CvE,KAAIyB,mBAAqBA,QAASA,mBAAkB,CAACf,YAAD,CAAeC,QAAf,CAAyB,CAC3E,IAAIa,OAASb,QAAAa,OAAb,CACIxB;AAAYW,QAAAX,UAGhB,KAAI0B,aAAe,EAEnBpD,OAAAqD,KAAA,CAAY3B,SAAZ,CAAAe,QAAA,CAA+B,QAAS,CAAC1C,GAAD,CAAMuD,KAAN,CAAa,CACnD,IAAIC,OAASnB,YAAAQ,UAAA,CAAuBtC,cAAAkD,YAAA,CAA2BzD,GAA3B,CAAvB,CACbqD,aAAA,CAAaE,KAAb,CAAA,CAAsB,CACpBtC,KAAMuC,MAAAtC,QAAA,EADc,CAEpBwC,WAAYF,MAAAG,cAAA,EAFQ,CAGpBpC,KAAMiC,MAAAhC,QAAA,EAHc,CAF6B,CAArD,CASA,OAAO,CACL2B,OAAQA,MADH,CAELxB,UAAW0B,YAFN,CAhBoE,CAsB7E,KAAIO,2BAA6BA,QAASA,2BAA0B,CAACvB,YAAD,CAAe,CACjF,IAAIwB,qBAAuB,CACzBlC,UAAW,EADc,CAEzBwB,OAAQ,EAFiB,CAM3BU,qBAAA,CAAuBzB,eAAA,CAAgBC,YAAhB,CAA8BwB,oBAA9B,CAGvBA;oBAAA,CAAuBT,kBAAA,CAAmBf,YAAnB,CAAiCwB,oBAAjC,CAEvB,OAAOA,qBAZ0E,CAenFvE,OAAAC,QAAA,CAAiBqE,0BA5I4H;",
"sources":["node_modules/draft-js/lib/convertFromDraftStateToRaw.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$convertFromDraftStateToRaw\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromDraftStateToRaw\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftStringKey = require('./DraftStringKey');\n\nvar encodeEntityRanges = require('./encodeEntityRanges');\nvar encodeInlineStyleRanges = require('./encodeInlineStyleRanges');\nvar invariant = require('fbjs/lib/invariant');\n\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\n  return {\n    key: block.getKey(),\n    text: block.getText(),\n    type: block.getType(),\n    depth: block.getDepth(),\n    inlineStyleRanges: encodeInlineStyleRanges(block),\n    entityRanges: encodeEntityRanges(block, entityStorageMap),\n    data: block.getData().toObject()\n  };\n};\n\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\n  if (block instanceof ContentBlock) {\n    rawBlocks.push(createRawBlock(block, entityMap));\n    return;\n  }\n\n  !(block instanceof ContentBlockNode) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'block is not a BlockNode') : invariant(false) : void 0;\n\n  var parentKey = block.getParentKey();\n  var rawBlock = blockCacheRef[block.getKey()] = _extends({}, createRawBlock(block, entityMap), {\n    children: []\n  });\n\n  if (parentKey) {\n    blockCacheRef[parentKey].children.push(rawBlock);\n    return;\n  }\n\n  rawBlocks.push(rawBlock);\n};\n\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\n  var entityMap = rawState.entityMap;\n\n\n  var rawBlocks = [];\n\n  var blockCacheRef = {};\n  var entityCacheRef = {};\n  var entityStorageKey = 0;\n\n  contentState.getBlockMap().forEach(function (block) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      var entityKey = block.getEntityAt(start);\n      // Stringify to maintain order of otherwise numeric keys.\n      var stringifiedEntityKey = DraftStringKey.stringify(entityKey);\n      // This makes this function resilient to two entities\n      // erroneously having the same key\n      if (entityCacheRef[stringifiedEntityKey]) {\n        return;\n      }\n      entityCacheRef[stringifiedEntityKey] = entityKey;\n      // we need the `any` casting here since this is a temporary state\n      // where we will later on flip the entity map and populate it with\n      // real entity, at this stage we just need to map back the entity\n      // key used by the BlockNode\n      entityMap[stringifiedEntityKey] = '' + entityStorageKey;\n      entityStorageKey++;\n    });\n\n    insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\n  });\n\n  return {\n    blocks: rawBlocks,\n    entityMap: entityMap\n  };\n};\n\n// Flip storage map so that our storage keys map to global\n// DraftEntity keys.\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\n  var blocks = rawState.blocks,\n      entityMap = rawState.entityMap;\n\n\n  var rawEntityMap = {};\n\n  Object.keys(entityMap).forEach(function (key, index) {\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n    rawEntityMap[index] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n\n  return {\n    blocks: blocks,\n    entityMap: rawEntityMap\n  };\n};\n\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\n  var rawDraftContentState = {\n    entityMap: {},\n    blocks: []\n  };\n\n  // add blocks\n  rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState);\n\n  // add entities\n  rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\n\n  return rawDraftContentState;\n};\n\nmodule.exports = convertFromDraftStateToRaw;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_assign","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","ContentBlock","ContentBlockNode","DraftStringKey","encodeEntityRanges","encodeInlineStyleRanges","invariant","createRawBlock","block","entityStorageMap","getKey","text","getText","type","getType","depth","getDepth","inlineStyleRanges","entityRanges","data","getData","toObject","insertRawBlock","entityMap","rawBlocks","blockCacheRef","push","NODE_ENV","parentKey","getParentKey","rawBlock","children","encodeRawBlocks","contentState","rawState","entityCacheRef","entityStorageKey","getBlockMap","forEach","findEntityRanges","character","getEntity","start","entityKey","getEntityAt","stringifiedEntityKey","stringify","blocks","encodeRawEntityMap","rawEntityMap","keys","index","entity","unstringify","mutability","getMutability","convertFromDraftStateToRaw","rawDraftContentState"]
}
