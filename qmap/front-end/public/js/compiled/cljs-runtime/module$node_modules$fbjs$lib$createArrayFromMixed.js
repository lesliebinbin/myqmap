shadow$provide["module$node_modules$fbjs$lib$createArrayFromMixed"]=function(global,process,require,module,exports,shadow$shims){var invariant=require("module$node_modules$fbjs$lib$invariant");function toArray(obj){var length=obj.length;!(!Array.isArray(obj)&&(typeof obj==="object"||typeof obj==="function"))?"development"!=="production"?invariant(false,"toArray: Array-like object expected"):invariant(false):void 0;!(typeof length==="number")?"development"!=="production"?invariant(false,"toArray: Object needs a length property"):
invariant(false):void 0;!(length===0||length-1 in obj)?"development"!=="production"?invariant(false,"toArray: Object should have keys for indices"):invariant(false):void 0;!(typeof obj.callee!=="function")?"development"!=="production"?invariant(false,"toArray: Object can't be `arguments`. Use rest params "+"(function(...args) {}) or Array.from() instead."):invariant(false):void 0;if(obj.hasOwnProperty)try{return Array.prototype.slice.call(obj)}catch(e){}var ret=Array(length);for(var ii=0;ii<length;ii++)ret[ii]=
obj[ii];return ret}function hasArrayNature(obj){return!!obj&&(typeof obj=="object"||typeof obj=="function")&&"length"in obj&&!("setInterval"in obj)&&typeof obj.nodeType!="number"&&(Array.isArray(obj)||"callee"in obj||"item"in obj)}function createArrayFromMixed(obj){if(!hasArrayNature(obj))return[obj];else if(Array.isArray(obj))return obj.slice();else return toArray(obj)}module.exports=createArrayFromMixed}
//# sourceMappingURL=module$node_modules$fbjs$lib$createArrayFromMixed.js.map
