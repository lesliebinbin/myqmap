shadow$provide["module$node_modules$draft_js$lib$getCharacterRemovalRange"]=function(global,process,require,module,exports,shadow$shims){var DraftEntitySegments=require("module$node_modules$draft_js$lib$DraftEntitySegments");var getRangesForDraftEntity=require("module$node_modules$draft_js$lib$getRangesForDraftEntity");var invariant=require("module$node_modules$fbjs$lib$invariant");function getCharacterRemovalRange(entityMap,startBlock,endBlock,selectionState,direction){var start=selectionState.getStartOffset();
var end=selectionState.getEndOffset();var startEntityKey=startBlock.getEntityAt(start);var endEntityKey=endBlock.getEntityAt(end-1);if(!startEntityKey&&!endEntityKey)return selectionState;var newSelectionState=selectionState;if(startEntityKey&&startEntityKey===endEntityKey)newSelectionState=getEntityRemovalRange(entityMap,startBlock,newSelectionState,direction,startEntityKey,true,true);else if(startEntityKey&&endEntityKey){var startSelectionState=getEntityRemovalRange(entityMap,startBlock,newSelectionState,
direction,startEntityKey,false,true);var endSelectionState=getEntityRemovalRange(entityMap,endBlock,newSelectionState,direction,endEntityKey,false,false);newSelectionState=newSelectionState.merge({anchorOffset:startSelectionState.getAnchorOffset(),focusOffset:endSelectionState.getFocusOffset(),isBackward:false})}else if(startEntityKey){var _startSelectionState=getEntityRemovalRange(entityMap,startBlock,newSelectionState,direction,startEntityKey,false,true);newSelectionState=newSelectionState.merge({anchorOffset:_startSelectionState.getStartOffset(),
isBackward:false})}else if(endEntityKey){var _endSelectionState=getEntityRemovalRange(entityMap,endBlock,newSelectionState,direction,endEntityKey,false,false);newSelectionState=newSelectionState.merge({focusOffset:_endSelectionState.getEndOffset(),isBackward:false})}return newSelectionState}function getEntityRemovalRange(entityMap,block,selectionState,direction,entityKey,isEntireSelectionWithinEntity,isEntityAtStart){var start=selectionState.getStartOffset();var end=selectionState.getEndOffset();
var entity=entityMap.__get(entityKey);var mutability=entity.getMutability();var sideToConsider=isEntityAtStart?start:end;if(mutability==="MUTABLE")return selectionState;var entityRanges=getRangesForDraftEntity(block,entityKey).filter(function(range){return sideToConsider<=range.end&&sideToConsider>=range.start});!(entityRanges.length==1)?"development"!=="production"?invariant(false,"There should only be one entity range within this removal range."):invariant(false):void 0;var entityRange=entityRanges[0];
if(mutability==="IMMUTABLE")return selectionState.merge({anchorOffset:entityRange.start,focusOffset:entityRange.end,isBackward:false});if(!isEntireSelectionWithinEntity)if(isEntityAtStart)end=entityRange.end;else start=entityRange.start;var removalRange=DraftEntitySegments.getRemovalRange(start,end,block.getText().slice(entityRange.start,entityRange.end),entityRange.start,direction);return selectionState.merge({anchorOffset:removalRange.start,focusOffset:removalRange.end,isBackward:false})}module.exports=
getCharacterRemovalRange}
//# sourceMappingURL=module$node_modules$draft_js$lib$getCharacterRemovalRange.js.map
