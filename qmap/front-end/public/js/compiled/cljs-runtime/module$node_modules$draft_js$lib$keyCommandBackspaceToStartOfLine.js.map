{
"version":3,
"file":"module$node_modules$draft_js$lib$keyCommandBackspaceToStartOfLine.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,mEAAf,CAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBnJ,IAAIC,YAAcJ,OAAA,CAAQ,8CAAR,CAElB,KAAIK,yBAA2BL,OAAA,CAAQ,2DAAR,CAC/B,KAAIM,iCAAmCN,OAAA,CAAQ,mEAAR,CACvC,KAAIO,sBAAwBP,OAAA,CAAQ,wDAAR,CAC5B;IAAIQ,uBAAyBR,OAAA,CAAQ,yDAAR,CAE7BS,SAASA,iCAAgC,CAACC,WAAD,CAAc,CACrD,IAAIC,aAAeH,sBAAA,CAAuBE,WAAvB,CAAoC,QAAS,CAACE,aAAD,CAAgB,CAC9E,IAAIC,UAAYD,aAAAE,aAAA,EAChB,IAAID,SAAAE,YAAA,EAAJ,EAA+BF,SAAAG,gBAAA,EAA/B,GAA+D,CAA/D,CACE,MAAOT,sBAAA,CAAsBK,aAAtB,CAAqC,CAArC,CAGT,KAAIK,aAAenB,MAAAgB,aAAA,EACnB,KAAII,MAAQD,YAAAE,WAAA,CAAwB,CAAxB,CACZD,MAAA,CAAQb,wBAAA,CAAyBa,KAAzB,CAER,OAAOZ,iCAAA,CAAiCM,aAAjC;AAAgD,IAAhD,CAAsDM,KAAAE,aAAtD,CAA0EF,KAAAG,UAA1E,CAA2FH,KAAAI,eAA3F,CAAiHJ,KAAAK,YAAjH,CAAAC,eAVuE,CAA7D,CAWhB,UAXgB,CAanB,IAAIb,YAAJ,GAAqBD,WAAAe,kBAAA,EAArB,CACE,MAAOf,YAGT,OAAON,YAAAsB,KAAA,CAAiBhB,WAAjB,CAA8BC,YAA9B,CAA4C,cAA5C,CAlB8C,CAqBvDV,MAAAC,QAAA,CAAiBO,gCA5CkI;",
"sources":["node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$keyCommandBackspaceToStartOfLine\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandBackspaceToStartOfLine\n * @format\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\n\nvar expandRangeToStartOfLine = require('./expandRangeToStartOfLine');\nvar getDraftEditorSelectionWithNodes = require('./getDraftEditorSelectionWithNodes');\nvar moveSelectionBackward = require('./moveSelectionBackward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\nfunction keyCommandBackspaceToStartOfLine(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n\n    var domSelection = global.getSelection();\n    var range = domSelection.getRangeAt(0);\n    range = expandRangeToStartOfLine(range);\n\n    return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceToStartOfLine;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","EditorState","expandRangeToStartOfLine","getDraftEditorSelectionWithNodes","moveSelectionBackward","removeTextWithStrategy","keyCommandBackspaceToStartOfLine","editorState","afterRemoval","strategyState","selection","getSelection","isCollapsed","getAnchorOffset","domSelection","range","getRangeAt","endContainer","endOffset","startContainer","startOffset","selectionState","getCurrentContent","push"]
}
