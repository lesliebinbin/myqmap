{
"version":3,
"file":"module$node_modules$fbjs$lib$UserAgentData.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,4CAAf,CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAsB5H,IAAIC,SAAWJ,OAAA,CAAQ,gDAAR,CAEf,KAAIK,QAAU,SAEd,KAAIC,aAAe,CACjB,SAAU,UADO,CAOnBC,SAASA,oBAAmB,CAACC,IAAD,CAAO,CACjC,MAAOF,aAAA,CAAaE,IAAb,CAAP,EAA6BA,IADI,CASnCC,QAASA,kBAAiB,CAACC,OAAD,CAAU,CAClC,GAAI,CAACA,OAAL,CACE,MAAO,CACLC,MAAO,EADF,CAELC,MAAO,EAFF,CAKT,KAAIC,MAAQH,OAAAI,MAAA,CAAc,GAAd,CACZ,OAAO,CACLH,MAAOE,KAAA,CAAM,CAAN,CADF,CAELD,MAAOC,KAAA,CAAM,CAAN,CAFF,CAR2B,CAkBpC,IAAIE,OAAS,IAAIX,QACjB,KAAIY,QAAUD,MAAAE,UAAA,EAGd;IAAIC,mBAAqBT,iBAAA,CAAkBO,OAAAG,QAAAT,QAAlB,CACzB,KAAIU,OAAS,CACXC,oBAAqBL,OAAAM,IAAAC,aAArBF,EAAiDhB,OADtC,CAEXmB,mBAAoBR,OAAAG,QAAAT,QAApBc,EAA+CnB,OAFpC,CAGXoB,oBAAqBP,kBAAAN,MAArBa,EAAiDpB,OAHtC,CAIXqB,YAAaV,OAAAG,QAAAX,KAAbkB,EAAqCrB,OAJ1B,CAKXsB,eAAgBX,OAAAG,QAAAR,MAAhBgB,EAAyCtB,OAL9B,CAMXuB,WAAYZ,OAAAa,OAAAC,MAAZF,EAAoCvB,OANzB,CAOX0B,WAAYf,OAAAgB,OAAAxB,KAAZuB,EAAmC1B,OAPxB,CAQX4B,cAAejB,OAAAgB,OAAAtB,QAAfuB,EAAyC5B,OAR9B,CASX6B,qBAAsBlB,OAAAM,IAAAC,aAAtBW,EAAkD7B,OATvC;AAUX8B,aAAc5B,mBAAA,CAAoBS,OAAAoB,GAAA5B,KAApB,CAAd2B,EAAsD9B,OAV3C,CAWXgC,gBAAiBrB,OAAAoB,GAAA1B,QAAjB2B,EAAuChC,OAX5B,CAYXiC,oBAAqBtB,OAAAoB,GAAA1B,QAArB4B,EAA2CjC,OAZhC,CAebJ,OAAAC,QAAA,CAAiBkB,MAhF2G;",
"sources":["node_modules/fbjs/lib/UserAgentData.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$UserAgentData\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Usage note:\n * This module makes a best effort to export the same data we would internally.\n * At Facebook we use a server-generated module that does the parsing and\n * exports the data for the client to use. We can't rely on a server-side\n * implementation in open source so instead we make use of an open source\n * library to do the heavy lifting and then make some adjustments as necessary.\n * It's likely there will be some differences. Some we can smooth over.\n * Others are going to be harder.\n */\n\n'use strict';\n\nvar UAParser = require('ua-parser-js');\n\nvar UNKNOWN = 'Unknown';\n\nvar PLATFORM_MAP = {\n  'Mac OS': 'Mac OS X'\n};\n\n/**\n * Convert from UAParser platform name to what we expect.\n */\nfunction convertPlatformName(name) {\n  return PLATFORM_MAP[name] || name;\n}\n\n/**\n * Get the version number in parts. This is very naive. We actually get major\n * version as a part of UAParser already, which is generally good enough, but\n * let's get the minor just in case.\n */\nfunction getBrowserVersion(version) {\n  if (!version) {\n    return {\n      major: '',\n      minor: ''\n    };\n  }\n  var parts = version.split('.');\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}\n\n/**\n * Get the UA data fom UAParser and then convert it to the format we're\n * expecting for our APIS.\n */\nvar parser = new UAParser();\nvar results = parser.getResult();\n\n// Do some conversion first.\nvar browserVersionData = getBrowserVersion(results.browser.version);\nvar uaData = {\n  browserArchitecture: results.cpu.architecture || UNKNOWN,\n  browserFullVersion: results.browser.version || UNKNOWN,\n  browserMinorVersion: browserVersionData.minor || UNKNOWN,\n  browserName: results.browser.name || UNKNOWN,\n  browserVersion: results.browser.major || UNKNOWN,\n  deviceName: results.device.model || UNKNOWN,\n  engineName: results.engine.name || UNKNOWN,\n  engineVersion: results.engine.version || UNKNOWN,\n  platformArchitecture: results.cpu.architecture || UNKNOWN,\n  platformName: convertPlatformName(results.os.name) || UNKNOWN,\n  platformVersion: results.os.version || UNKNOWN,\n  platformFullVersion: results.os.version || UNKNOWN\n};\n\nmodule.exports = uaData;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","UAParser","UNKNOWN","PLATFORM_MAP","convertPlatformName","name","getBrowserVersion","version","major","minor","parts","split","parser","results","getResult","browserVersionData","browser","uaData","browserArchitecture","cpu","architecture","browserFullVersion","browserMinorVersion","browserName","browserVersion","deviceName","device","model","engineName","engine","engineVersion","platformArchitecture","platformName","os","platformVersion","platformFullVersion"]
}
