{
"version":3,
"file":"module$node_modules$draft_js$lib$ContentStateInlineStyle.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,0DAAf,CAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB1I,IAAIC,kBAAoBJ,OAAA,CAAQ,oDAAR,CAExB,KAAIK,SAAWL,OAAA,CAAQ,8CAAR,CAAf,CACIM,IAAMD,QAAAC,IAEV,KAAIC,wBAA0B,CAC5BC,IAAKA,QAASA,IAAG,CAACC,YAAD,CAAeC,cAAf,CAA+BC,WAA/B,CAA4C,CAC3D,MAAOC,kBAAA,CAAkBH,YAAlB,CAAgCC,cAAhC,CAAgDC,WAAhD,CAA6D,IAA7D,CADoD,CADjC,CAK5BE,OAAQA,QAASA,OAAM,CAACJ,YAAD;AAAeC,cAAf,CAA+BC,WAA/B,CAA4C,CACjE,MAAOC,kBAAA,CAAkBH,YAAlB,CAAgCC,cAAhC,CAAgDC,WAAhD,CAA6D,KAA7D,CAD0D,CALvC,CAU9BC,SAASA,kBAAiB,CAACH,YAAD,CAAeC,cAAf,CAA+BC,WAA/B,CAA4CG,WAA5C,CAAyD,CACjF,IAAIC,SAAWN,YAAAO,YAAA,EACf,KAAIC,SAAWP,cAAAQ,YAAA,EACf,KAAIC,YAAcT,cAAAU,eAAA,EAClB,KAAIC,OAASX,cAAAY,UAAA,EACb,KAAIC,UAAYb,cAAAc,aAAA,EAEhB,KAAIC,UAAYV,QAAAW,UAAA,CAAmB,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACjD,MAAOA,EAAP,GAAaX,QADoC,CAAnC,CAAAY,UAAA,CAEH,QAAS,CAACF,CAAD,CAAIC,CAAJ,CAAO,CAC3B,MAAOA,EAAP,GAAaP,MADc,CAFb,CAAAS,OAAA,CAINxB,GAAA,CAAI,CAAC,CAACe,MAAD;AAASN,QAAAgB,IAAA,CAAaV,MAAb,CAAT,CAAD,CAAJ,CAJM,CAAAW,IAAA,CAIqC,QAAS,CAACC,KAAD,CAAQC,QAAR,CAAkB,CAC9E,IAAIC,UACJ,KAAIC,QAEJ,IAAInB,QAAJ,GAAiBI,MAAjB,CAAyB,CACvBc,UAAA,CAAahB,WACbiB,SAAA,CAAWb,SAFY,CAAzB,IAGO,CACLY,UAAA,CAAaD,QAAA,GAAajB,QAAb,CAAwBE,WAAxB,CAAsC,CACnDiB,SAAA,CAAWF,QAAA,GAAab,MAAb,CAAsBE,SAAtB,CAAkCU,KAAAI,UAAA,EAFxC,CAKP,IAAIC,MAAQL,KAAAM,iBAAA,EACZ,KAAIC,OACJ,OAAOL,UAAP,CAAoBC,QAApB,CAA8B,CAC5BI,OAAA,CAAUF,KAAAP,IAAA,CAAUI,UAAV,CACVG,MAAA,CAAQA,KAAAG,IAAA,CAAUN,UAAV,CAAsBrB,WAAA,CAAcV,iBAAAsC,WAAA,CAA6BF,OAA7B,CAAsC7B,WAAtC,CAAd,CAAmEP,iBAAAuC,YAAA,CAA8BH,OAA9B,CAAuC7B,WAAvC,CAAzF,CACRwB,WAAA,EAH4B,CAM9B,MAAOF,MAAAQ,IAAA,CAAU,eAAV;AAA2BH,KAA3B,CApBuE,CAJhE,CA2BhB,OAAO7B,aAAAmC,MAAA,CAAmB,CACxB7B,SAAUA,QAAA6B,MAAA,CAAenB,SAAf,CADc,CAExBoB,gBAAiBnC,cAFO,CAGxBoC,eAAgBpC,cAHQ,CAAnB,CAlC0E,CAyCnFT,MAAAC,QAAA,CAAiBK,uBAxEyH;",
"sources":["node_modules/draft-js/lib/ContentStateInlineStyle.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$ContentStateInlineStyle\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ContentStateInlineStyle\n * @format\n * \n */\n\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\n\nvar _require = require('immutable'),\n    Map = _require.Map;\n\nvar ContentStateInlineStyle = {\n  add: function add(contentState, selectionState, inlineStyle) {\n    return modifyInlineStyle(contentState, selectionState, inlineStyle, true);\n  },\n\n  remove: function remove(contentState, selectionState, inlineStyle) {\n    return modifyInlineStyle(contentState, selectionState, inlineStyle, false);\n  }\n};\n\nfunction modifyInlineStyle(contentState, selectionState, inlineStyle, addOrRemove) {\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n\n  var newBlocks = blockMap.skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(function (block, blockKey) {\n    var sliceStart;\n    var sliceEnd;\n\n    if (startKey === endKey) {\n      sliceStart = startOffset;\n      sliceEnd = endOffset;\n    } else {\n      sliceStart = blockKey === startKey ? startOffset : 0;\n      sliceEnd = blockKey === endKey ? endOffset : block.getLength();\n    }\n\n    var chars = block.getCharacterList();\n    var current;\n    while (sliceStart < sliceEnd) {\n      current = chars.get(sliceStart);\n      chars = chars.set(sliceStart, addOrRemove ? CharacterMetadata.applyStyle(current, inlineStyle) : CharacterMetadata.removeStyle(current, inlineStyle));\n      sliceStart++;\n    }\n\n    return block.set('characterList', chars);\n  });\n\n  return contentState.merge({\n    blockMap: blockMap.merge(newBlocks),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n}\n\nmodule.exports = ContentStateInlineStyle;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","CharacterMetadata","_require","Map","ContentStateInlineStyle","add","contentState","selectionState","inlineStyle","modifyInlineStyle","remove","addOrRemove","blockMap","getBlockMap","startKey","getStartKey","startOffset","getStartOffset","endKey","getEndKey","endOffset","getEndOffset","newBlocks","skipUntil","_","k","takeUntil","concat","get","map","block","blockKey","sliceStart","sliceEnd","getLength","chars","getCharacterList","current","set","applyStyle","removeStyle","merge","selectionBefore","selectionAfter"]
}
