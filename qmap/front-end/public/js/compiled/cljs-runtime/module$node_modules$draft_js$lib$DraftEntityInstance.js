shadow$provide["module$node_modules$draft_js$lib$DraftEntityInstance"]=function(global,process,require,module,exports,shadow$shims){function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function");}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return call&&(typeof call==="object"||typeof call==="function")?call:self}function _inherits(subClass,
superClass){if(typeof superClass!=="function"&&superClass!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var Immutable=require("module$node_modules$immutable$dist$immutable");var Record=Immutable.Record;
var DraftEntityInstanceRecord=Record({type:"TOKEN",mutability:"IMMUTABLE",data:Object});var DraftEntityInstance=function(_DraftEntityInstanceR){_inherits(DraftEntityInstance,_DraftEntityInstanceR);function DraftEntityInstance(){_classCallCheck(this,DraftEntityInstance);return _possibleConstructorReturn(this,_DraftEntityInstanceR.apply(this,arguments))}DraftEntityInstance.prototype.getType=function getType(){return this.get("type")};DraftEntityInstance.prototype.getMutability=function getMutability(){return this.get("mutability")};
DraftEntityInstance.prototype.getData=function getData(){return this.get("data")};return DraftEntityInstance}(DraftEntityInstanceRecord);module.exports=DraftEntityInstance}
//# sourceMappingURL=module$node_modules$draft_js$lib$DraftEntityInstance.js.map
