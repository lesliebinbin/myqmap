shadow$provide["module$node_modules$draft_js$lib$editOnSelect"]=function(global,process,require,module,exports,shadow$shims){var EditorState=require("module$node_modules$draft_js$lib$EditorState");var ReactDOM=require("module$node_modules$react_dom$index");var getDraftEditorSelection=require("module$node_modules$draft_js$lib$getDraftEditorSelection");var invariant=require("module$node_modules$fbjs$lib$invariant");function editOnSelect(editor){if(editor._blockSelectEvents||editor._latestEditorState!==
editor.props.editorState)return;var editorState=editor.props.editorState;var editorNode=ReactDOM.findDOMNode(editor.editorContainer);!editorNode?"development"!=="production"?invariant(false,"Missing editorNode"):invariant(false):void 0;!(editorNode.firstChild instanceof HTMLElement)?"development"!=="production"?invariant(false,"editorNode.firstChild is not an HTMLElement"):invariant(false):void 0;var documentSelection=getDraftEditorSelection(editorState,editorNode.firstChild);var updatedSelectionState=
documentSelection.selectionState;if(updatedSelectionState!==editorState.getSelection()){if(documentSelection.needsRecovery)editorState=EditorState.forceSelection(editorState,updatedSelectionState);else editorState=EditorState.acceptSelection(editorState,updatedSelectionState);editor.update(editorState)}}module.exports=editOnSelect}
//# sourceMappingURL=module$node_modules$draft_js$lib$editOnSelect.js.map
