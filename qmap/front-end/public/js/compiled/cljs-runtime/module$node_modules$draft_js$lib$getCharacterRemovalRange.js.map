{
"version":3,
"file":"module$node_modules$draft_js$lib$getCharacterRemovalRange.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/draft-js/lib/getCharacterRemovalRange.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$getCharacterRemovalRange\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getCharacterRemovalRange\n * @format\n * \n */\n\n'use strict';\n\nvar DraftEntitySegments = require('./DraftEntitySegments');\n\nvar getRangesForDraftEntity = require('./getRangesForDraftEntity');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Given a SelectionState and a removal direction, determine the entire range\n * that should be removed from a ContentState. This is based on any entities\n * within the target, with their `mutability` values taken into account.\n *\n * For instance, if we are attempting to remove part of an \"immutable\" entity\n * range, the entire entity must be removed. The returned `SelectionState`\n * will be adjusted accordingly.\n */\nfunction getCharacterRemovalRange(entityMap, startBlock, endBlock, selectionState, direction) {\n  var start = selectionState.getStartOffset();\n  var end = selectionState.getEndOffset();\n  var startEntityKey = startBlock.getEntityAt(start);\n  var endEntityKey = endBlock.getEntityAt(end - 1);\n  if (!startEntityKey && !endEntityKey) {\n    return selectionState;\n  }\n  var newSelectionState = selectionState;\n  if (startEntityKey && startEntityKey === endEntityKey) {\n    newSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, true, true);\n  } else if (startEntityKey && endEntityKey) {\n    var startSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, false, true);\n    var endSelectionState = getEntityRemovalRange(entityMap, endBlock, newSelectionState, direction, endEntityKey, false, false);\n    newSelectionState = newSelectionState.merge({\n      anchorOffset: startSelectionState.getAnchorOffset(),\n      focusOffset: endSelectionState.getFocusOffset(),\n      isBackward: false\n    });\n  } else if (startEntityKey) {\n    var _startSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, false, true);\n    newSelectionState = newSelectionState.merge({\n      anchorOffset: _startSelectionState.getStartOffset(),\n      isBackward: false\n    });\n  } else if (endEntityKey) {\n    var _endSelectionState = getEntityRemovalRange(entityMap, endBlock, newSelectionState, direction, endEntityKey, false, false);\n    newSelectionState = newSelectionState.merge({\n      focusOffset: _endSelectionState.getEndOffset(),\n      isBackward: false\n    });\n  }\n  return newSelectionState;\n}\n\nfunction getEntityRemovalRange(entityMap, block, selectionState, direction, entityKey, isEntireSelectionWithinEntity, isEntityAtStart) {\n  var start = selectionState.getStartOffset();\n  var end = selectionState.getEndOffset();\n  var entity = entityMap.__get(entityKey);\n  var mutability = entity.getMutability();\n  var sideToConsider = isEntityAtStart ? start : end;\n\n  // `MUTABLE` entities can just have the specified range of text removed\n  // directly. No adjustments are needed.\n  if (mutability === 'MUTABLE') {\n    return selectionState;\n  }\n\n  // Find the entity range that overlaps with our removal range.\n  var entityRanges = getRangesForDraftEntity(block, entityKey).filter(function (range) {\n    return sideToConsider <= range.end && sideToConsider >= range.start;\n  });\n\n  !(entityRanges.length == 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There should only be one entity range within this removal range.') : invariant(false) : void 0;\n\n  var entityRange = entityRanges[0];\n\n  // For `IMMUTABLE` entity types, we will remove the entire entity range.\n  if (mutability === 'IMMUTABLE') {\n    return selectionState.merge({\n      anchorOffset: entityRange.start,\n      focusOffset: entityRange.end,\n      isBackward: false\n    });\n  }\n\n  // For `SEGMENTED` entity types, determine the appropriate segment to\n  // remove.\n  if (!isEntireSelectionWithinEntity) {\n    if (isEntityAtStart) {\n      end = entityRange.end;\n    } else {\n      start = entityRange.start;\n    }\n  }\n\n  var removalRange = DraftEntitySegments.getRemovalRange(start, end, block.getText().slice(entityRange.start, entityRange.end), entityRange.start, direction);\n\n  return selectionState.merge({\n    anchorOffset: removalRange.start,\n    focusOffset: removalRange.end,\n    isBackward: false\n  });\n}\n\nmodule.exports = getCharacterRemovalRange;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DraftEntitySegments","getRangesForDraftEntity","invariant","getCharacterRemovalRange","entityMap","startBlock","endBlock","selectionState","direction","start","getStartOffset","end","getEndOffset","startEntityKey","getEntityAt","endEntityKey","newSelectionState","getEntityRemovalRange","startSelectionState","endSelectionState","merge","anchorOffset","getAnchorOffset","focusOffset","getFocusOffset","isBackward","_startSelectionState","_endSelectionState","block","entityKey","isEntireSelectionWithinEntity","isEntityAtStart","entity","__get","mutability","getMutability","sideToConsider","entityRanges","filter","range","length","NODE_ENV","entityRange","removalRange","getRemovalRange","getText","slice"]
}
