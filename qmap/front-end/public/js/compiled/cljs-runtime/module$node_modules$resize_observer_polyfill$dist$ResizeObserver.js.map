{
"version":3,
"file":"module$node_modules$resize_observer_polyfill$dist$ResizeObserver.js",
"lineCount":24,
"mappings":"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",
"sources":["node_modules/resize-observer-polyfill/dist/ResizeObserver.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$resize_observer_polyfill$dist$ResizeObserver\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ResizeObserver = factory());\n}(this, (function () { 'use strict';\n\n    /**\r\n     * A collection of shims that provide minimal functionality of the ES6 collections.\r\n     *\r\n     * These implementations are not meant to be used outside of the ResizeObserver\r\n     * modules as they cover only a limited range of use cases.\r\n     */\r\n    /* eslint-disable require-jsdoc, valid-jsdoc */\r\n    var MapShim = (function () {\r\n        if (typeof Map !== 'undefined') {\r\n            return Map;\r\n        }\r\n        /**\r\n         * Returns index in provided array that matches the specified key.\r\n         *\r\n         * @param {Array<Array>} arr\r\n         * @param {*} key\r\n         * @returns {number}\r\n         */\r\n        function getIndex(arr, key) {\r\n            var result = -1;\r\n            arr.some(function (entry, index) {\r\n                if (entry[0] === key) {\r\n                    result = index;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            return result;\r\n        }\r\n        return /** @class */ (function () {\r\n            function class_1() {\r\n                this.__entries__ = [];\r\n            }\r\n            Object.defineProperty(class_1.prototype, \"size\", {\r\n                /**\r\n                 * @returns {boolean}\r\n                 */\r\n                get: function () {\r\n                    return this.__entries__.length;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            /**\r\n             * @param {*} key\r\n             * @returns {*}\r\n             */\r\n            class_1.prototype.get = function (key) {\r\n                var index = getIndex(this.__entries__, key);\r\n                var entry = this.__entries__[index];\r\n                return entry && entry[1];\r\n            };\r\n            /**\r\n             * @param {*} key\r\n             * @param {*} value\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.set = function (key, value) {\r\n                var index = getIndex(this.__entries__, key);\r\n                if (~index) {\r\n                    this.__entries__[index][1] = value;\r\n                }\r\n                else {\r\n                    this.__entries__.push([key, value]);\r\n                }\r\n            };\r\n            /**\r\n             * @param {*} key\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.delete = function (key) {\r\n                var entries = this.__entries__;\r\n                var index = getIndex(entries, key);\r\n                if (~index) {\r\n                    entries.splice(index, 1);\r\n                }\r\n            };\r\n            /**\r\n             * @param {*} key\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.has = function (key) {\r\n                return !!~getIndex(this.__entries__, key);\r\n            };\r\n            /**\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.clear = function () {\r\n                this.__entries__.splice(0);\r\n            };\r\n            /**\r\n             * @param {Function} callback\r\n             * @param {*} [ctx=null]\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.forEach = function (callback, ctx) {\r\n                if (ctx === void 0) { ctx = null; }\r\n                for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                    var entry = _a[_i];\r\n                    callback.call(ctx, entry[1], entry[0]);\r\n                }\r\n            };\r\n            return class_1;\r\n        }());\r\n    })();\n\n    /**\r\n     * Detects whether window and document objects are available in current environment.\r\n     */\r\n    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n    // Returns global object of a current environment.\r\n    var global$1 = (function () {\r\n        if (typeof global !== 'undefined' && global.Math === Math) {\r\n            return global;\r\n        }\r\n        if (typeof self !== 'undefined' && self.Math === Math) {\r\n            return self;\r\n        }\r\n        if (typeof window !== 'undefined' && window.Math === Math) {\r\n            return window;\r\n        }\r\n        // eslint-disable-next-line no-new-func\r\n        return Function('return this')();\r\n    })();\n\n    /**\r\n     * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n     * first one is not supported.\r\n     *\r\n     * @returns {number} Requests' identifier.\r\n     */\r\n    var requestAnimationFrame$1 = (function () {\r\n        if (typeof requestAnimationFrame === 'function') {\r\n            // It's required to use a bounded function because IE sometimes throws\r\n            // an \"Invalid calling object\" error if rAF is invoked without the global\r\n            // object on the left hand side.\r\n            return requestAnimationFrame.bind(global$1);\r\n        }\r\n        return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n    })();\n\n    // Defines minimum timeout before adding a trailing call.\r\n    var trailingTimeout = 2;\r\n    /**\r\n     * Creates a wrapper function which ensures that provided callback will be\r\n     * invoked only once during the specified delay period.\r\n     *\r\n     * @param {Function} callback - Function to be invoked after the delay period.\r\n     * @param {number} delay - Delay after which to invoke callback.\r\n     * @returns {Function}\r\n     */\r\n    function throttle (callback, delay) {\r\n        var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n        /**\r\n         * Invokes the original callback function and schedules new invocation if\r\n         * the \"proxy\" was called during current request.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        function resolvePending() {\r\n            if (leadingCall) {\r\n                leadingCall = false;\r\n                callback();\r\n            }\r\n            if (trailingCall) {\r\n                proxy();\r\n            }\r\n        }\r\n        /**\r\n         * Callback invoked after the specified delay. It will further postpone\r\n         * invocation of the original function delegating it to the\r\n         * requestAnimationFrame.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        function timeoutCallback() {\r\n            requestAnimationFrame$1(resolvePending);\r\n        }\r\n        /**\r\n         * Schedules invocation of the original function.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        function proxy() {\r\n            var timeStamp = Date.now();\r\n            if (leadingCall) {\r\n                // Reject immediately following calls.\r\n                if (timeStamp - lastCallTime < trailingTimeout) {\r\n                    return;\r\n                }\r\n                // Schedule new call to be in invoked when the pending one is resolved.\r\n                // This is important for \"transitions\" which never actually start\r\n                // immediately so there is a chance that we might miss one if change\r\n                // happens amids the pending invocation.\r\n                trailingCall = true;\r\n            }\r\n            else {\r\n                leadingCall = true;\r\n                trailingCall = false;\r\n                setTimeout(timeoutCallback, delay);\r\n            }\r\n            lastCallTime = timeStamp;\r\n        }\r\n        return proxy;\r\n    }\n\n    // Minimum delay before invoking the update of observers.\r\n    var REFRESH_DELAY = 20;\r\n    // A list of substrings of CSS properties used to find transition events that\r\n    // might affect dimensions of observed elements.\r\n    var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n    // Check if MutationObserver is available.\r\n    var mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n    /**\r\n     * Singleton controller class which handles updates of ResizeObserver instances.\r\n     */\r\n    var ResizeObserverController = /** @class */ (function () {\r\n        /**\r\n         * Creates a new instance of ResizeObserverController.\r\n         *\r\n         * @private\r\n         */\r\n        function ResizeObserverController() {\r\n            /**\r\n             * Indicates whether DOM listeners have been added.\r\n             *\r\n             * @private {boolean}\r\n             */\r\n            this.connected_ = false;\r\n            /**\r\n             * Tells that controller has subscribed for Mutation Events.\r\n             *\r\n             * @private {boolean}\r\n             */\r\n            this.mutationEventsAdded_ = false;\r\n            /**\r\n             * Keeps reference to the instance of MutationObserver.\r\n             *\r\n             * @private {MutationObserver}\r\n             */\r\n            this.mutationsObserver_ = null;\r\n            /**\r\n             * A list of connected observers.\r\n             *\r\n             * @private {Array<ResizeObserverSPI>}\r\n             */\r\n            this.observers_ = [];\r\n            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n        }\r\n        /**\r\n         * Adds observer to observers list.\r\n         *\r\n         * @param {ResizeObserverSPI} observer - Observer to be added.\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.addObserver = function (observer) {\r\n            if (!~this.observers_.indexOf(observer)) {\r\n                this.observers_.push(observer);\r\n            }\r\n            // Add listeners if they haven't been added yet.\r\n            if (!this.connected_) {\r\n                this.connect_();\r\n            }\r\n        };\r\n        /**\r\n         * Removes observer from observers list.\r\n         *\r\n         * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.removeObserver = function (observer) {\r\n            var observers = this.observers_;\r\n            var index = observers.indexOf(observer);\r\n            // Remove observer if it's present in registry.\r\n            if (~index) {\r\n                observers.splice(index, 1);\r\n            }\r\n            // Remove listeners if controller has no connected observers.\r\n            if (!observers.length && this.connected_) {\r\n                this.disconnect_();\r\n            }\r\n        };\r\n        /**\r\n         * Invokes the update of observers. It will continue running updates insofar\r\n         * it detects changes.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.refresh = function () {\r\n            var changesDetected = this.updateObservers_();\r\n            // Continue running updates if changes have been detected as there might\r\n            // be future ones caused by CSS transitions.\r\n            if (changesDetected) {\r\n                this.refresh();\r\n            }\r\n        };\r\n        /**\r\n         * Updates every observer from observers list and notifies them of queued\r\n         * entries.\r\n         *\r\n         * @private\r\n         * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n         *      dimensions of it's elements.\r\n         */\r\n        ResizeObserverController.prototype.updateObservers_ = function () {\r\n            // Collect observers that have active observations.\r\n            var activeObservers = this.observers_.filter(function (observer) {\r\n                return observer.gatherActive(), observer.hasActive();\r\n            });\r\n            // Deliver notifications in a separate cycle in order to avoid any\r\n            // collisions between observers, e.g. when multiple instances of\r\n            // ResizeObserver are tracking the same element and the callback of one\r\n            // of them changes content dimensions of the observed target. Sometimes\r\n            // this may result in notifications being blocked for the rest of observers.\r\n            activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n            return activeObservers.length > 0;\r\n        };\r\n        /**\r\n         * Initializes DOM listeners.\r\n         *\r\n         * @private\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.connect_ = function () {\r\n            // Do nothing if running in a non-browser environment or if listeners\r\n            // have been already added.\r\n            if (!isBrowser || this.connected_) {\r\n                return;\r\n            }\r\n            // Subscription to the \"Transitionend\" event is used as a workaround for\r\n            // delayed transitions. This way it's possible to capture at least the\r\n            // final state of an element.\r\n            document.addEventListener('transitionend', this.onTransitionEnd_);\r\n            window.addEventListener('resize', this.refresh);\r\n            if (mutationObserverSupported) {\r\n                this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n                this.mutationsObserver_.observe(document, {\r\n                    attributes: true,\r\n                    childList: true,\r\n                    characterData: true,\r\n                    subtree: true\r\n                });\r\n            }\r\n            else {\r\n                document.addEventListener('DOMSubtreeModified', this.refresh);\r\n                this.mutationEventsAdded_ = true;\r\n            }\r\n            this.connected_ = true;\r\n        };\r\n        /**\r\n         * Removes DOM listeners.\r\n         *\r\n         * @private\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.disconnect_ = function () {\r\n            // Do nothing if running in a non-browser environment or if listeners\r\n            // have been already removed.\r\n            if (!isBrowser || !this.connected_) {\r\n                return;\r\n            }\r\n            document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n            window.removeEventListener('resize', this.refresh);\r\n            if (this.mutationsObserver_) {\r\n                this.mutationsObserver_.disconnect();\r\n            }\r\n            if (this.mutationEventsAdded_) {\r\n                document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n            }\r\n            this.mutationsObserver_ = null;\r\n            this.mutationEventsAdded_ = false;\r\n            this.connected_ = false;\r\n        };\r\n        /**\r\n         * \"Transitionend\" event handler.\r\n         *\r\n         * @private\r\n         * @param {TransitionEvent} event\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n            var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n            // Detect whether transition may affect dimensions of an element.\r\n            var isReflowProperty = transitionKeys.some(function (key) {\r\n                return !!~propertyName.indexOf(key);\r\n            });\r\n            if (isReflowProperty) {\r\n                this.refresh();\r\n            }\r\n        };\r\n        /**\r\n         * Returns instance of the ResizeObserverController.\r\n         *\r\n         * @returns {ResizeObserverController}\r\n         */\r\n        ResizeObserverController.getInstance = function () {\r\n            if (!this.instance_) {\r\n                this.instance_ = new ResizeObserverController();\r\n            }\r\n            return this.instance_;\r\n        };\r\n        /**\r\n         * Holds reference to the controller's instance.\r\n         *\r\n         * @private {ResizeObserverController}\r\n         */\r\n        ResizeObserverController.instance_ = null;\r\n        return ResizeObserverController;\r\n    }());\n\n    /**\r\n     * Defines non-writable/enumerable properties of the provided target object.\r\n     *\r\n     * @param {Object} target - Object for which to define properties.\r\n     * @param {Object} props - Properties to be defined.\r\n     * @returns {Object} Target object.\r\n     */\r\n    var defineConfigurable = (function (target, props) {\r\n        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            Object.defineProperty(target, key, {\r\n                value: props[key],\r\n                enumerable: false,\r\n                writable: false,\r\n                configurable: true\r\n            });\r\n        }\r\n        return target;\r\n    });\n\n    /**\r\n     * Returns the global object associated with provided element.\r\n     *\r\n     * @param {Object} target\r\n     * @returns {Object}\r\n     */\r\n    var getWindowOf = (function (target) {\r\n        // Assume that the element is an instance of Node, which means that it\r\n        // has the \"ownerDocument\" property from which we can retrieve a\r\n        // corresponding global object.\r\n        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n        // Return the local global object if it's not possible extract one from\r\n        // provided element.\r\n        return ownerGlobal || global$1;\r\n    });\n\n    // Placeholder of an empty content rectangle.\r\n    var emptyRect = createRectInit(0, 0, 0, 0);\r\n    /**\r\n     * Converts provided string to a number.\r\n     *\r\n     * @param {number|string} value\r\n     * @returns {number}\r\n     */\r\n    function toFloat(value) {\r\n        return parseFloat(value) || 0;\r\n    }\r\n    /**\r\n     * Extracts borders size from provided styles.\r\n     *\r\n     * @param {CSSStyleDeclaration} styles\r\n     * @param {...string} positions - Borders positions (top, right, ...)\r\n     * @returns {number}\r\n     */\r\n    function getBordersSize(styles) {\r\n        var positions = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            positions[_i - 1] = arguments[_i];\r\n        }\r\n        return positions.reduce(function (size, position) {\r\n            var value = styles['border-' + position + '-width'];\r\n            return size + toFloat(value);\r\n        }, 0);\r\n    }\r\n    /**\r\n     * Extracts paddings sizes from provided styles.\r\n     *\r\n     * @param {CSSStyleDeclaration} styles\r\n     * @returns {Object} Paddings box.\r\n     */\r\n    function getPaddings(styles) {\r\n        var positions = ['top', 'right', 'bottom', 'left'];\r\n        var paddings = {};\r\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n            var position = positions_1[_i];\r\n            var value = styles['padding-' + position];\r\n            paddings[position] = toFloat(value);\r\n        }\r\n        return paddings;\r\n    }\r\n    /**\r\n     * Calculates content rectangle of provided SVG element.\r\n     *\r\n     * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n     *      to be calculated.\r\n     * @returns {DOMRectInit}\r\n     */\r\n    function getSVGContentRect(target) {\r\n        var bbox = target.getBBox();\r\n        return createRectInit(0, 0, bbox.width, bbox.height);\r\n    }\r\n    /**\r\n     * Calculates content rectangle of provided HTMLElement.\r\n     *\r\n     * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n     * @returns {DOMRectInit}\r\n     */\r\n    function getHTMLElementContentRect(target) {\r\n        // Client width & height properties can't be\r\n        // used exclusively as they provide rounded values.\r\n        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n        // By this condition we can catch all non-replaced inline, hidden and\r\n        // detached elements. Though elements with width & height properties less\r\n        // than 0.5 will be discarded as well.\r\n        //\r\n        // Without it we would need to implement separate methods for each of\r\n        // those cases and it's not possible to perform a precise and performance\r\n        // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n        // gives wrong results for elements with width & height less than 0.5.\r\n        if (!clientWidth && !clientHeight) {\r\n            return emptyRect;\r\n        }\r\n        var styles = getWindowOf(target).getComputedStyle(target);\r\n        var paddings = getPaddings(styles);\r\n        var horizPad = paddings.left + paddings.right;\r\n        var vertPad = paddings.top + paddings.bottom;\r\n        // Computed styles of width & height are being used because they are the\r\n        // only dimensions available to JS that contain non-rounded values. It could\r\n        // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n        // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n        var width = toFloat(styles.width), height = toFloat(styles.height);\r\n        // Width & height include paddings and borders when the 'border-box' box\r\n        // model is applied (except for IE).\r\n        if (styles.boxSizing === 'border-box') {\r\n            // Following conditions are required to handle Internet Explorer which\r\n            // doesn't include paddings and borders to computed CSS dimensions.\r\n            //\r\n            // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n            // properties then it's either IE, and thus we don't need to subtract\r\n            // anything, or an element merely doesn't have paddings/borders styles.\r\n            if (Math.round(width + horizPad) !== clientWidth) {\r\n                width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n            }\r\n            if (Math.round(height + vertPad) !== clientHeight) {\r\n                height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n            }\r\n        }\r\n        // Following steps can't be applied to the document's root element as its\r\n        // client[Width/Height] properties represent viewport area of the window.\r\n        // Besides, it's as well not necessary as the <html> itself neither has\r\n        // rendered scroll bars nor it can be clipped.\r\n        if (!isDocumentElement(target)) {\r\n            // In some browsers (only in Firefox, actually) CSS width & height\r\n            // include scroll bars size which can be removed at this step as scroll\r\n            // bars are the only difference between rounded dimensions + paddings\r\n            // and \"client\" properties, though that is not always true in Chrome.\r\n            var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n            var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n            // Chrome has a rather weird rounding of \"client\" properties.\r\n            // E.g. for an element with content width of 314.2px it sometimes gives\r\n            // the client width of 315px and for the width of 314.7px it may give\r\n            // 314px. And it doesn't happen all the time. So just ignore this delta\r\n            // as a non-relevant.\r\n            if (Math.abs(vertScrollbar) !== 1) {\r\n                width -= vertScrollbar;\r\n            }\r\n            if (Math.abs(horizScrollbar) !== 1) {\r\n                height -= horizScrollbar;\r\n            }\r\n        }\r\n        return createRectInit(paddings.left, paddings.top, width, height);\r\n    }\r\n    /**\r\n     * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n     *\r\n     * @param {Element} target - Element to be checked.\r\n     * @returns {boolean}\r\n     */\r\n    var isSVGGraphicsElement = (function () {\r\n        // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n        // interface.\r\n        if (typeof SVGGraphicsElement !== 'undefined') {\r\n            return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n        }\r\n        // If it's so, then check that element is at least an instance of the\r\n        // SVGElement and that it has the \"getBBox\" method.\r\n        // eslint-disable-next-line no-extra-parens\r\n        return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n            typeof target.getBBox === 'function'); };\r\n    })();\r\n    /**\r\n     * Checks whether provided element is a document element (<html>).\r\n     *\r\n     * @param {Element} target - Element to be checked.\r\n     * @returns {boolean}\r\n     */\r\n    function isDocumentElement(target) {\r\n        return target === getWindowOf(target).document.documentElement;\r\n    }\r\n    /**\r\n     * Calculates an appropriate content rectangle for provided html or svg element.\r\n     *\r\n     * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n     * @returns {DOMRectInit}\r\n     */\r\n    function getContentRect(target) {\r\n        if (!isBrowser) {\r\n            return emptyRect;\r\n        }\r\n        if (isSVGGraphicsElement(target)) {\r\n            return getSVGContentRect(target);\r\n        }\r\n        return getHTMLElementContentRect(target);\r\n    }\r\n    /**\r\n     * Creates rectangle with an interface of the DOMRectReadOnly.\r\n     * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n     *\r\n     * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n     * @returns {DOMRectReadOnly}\r\n     */\r\n    function createReadOnlyRect(_a) {\r\n        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n        // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n        var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n        var rect = Object.create(Constr.prototype);\r\n        // Rectangle's properties are not writable and non-enumerable.\r\n        defineConfigurable(rect, {\r\n            x: x, y: y, width: width, height: height,\r\n            top: y,\r\n            right: x + width,\r\n            bottom: height + y,\r\n            left: x\r\n        });\r\n        return rect;\r\n    }\r\n    /**\r\n     * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n     * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n     *\r\n     * @param {number} x - X coordinate.\r\n     * @param {number} y - Y coordinate.\r\n     * @param {number} width - Rectangle's width.\r\n     * @param {number} height - Rectangle's height.\r\n     * @returns {DOMRectInit}\r\n     */\r\n    function createRectInit(x, y, width, height) {\r\n        return { x: x, y: y, width: width, height: height };\r\n    }\n\n    /**\r\n     * Class that is responsible for computations of the content rectangle of\r\n     * provided DOM element and for keeping track of it's changes.\r\n     */\r\n    var ResizeObservation = /** @class */ (function () {\r\n        /**\r\n         * Creates an instance of ResizeObservation.\r\n         *\r\n         * @param {Element} target - Element to be observed.\r\n         */\r\n        function ResizeObservation(target) {\r\n            /**\r\n             * Broadcasted width of content rectangle.\r\n             *\r\n             * @type {number}\r\n             */\r\n            this.broadcastWidth = 0;\r\n            /**\r\n             * Broadcasted height of content rectangle.\r\n             *\r\n             * @type {number}\r\n             */\r\n            this.broadcastHeight = 0;\r\n            /**\r\n             * Reference to the last observed content rectangle.\r\n             *\r\n             * @private {DOMRectInit}\r\n             */\r\n            this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n            this.target = target;\r\n        }\r\n        /**\r\n         * Updates content rectangle and tells whether it's width or height properties\r\n         * have changed since the last broadcast.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        ResizeObservation.prototype.isActive = function () {\r\n            var rect = getContentRect(this.target);\r\n            this.contentRect_ = rect;\r\n            return (rect.width !== this.broadcastWidth ||\r\n                rect.height !== this.broadcastHeight);\r\n        };\r\n        /**\r\n         * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n         * from the corresponding properties of the last observed content rectangle.\r\n         *\r\n         * @returns {DOMRectInit} Last observed content rectangle.\r\n         */\r\n        ResizeObservation.prototype.broadcastRect = function () {\r\n            var rect = this.contentRect_;\r\n            this.broadcastWidth = rect.width;\r\n            this.broadcastHeight = rect.height;\r\n            return rect;\r\n        };\r\n        return ResizeObservation;\r\n    }());\n\n    var ResizeObserverEntry = /** @class */ (function () {\r\n        /**\r\n         * Creates an instance of ResizeObserverEntry.\r\n         *\r\n         * @param {Element} target - Element that is being observed.\r\n         * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n         */\r\n        function ResizeObserverEntry(target, rectInit) {\r\n            var contentRect = createReadOnlyRect(rectInit);\r\n            // According to the specification following properties are not writable\r\n            // and are also not enumerable in the native implementation.\r\n            //\r\n            // Property accessors are not being used as they'd require to define a\r\n            // private WeakMap storage which may cause memory leaks in browsers that\r\n            // don't support this type of collections.\r\n            defineConfigurable(this, { target: target, contentRect: contentRect });\r\n        }\r\n        return ResizeObserverEntry;\r\n    }());\n\n    var ResizeObserverSPI = /** @class */ (function () {\r\n        /**\r\n         * Creates a new instance of ResizeObserver.\r\n         *\r\n         * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n         *      when one of the observed elements changes it's content dimensions.\r\n         * @param {ResizeObserverController} controller - Controller instance which\r\n         *      is responsible for the updates of observer.\r\n         * @param {ResizeObserver} callbackCtx - Reference to the public\r\n         *      ResizeObserver instance which will be passed to callback function.\r\n         */\r\n        function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n            /**\r\n             * Collection of resize observations that have detected changes in dimensions\r\n             * of elements.\r\n             *\r\n             * @private {Array<ResizeObservation>}\r\n             */\r\n            this.activeObservations_ = [];\r\n            /**\r\n             * Registry of the ResizeObservation instances.\r\n             *\r\n             * @private {Map<Element, ResizeObservation>}\r\n             */\r\n            this.observations_ = new MapShim();\r\n            if (typeof callback !== 'function') {\r\n                throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n            }\r\n            this.callback_ = callback;\r\n            this.controller_ = controller;\r\n            this.callbackCtx_ = callbackCtx;\r\n        }\r\n        /**\r\n         * Starts observing provided element.\r\n         *\r\n         * @param {Element} target - Element to be observed.\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.observe = function (target) {\r\n            if (!arguments.length) {\r\n                throw new TypeError('1 argument required, but only 0 present.');\r\n            }\r\n            // Do nothing if current environment doesn't have the Element interface.\r\n            if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n                return;\r\n            }\r\n            if (!(target instanceof getWindowOf(target).Element)) {\r\n                throw new TypeError('parameter 1 is not of type \"Element\".');\r\n            }\r\n            var observations = this.observations_;\r\n            // Do nothing if element is already being observed.\r\n            if (observations.has(target)) {\r\n                return;\r\n            }\r\n            observations.set(target, new ResizeObservation(target));\r\n            this.controller_.addObserver(this);\r\n            // Force the update of observations.\r\n            this.controller_.refresh();\r\n        };\r\n        /**\r\n         * Stops observing provided element.\r\n         *\r\n         * @param {Element} target - Element to stop observing.\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.unobserve = function (target) {\r\n            if (!arguments.length) {\r\n                throw new TypeError('1 argument required, but only 0 present.');\r\n            }\r\n            // Do nothing if current environment doesn't have the Element interface.\r\n            if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n                return;\r\n            }\r\n            if (!(target instanceof getWindowOf(target).Element)) {\r\n                throw new TypeError('parameter 1 is not of type \"Element\".');\r\n            }\r\n            var observations = this.observations_;\r\n            // Do nothing if element is not being observed.\r\n            if (!observations.has(target)) {\r\n                return;\r\n            }\r\n            observations.delete(target);\r\n            if (!observations.size) {\r\n                this.controller_.removeObserver(this);\r\n            }\r\n        };\r\n        /**\r\n         * Stops observing all elements.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.disconnect = function () {\r\n            this.clearActive();\r\n            this.observations_.clear();\r\n            this.controller_.removeObserver(this);\r\n        };\r\n        /**\r\n         * Collects observation instances the associated element of which has changed\r\n         * it's content rectangle.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.gatherActive = function () {\r\n            var _this = this;\r\n            this.clearActive();\r\n            this.observations_.forEach(function (observation) {\r\n                if (observation.isActive()) {\r\n                    _this.activeObservations_.push(observation);\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Invokes initial callback function with a list of ResizeObserverEntry\r\n         * instances collected from active resize observations.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.broadcastActive = function () {\r\n            // Do nothing if observer doesn't have active observations.\r\n            if (!this.hasActive()) {\r\n                return;\r\n            }\r\n            var ctx = this.callbackCtx_;\r\n            // Create ResizeObserverEntry instance for every active observation.\r\n            var entries = this.activeObservations_.map(function (observation) {\r\n                return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n            });\r\n            this.callback_.call(ctx, entries, ctx);\r\n            this.clearActive();\r\n        };\r\n        /**\r\n         * Clears the collection of active observations.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.clearActive = function () {\r\n            this.activeObservations_.splice(0);\r\n        };\r\n        /**\r\n         * Tells whether observer has active observations.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        ResizeObserverSPI.prototype.hasActive = function () {\r\n            return this.activeObservations_.length > 0;\r\n        };\r\n        return ResizeObserverSPI;\r\n    }());\n\n    // Registry of internal observers. If WeakMap is not available use current shim\r\n    // for the Map collection as it has all required methods and because WeakMap\r\n    // can't be fully polyfilled anyway.\r\n    var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n    /**\r\n     * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n     * exposing only those methods and properties that are defined in the spec.\r\n     */\r\n    var ResizeObserver = /** @class */ (function () {\r\n        /**\r\n         * Creates a new instance of ResizeObserver.\r\n         *\r\n         * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n         *      dimensions of the observed elements change.\r\n         */\r\n        function ResizeObserver(callback) {\r\n            if (!(this instanceof ResizeObserver)) {\r\n                throw new TypeError('Cannot call a class as a function.');\r\n            }\r\n            if (!arguments.length) {\r\n                throw new TypeError('1 argument required, but only 0 present.');\r\n            }\r\n            var controller = ResizeObserverController.getInstance();\r\n            var observer = new ResizeObserverSPI(callback, controller, this);\r\n            observers.set(this, observer);\r\n        }\r\n        return ResizeObserver;\r\n    }());\r\n    // Expose public methods of ResizeObserver.\r\n    [\r\n        'observe',\r\n        'unobserve',\r\n        'disconnect'\r\n    ].forEach(function (method) {\r\n        ResizeObserver.prototype[method] = function () {\r\n            var _a;\r\n            return (_a = observers.get(this))[method].apply(_a, arguments);\r\n        };\r\n    });\n\n    var index = (function () {\r\n        // Export existing implementation if available.\r\n        if (typeof global$1.ResizeObserver !== 'undefined') {\r\n            return global$1.ResizeObserver;\r\n        }\r\n        return ResizeObserver;\r\n    })();\n\n    return index;\n\n})));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","ResizeObserver","MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","__entries__","Object","defineProperty","prototype","get","length","enumerable","configurable","class_1.prototype.get","set","class_1.prototype.set","value","push","delete","class_1.prototype.delete","entries","splice","has","class_1.prototype.has","clear","class_1.prototype.clear","forEach","class_1.prototype.forEach","callback","ctx","_i","_a","call","isBrowser","window","document","global$1","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","throttle","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","addObserver","ResizeObserverController.prototype.addObserver","observer","indexOf","connect_","removeObserver","ResizeObserverController.prototype.removeObserver","observers","disconnect_","ResizeObserverController.prototype.refresh","changesDetected","updateObservers_","ResizeObserverController.prototype.updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","ResizeObserverController.prototype.connect_","addEventListener","observe","attributes","childList","characterData","subtree","ResizeObserverController.prototype.disconnect_","removeEventListener","disconnect","ResizeObserverController.prototype.onTransitionEnd_","_b","propertyName","isReflowProperty","getInstance","ResizeObserverController.getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerGlobal","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","getPaddings","paddings","positions_1","getSVGContentRect","bbox","getBBox","width","height","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","horizPad","left","right","vertPad","top","bottom","boxSizing","round","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","documentElement","getContentRect","createReadOnlyRect","x","y","Constr","DOMRectReadOnly","rect","create","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","ResizeObservation.prototype.isActive","broadcastRect","ResizeObservation.prototype.broadcastRect","ResizeObserverEntry","rectInit","contentRect","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","ResizeObserverSPI.prototype.observe","Element","observations","unobserve","ResizeObserverSPI.prototype.unobserve","ResizeObserverSPI.prototype.disconnect","clearActive","ResizeObserverSPI.prototype.gatherActive","_this","observation","ResizeObserverSPI.prototype.broadcastActive","map","ResizeObserverSPI.prototype.clearActive","ResizeObserverSPI.prototype.hasActive","WeakMap","method","apply"]
}
