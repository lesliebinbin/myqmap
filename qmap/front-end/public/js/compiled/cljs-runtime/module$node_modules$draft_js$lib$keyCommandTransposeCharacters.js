shadow$provide["module$node_modules$draft_js$lib$keyCommandTransposeCharacters"]=function(global,process,require,module,exports,shadow$shims){var DraftModifier=require("module$node_modules$draft_js$lib$DraftModifier");var EditorState=require("module$node_modules$draft_js$lib$EditorState");var getContentStateFragment=require("module$node_modules$draft_js$lib$getContentStateFragment");function keyCommandTransposeCharacters(editorState){var selection=editorState.getSelection();if(!selection.isCollapsed())return editorState;
var offset=selection.getAnchorOffset();if(offset===0)return editorState;var blockKey=selection.getAnchorKey();var content=editorState.getCurrentContent();var block=content.getBlockForKey(blockKey);var length=block.getLength();if(length<=1)return editorState;var removalRange;var finalSelection;if(offset===length){removalRange=selection.set("anchorOffset",offset-1);finalSelection=selection}else{removalRange=selection.set("focusOffset",offset+1);finalSelection=removalRange.set("anchorOffset",offset+
1)}var movedFragment=getContentStateFragment(content,removalRange);var afterRemoval=DraftModifier.removeRange(content,removalRange,"backward");var selectionAfter=afterRemoval.getSelectionAfter();var targetOffset=selectionAfter.getAnchorOffset()-1;var targetRange=selectionAfter.merge({anchorOffset:targetOffset,focusOffset:targetOffset});var afterInsert=DraftModifier.replaceWithFragment(afterRemoval,targetRange,movedFragment);var newEditorState=EditorState.push(editorState,afterInsert,"insert-fragment");
return EditorState.acceptSelection(newEditorState,finalSelection)}module.exports=keyCommandTransposeCharacters}
//# sourceMappingURL=module$node_modules$draft_js$lib$keyCommandTransposeCharacters.js.map
