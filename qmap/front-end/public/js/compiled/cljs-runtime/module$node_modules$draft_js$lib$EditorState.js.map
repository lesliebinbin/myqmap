{
"version":3,
"file":"module$node_modules$draft_js$lib$EditorState.js",
"lineCount":24,
"mappings":"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",
"sources":["node_modules/draft-js/lib/EditorState.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$EditorState\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EditorState\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BlockTree = require('./BlockTree');\nvar ContentState = require('./ContentState');\nvar EditorBidiService = require('./EditorBidiService');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar OrderedSet = Immutable.OrderedSet,\n    Record = Immutable.Record,\n    Stack = Immutable.Stack;\n\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\n\nvar EditorStateRecord = Record(defaultRecord);\n\nvar EditorState = function () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(''), decorator);\n  };\n\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n        decorator = config.decorator;\n\n    var recordConfig = _extends({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n\n      var newContent = put.currentContent || editorState.getCurrentContent();\n\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n\n      var existingContent = editorState.getCurrentContent();\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n\n      state.merge(put);\n    });\n\n    return new EditorState(map);\n  };\n\n  EditorState.prototype.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n\n  EditorState.prototype.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n\n  EditorState.prototype.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n\n  EditorState.prototype.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n\n  EditorState.prototype.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n\n  EditorState.prototype.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n\n  EditorState.prototype.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n\n  EditorState.prototype.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n\n  EditorState.prototype.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n\n  EditorState.prototype.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n\n  EditorState.prototype.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  };\n\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */\n\n\n  EditorState.prototype.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, { inlineStyleOverride: inlineStyleOverride });\n  };\n\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */\n\n\n  EditorState.prototype.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n    if (override != null) {\n      return override;\n    }\n\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n\n  EditorState.prototype.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n\n  EditorState.prototype.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n\n  EditorState.prototype.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n\n  EditorState.prototype.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  };\n\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */\n\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  };\n\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */\n\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n    return updateSelection(editorState, selection, true);\n  };\n\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */\n\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  };\n\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */\n\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  };\n\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */\n\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n\n    var forceSelection = changeType !== 'insert-characters';\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n\n    var inlineStyleOverride = editorState.getInlineStyleOverride();\n\n    // Don't discard inline style overrides for the following change types:\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n\n    return EditorState.set(editorState, editorStateChanges);\n  };\n\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */\n\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  };\n\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */\n\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  };\n\n  /**\n   * Not for public consumption.\n   */\n\n\n  function EditorState(immutable) {\n    _classCallCheck(this, EditorState);\n\n    this._immutable = immutable;\n  }\n\n  /**\n   * Not for public consumption.\n   */\n\n\n  EditorState.prototype.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n\n  return EditorState;\n}();\n\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\n\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey);\n\n  // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  }\n\n  // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  }\n\n  // Otherwise, look upward in the document to find the closest character.\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey);\n\n  // If there is a character just inside the selection, use its style.\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  }\n\n  // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  }\n\n  // Otherwise, look upward in the document to find the closest character.\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n\n  if (lastNonEmpty) return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  return OrderedSet();\n}\n\nmodule.exports = EditorState;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_assign","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","BlockTree","ContentState","EditorBidiService","Immutable","SelectionState","OrderedSet","Record","Stack","defaultRecord","allowUndo","currentContent","decorator","directionMap","forceSelection","inCompositionMode","inlineStyleOverride","lastChangeType","nativelyRenderedContent","redoStack","selection","treeMap","undoStack","EditorStateRecord","EditorState","createEmpty","EditorState.createEmpty","createWithContent","createFromText","EditorState.createWithContent","contentState","firstKey","getBlockMap","first","getKey","create","EditorState.create","config","recordConfig","generateNewTreeMap","getDirectionMap","set","EditorState.set","editorState","put","map","getImmutable","withMutations","state","existingDecorator","get","newContent","getCurrentContent","newTreeMap","regenerateTreeForNewDecorator","merge","existingContent","regenerateTreeForNewBlocks","getEntityMap","toJS","EditorState.prototype.toJS","getAllowUndo","EditorState.prototype.getAllowUndo","EditorState.prototype.getCurrentContent","getUndoStack","EditorState.prototype.getUndoStack","getRedoStack","EditorState.prototype.getRedoStack","getSelection","EditorState.prototype.getSelection","getDecorator","EditorState.prototype.getDecorator","isInCompositionMode","EditorState.prototype.isInCompositionMode","mustForceSelection","EditorState.prototype.mustForceSelection","getNativelyRenderedContent","EditorState.prototype.getNativelyRenderedContent","getLastChangeType","EditorState.prototype.getLastChangeType","getInlineStyleOverride","EditorState.prototype.getInlineStyleOverride","setInlineStyleOverride","EditorState.setInlineStyleOverride","getCurrentInlineStyle","EditorState.prototype.getCurrentInlineStyle","override","content","isCollapsed","getInlineStyleForCollapsedSelection","getInlineStyleForNonCollapsedSelection","getBlockTree","EditorState.prototype.getBlockTree","blockKey","getIn","isSelectionAtStartOfContent","EditorState.prototype.isSelectionAtStartOfContent","hasEdgeWithin","isSelectionAtEndOfContent","EditorState.prototype.isSelectionAtEndOfContent","blockMap","last","end","getLength","EditorState.prototype.getDirectionMap","acceptSelection","EditorState.acceptSelection","updateSelection","EditorState.forceSelection","getHasFocus","moveSelectionToEnd","EditorState.moveSelectionToEnd","lastBlock","getLastBlock","lastKey","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","moveFocusToEnd","EditorState.moveFocusToEnd","afterSelectionMove","push","EditorState.push","changeType","getSelectionAfter","mustBecomeBoundary","getSelectionBefore","overrideChangeTypes","indexOf","editorStateChanges","undo","EditorState.undo","newCurrentContent","peek","shift","redo","EditorState.redo","immutable","_immutable","EditorState.prototype.getImmutable","block","generate","toOrderedMap","newBlockMap","newEntityMap","prevBlockMap","prevTreeMap","toSeq","filter","previousTreeMap","getDecorations","startKey","getStartKey","startOffset","getStartOffset","startBlock","getBlockForKey","getInlineStyleAt","lookUpwardForInlineStyle","fromKey","lastNonEmpty","reverse","skipUntil","_","k","skip"]
}
