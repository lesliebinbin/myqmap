{
"version":3,
"file":"module$node_modules$fbjs$lib$invariant.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,wCAAf,CAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAsBxH,IAAIC,eAAiBA,QAASA,eAAc,CAACC,MAAD,CAAS,EAErD,IAAIC,aAAJ,GAA6B,YAA7B,CACEF,cAAA,CAAiBA,QAASA,eAAc,CAACC,MAAD,CAAS,CAC/C,GAAIA,MAAJ,GAAeE,SAAf,CACE,KAAM,KAAIC,KAAJ,CAAU,8CAAV,CAAN,CAF6C,CAOnDC,SAASA,UAAS,CAACC,SAAD,CAAYL,MAAZ,CAAoBM,CAApB,CAAuBC,CAAvB,CAA0BC,CAA1B,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAmCC,CAAnC,CAAsC,CACtDZ,cAAA,CAAeC,MAAf,CAEA,IAAI,CAACK,SAAL,CAAgB,CACd,IAAIO,KACJ,IAAIZ,MAAJ,GAAeE,SAAf,CACEU,KAAA,CAAQ,IAAIT,KAAJ,CAAU,oEAAV;AAAiF,6DAAjF,CADV,KAEO,CACL,IAAIU,KAAO,CAACP,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CACX,KAAIG,SAAW,CACfF,MAAA,CAAQ,IAAIT,KAAJ,CAAUH,MAAAe,QAAA,CAAe,KAAf,CAAsB,QAAS,EAAG,CAClD,MAAOF,KAAA,CAAKC,QAAA,EAAL,CAD2C,CAAlC,CAAV,CAGRF,MAAAI,KAAA,CAAa,qBANR,CASPJ,KAAAK,YAAA,CAAoB,CACpB,MAAML,MAAN,CAdc,CAHsC,CAqBxDhB,MAAAC,QAAA,CAAiBO,SArDuG;",
"sources":["node_modules/fbjs/lib/invariant.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$invariant\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","validateFormat","format","NODE_ENV","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop"]
}
