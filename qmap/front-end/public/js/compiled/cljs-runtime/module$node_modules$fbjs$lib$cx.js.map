{
"version":3,
"file":"module$node_modules$fbjs$lib$cx.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAe,iCAAf,CAAA,CAAoD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA0BjHC,QAASA,GAAE,CAACC,UAAD,CAAa,CACtB,GAAI,MAAOA,WAAX,EAAyB,QAAzB,CACE,MAAOC,OAAAC,KAAA,CAAYF,UAAZ,CAAAG,OAAA,CAA+B,QAAS,CAACC,SAAD,CAAY,CACzD,MAAOJ,WAAA,CAAWI,SAAX,CADkD,CAApD,CAAAC,IAAA,CAEAC,OAFA,CAAAC,KAAA,CAEc,GAFd,CAIT,OAAOC,MAAAC,UAAAJ,IAAAK,KAAA,CAAyBC,SAAzB,CAAoCL,OAApC,CAAAC,KAAA,CAAkD,GAAlD,CANe,CASxBD,QAASA,QAAO,CAACM,GAAD,CAAM,CACpB,MAAOA,IAAAN,QAAA,CAAY,KAAZ,CAAmB,GAAnB,CADa,CAItBV,MAAAC,QAAA,CAAiBE,EAvCgG;",
"sources":["node_modules/fbjs/lib/cx.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$cx\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\nfunction cx(classNames) {\n  if (typeof classNames == 'object') {\n    return Object.keys(classNames).filter(function (className) {\n      return classNames[className];\n    }).map(replace).join(' ');\n  }\n  return Array.prototype.map.call(arguments, replace).join(' ');\n}\n\nfunction replace(str) {\n  return str.replace(/\\//g, '-');\n}\n\nmodule.exports = cx;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","cx","classNames","Object","keys","filter","className","map","replace","join","Array","prototype","call","arguments","str"]
}
