shadow$provide["module$node_modules$draft_js$lib$getRangeClientRects"]=function(global,process,require,module,exports,shadow$shims){var UserAgent=require("module$node_modules$fbjs$lib$UserAgent");var invariant=require("module$node_modules$fbjs$lib$invariant");var isChrome=UserAgent.isBrowser("Chrome");function getRangeClientRectsChrome(range){var tempRange=range.cloneRange();var clientRects=[];for(var ancestor=range.endContainer;ancestor!=null;ancestor=ancestor.parentNode){var atCommonAncestor=ancestor===
range.commonAncestorContainer;if(atCommonAncestor)tempRange.setStart(range.startContainer,range.startOffset);else tempRange.setStart(tempRange.endContainer,0);var rects=Array.from(tempRange.getClientRects());clientRects.push(rects);if(atCommonAncestor){var _ref;clientRects.reverse();return(_ref=[]).concat.apply(_ref,clientRects)}tempRange.setEndBefore(ancestor)}!false?"development"!=="production"?invariant(false,"Found an unexpected detached subtree when getting range client rects."):invariant(false):
void 0}var getRangeClientRects=isChrome?getRangeClientRectsChrome:function(range){return Array.from(range.getClientRects())};module.exports=getRangeClientRects}
//# sourceMappingURL=module$node_modules$draft_js$lib$getRangeClientRects.js.map
