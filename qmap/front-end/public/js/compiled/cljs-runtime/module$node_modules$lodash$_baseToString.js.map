{
"version":3,
"file":"module$node_modules$lodash$_baseToString.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,0CAAf,CAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAC1H,IAAIC,OAASJ,OAAA,CAAQ,oCAAR,CAAb,CACIK,SAAWL,OAAA,CAAQ,sCAAR,CADf,CAEIM,QAAUN,OAAA,CAAQ,oCAAR,CAFd,CAGIO,SAAWP,OAAA,CAAQ,qCAAR,CAGf,KAAIQ,SAAW,CAAXA,CAAe,CAGnB,KAAIC,YAAcL,MAAA,CAASA,MAAAM,UAAT,CAA4BC,SAA9C,CACIC,eAAiBH,WAAA,CAAcA,WAAAI,SAAd,CAAqCF,SAU1DG,SAASA,aAAY,CAACC,KAAD,CAAQ,CAE3B,GAAI,MAAOA,MAAX;AAAoB,QAApB,CACE,MAAOA,MAET,IAAIT,OAAA,CAAQS,KAAR,CAAJ,CAEE,MAAOV,SAAA,CAASU,KAAT,CAAgBD,YAAhB,CAAP,CAAuC,EAEzC,IAAIP,QAAA,CAASQ,KAAT,CAAJ,CACE,MAAOH,eAAA,CAAiBA,cAAAI,KAAA,CAAoBD,KAApB,CAAjB,CAA8C,EAEvD,KAAIE,OAAUF,KAAVE,CAAkB,EACtB,OAAQA,OAAD,EAAW,GAAX,EAAmB,CAAnB,CAAuBF,KAAvB,EAAiC,CAACP,QAAlC,CAA8C,IAA9C,CAAqDS,MAbjC,CAgB7BhB,MAAAC,QAAA,CAAiBY,YArCyG;",
"sources":["node_modules/lodash/_baseToString.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseToString\"] = function(global,process,require,module,exports,shadow$shims) {\nvar Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Symbol","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result"]
}
