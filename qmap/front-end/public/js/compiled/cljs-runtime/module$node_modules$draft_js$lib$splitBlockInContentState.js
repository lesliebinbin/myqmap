shadow$provide["module$node_modules$draft_js$lib$splitBlockInContentState"]=function(global,process,require,module,exports,shadow$shims){var ContentBlockNode=require("module$node_modules$draft_js$lib$ContentBlockNode");var Immutable=require("module$node_modules$immutable$dist$immutable");var generateRandomKey=require("module$node_modules$draft_js$lib$generateRandomKey");var invariant=require("module$node_modules$fbjs$lib$invariant");var List=Immutable.List,Map=Immutable.Map;var transformBlock=function transformBlock(key,
blockMap,func){if(!key)return;var block=blockMap.get(key);if(!block)return;blockMap.set(key,func(block))};var updateBlockMapLinks=function updateBlockMapLinks(blockMap,originalBlock,belowBlock){return blockMap.withMutations(function(blocks){var originalBlockKey=originalBlock.getKey();var belowBlockKey=belowBlock.getKey();transformBlock(originalBlock.getParentKey(),blocks,function(block){var parentChildrenList=block.getChildKeys();var insertionIndex=parentChildrenList.indexOf(originalBlockKey)+1;var newChildrenArray=
parentChildrenList.toArray();newChildrenArray.splice(insertionIndex,0,belowBlockKey);return block.merge({children:List(newChildrenArray)})});transformBlock(originalBlock.getNextSiblingKey(),blocks,function(block){return block.merge({prevSibling:belowBlockKey})});transformBlock(originalBlockKey,blocks,function(block){return block.merge({nextSibling:belowBlockKey})});transformBlock(belowBlockKey,blocks,function(block){return block.merge({prevSibling:originalBlockKey})})})};var splitBlockInContentState=
function splitBlockInContentState(contentState,selectionState){!selectionState.isCollapsed()?"development"!=="production"?invariant(false,"Selection range must be collapsed."):invariant(false):void 0;var key=selectionState.getAnchorKey();var offset=selectionState.getAnchorOffset();var blockMap=contentState.getBlockMap();var blockToSplit=blockMap.get(key);var text=blockToSplit.getText();var chars=blockToSplit.getCharacterList();var keyBelow=generateRandomKey();var isExperimentalTreeBlock=blockToSplit instanceof
ContentBlockNode;var blockAbove=blockToSplit.merge({text:text.slice(0,offset),characterList:chars.slice(0,offset)});var blockBelow=blockAbove.merge({key:keyBelow,text:text.slice(offset),characterList:chars.slice(offset),data:Map()});var blocksBefore=blockMap.toSeq().takeUntil(function(v){return v===blockToSplit});var blocksAfter=blockMap.toSeq().skipUntil(function(v){return v===blockToSplit}).rest();var newBlocks=blocksBefore.concat([[key,blockAbove],[keyBelow,blockBelow]],blocksAfter).toOrderedMap();
if(isExperimentalTreeBlock){!blockToSplit.getChildKeys().isEmpty()?"development"!=="production"?invariant(false,"ContentBlockNode must not have children"):invariant(false):void 0;newBlocks=updateBlockMapLinks(newBlocks,blockAbove,blockBelow)}return contentState.merge({blockMap:newBlocks,selectionBefore:selectionState,selectionAfter:selectionState.merge({anchorKey:keyBelow,anchorOffset:0,focusKey:keyBelow,focusOffset:0,isBackward:false})})};module.exports=splitBlockInContentState}
//# sourceMappingURL=module$node_modules$draft_js$lib$splitBlockInContentState.js.map
