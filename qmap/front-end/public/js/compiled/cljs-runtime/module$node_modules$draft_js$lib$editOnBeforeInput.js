shadow$provide["module$node_modules$draft_js$lib$editOnBeforeInput"]=function(global,process,require,module,exports,shadow$shims){var BlockTree=require("module$node_modules$draft_js$lib$BlockTree");var DraftModifier=require("module$node_modules$draft_js$lib$DraftModifier");var EditorState=require("module$node_modules$draft_js$lib$EditorState");var UserAgent=require("module$node_modules$fbjs$lib$UserAgent");var getEntityKeyForSelection=require("module$node_modules$draft_js$lib$getEntityKeyForSelection");
var isEventHandled=require("module$node_modules$draft_js$lib$isEventHandled");var isSelectionAtLeafStart=require("module$node_modules$draft_js$lib$isSelectionAtLeafStart");var nullthrows=require("module$node_modules$fbjs$lib$nullthrows");var setImmediate=require("module$node_modules$fbjs$lib$setImmediate");var FF_QUICKFIND_CHAR="'";var FF_QUICKFIND_LINK_CHAR="/";var isFirefox=UserAgent.isBrowser("Firefox");function mustPreventDefaultForCharacter(character){return isFirefox&&(character==FF_QUICKFIND_CHAR||
character==FF_QUICKFIND_LINK_CHAR)}function replaceText(editorState,text,inlineStyle,entityKey){var contentState=DraftModifier.replaceText(editorState.getCurrentContent(),editorState.getSelection(),text,inlineStyle,entityKey);return EditorState.push(editorState,contentState,"insert-characters")}function editOnBeforeInput(editor,e){if(editor._pendingStateFromBeforeInput!==undefined){editor.update(editor._pendingStateFromBeforeInput);editor._pendingStateFromBeforeInput=undefined}var editorState=editor._latestEditorState;
var chars=e.data;if(!chars)return;if(editor.props.handleBeforeInput&&isEventHandled(editor.props.handleBeforeInput(chars,editorState))){e.preventDefault();return}var selection=editorState.getSelection();var selectionStart=selection.getStartOffset();var selectionEnd=selection.getEndOffset();var anchorKey=selection.getAnchorKey();if(!selection.isCollapsed()){e.preventDefault();var currentlySelectedChars=editorState.getCurrentContent().getPlainText().slice(selectionStart,selectionEnd);if(chars===currentlySelectedChars)editor.update(EditorState.forceSelection(editorState,
selection.merge({focusOffset:selectionEnd})));else editor.update(replaceText(editorState,chars,editorState.getCurrentInlineStyle(),getEntityKeyForSelection(editorState.getCurrentContent(),editorState.getSelection())));return}var newEditorState=replaceText(editorState,chars,editorState.getCurrentInlineStyle(),getEntityKeyForSelection(editorState.getCurrentContent(),editorState.getSelection()));var mustPreventNative=false;if(!mustPreventNative)mustPreventNative=isSelectionAtLeafStart(editor._latestCommittedEditorState);
if(!mustPreventNative){var nativeSelection=global.getSelection();if(nativeSelection.anchorNode&&nativeSelection.anchorNode.nodeType===Node.TEXT_NODE){var parentNode=nativeSelection.anchorNode.parentNode;mustPreventNative=parentNode.nodeName==="SPAN"&&parentNode.firstChild.nodeType===Node.TEXT_NODE&&parentNode.firstChild.nodeValue.indexOf("\t")!==-1}}if(!mustPreventNative){var originalFingerprint=BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));var newFingerprint=BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));
mustPreventNative=originalFingerprint!==newFingerprint}if(!mustPreventNative)mustPreventNative=mustPreventDefaultForCharacter(chars);if(!mustPreventNative)mustPreventNative=nullthrows(newEditorState.getDirectionMap()).get(anchorKey)!==nullthrows(editorState.getDirectionMap()).get(anchorKey);if(mustPreventNative){e.preventDefault();editor.update(newEditorState);return}newEditorState=EditorState.set(newEditorState,{nativelyRenderedContent:newEditorState.getCurrentContent()});editor._pendingStateFromBeforeInput=
newEditorState;setImmediate(function(){if(editor._pendingStateFromBeforeInput!==undefined){editor.update(editor._pendingStateFromBeforeInput);editor._pendingStateFromBeforeInput=undefined}})}module.exports=editOnBeforeInput}
//# sourceMappingURL=module$node_modules$draft_js$lib$editOnBeforeInput.js.map
