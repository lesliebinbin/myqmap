{
"version":3,
"file":"module$node_modules$draft_js$lib$keyCommandTransposeCharacters.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,gEAAf,CAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBhJ,IAAIC,cAAgBJ,OAAA,CAAQ,gDAAR,CACpB,KAAIK,YAAcL,OAAA,CAAQ,8CAAR,CAElB,KAAIM,wBAA0BN,OAAA,CAAQ,0DAAR,CAO9BO,SAASA,8BAA6B,CAACC,WAAD,CAAc,CAClD,IAAIC,UAAYD,WAAAE,aAAA,EAChB,IAAI,CAACD,SAAAE,YAAA,EAAL,CACE,MAAOH,YAGT;IAAII,OAASH,SAAAI,gBAAA,EACb,IAAID,MAAJ,GAAe,CAAf,CACE,MAAOJ,YAGT,KAAIM,SAAWL,SAAAM,aAAA,EACf,KAAIC,QAAUR,WAAAS,kBAAA,EACd,KAAIC,MAAQF,OAAAG,eAAA,CAAuBL,QAAvB,CACZ,KAAIM,OAASF,KAAAG,UAAA,EAGb,IAAID,MAAJ,EAAc,CAAd,CACE,MAAOZ,YAGT,KAAIc,YACJ,KAAIC,cAEJ,IAAIX,MAAJ,GAAeQ,MAAf,CAAuB,CAErBE,YAAA,CAAeb,SAAAe,IAAA,CAAc,cAAd,CAA8BZ,MAA9B,CAAuC,CAAvC,CACfW,eAAA,CAAiBd,SAHI,CAAvB,IAIO,CACLa,YAAA,CAAeb,SAAAe,IAAA,CAAc,aAAd,CAA6BZ,MAA7B,CAAsC,CAAtC,CACfW,eAAA,CAAiBD,YAAAE,IAAA,CAAiB,cAAjB,CAAiCZ,MAAjC;AAA0C,CAA1C,CAFZ,CAOP,IAAIa,cAAgBnB,uBAAA,CAAwBU,OAAxB,CAAiCM,YAAjC,CACpB,KAAII,aAAetB,aAAAuB,YAAA,CAA0BX,OAA1B,CAAmCM,YAAnC,CAAiD,UAAjD,CAGnB,KAAIM,eAAiBF,YAAAG,kBAAA,EACrB,KAAIC,aAAeF,cAAAf,gBAAA,EAAfiB,CAAkD,CACtD,KAAIC,YAAcH,cAAAI,MAAA,CAAqB,CACrCC,aAAcH,YADuB,CAErCI,YAAaJ,YAFwB,CAArB,CAKlB,KAAIK,YAAc/B,aAAAgC,oBAAA,CAAkCV,YAAlC,CAAgDK,WAAhD,CAA6DN,aAA7D,CAElB,KAAIY,eAAiBhC,WAAAiC,KAAA,CAAiB9B,WAAjB,CAA8B2B,WAA9B,CAA2C,iBAA3C,CAErB;MAAO9B,YAAAkC,gBAAA,CAA4BF,cAA5B,CAA4Cd,cAA5C,CAlD2C,CAqDpDtB,MAAAC,QAAA,CAAiBK,6BA/E+H;",
"sources":["node_modules/draft-js/lib/keyCommandTransposeCharacters.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$keyCommandTransposeCharacters\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandTransposeCharacters\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\n\nvar getContentStateFragment = require('./getContentStateFragment');\n\n/**\n * Transpose the characters on either side of a collapsed cursor, or\n * if the cursor is at the end of the block, transpose the last two\n * characters.\n */\nfunction keyCommandTransposeCharacters(editorState) {\n  var selection = editorState.getSelection();\n  if (!selection.isCollapsed()) {\n    return editorState;\n  }\n\n  var offset = selection.getAnchorOffset();\n  if (offset === 0) {\n    return editorState;\n  }\n\n  var blockKey = selection.getAnchorKey();\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(blockKey);\n  var length = block.getLength();\n\n  // Nothing to transpose if there aren't two characters.\n  if (length <= 1) {\n    return editorState;\n  }\n\n  var removalRange;\n  var finalSelection;\n\n  if (offset === length) {\n    // The cursor is at the end of the block. Swap the last two characters.\n    removalRange = selection.set('anchorOffset', offset - 1);\n    finalSelection = selection;\n  } else {\n    removalRange = selection.set('focusOffset', offset + 1);\n    finalSelection = removalRange.set('anchorOffset', offset + 1);\n  }\n\n  // Extract the character to move as a fragment. This preserves its\n  // styling and entity, if any.\n  var movedFragment = getContentStateFragment(content, removalRange);\n  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward');\n\n  // After the removal, the insertion target is one character back.\n  var selectionAfter = afterRemoval.getSelectionAfter();\n  var targetOffset = selectionAfter.getAnchorOffset() - 1;\n  var targetRange = selectionAfter.merge({\n    anchorOffset: targetOffset,\n    focusOffset: targetOffset\n  });\n\n  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n\n  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');\n\n  return EditorState.acceptSelection(newEditorState, finalSelection);\n}\n\nmodule.exports = keyCommandTransposeCharacters;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DraftModifier","EditorState","getContentStateFragment","keyCommandTransposeCharacters","editorState","selection","getSelection","isCollapsed","offset","getAnchorOffset","blockKey","getAnchorKey","content","getCurrentContent","block","getBlockForKey","length","getLength","removalRange","finalSelection","set","movedFragment","afterRemoval","removeRange","selectionAfter","getSelectionAfter","targetOffset","targetRange","merge","anchorOffset","focusOffset","afterInsert","replaceWithFragment","newEditorState","push","acceptSelection"]
}
