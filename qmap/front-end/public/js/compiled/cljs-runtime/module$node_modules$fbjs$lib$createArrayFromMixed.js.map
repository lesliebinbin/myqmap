{
"version":3,
"file":"module$node_modules$fbjs$lib$createArrayFromMixed.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,mDAAf,CAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAYnI,IAAIC,UAAYJ,OAAA,CAAQ,wCAAR,CAWhBK,SAASA,QAAO,CAACC,GAAD,CAAM,CACpB,IAAIC,OAASD,GAAAC,OAIb,GAAE,CAACC,KAAAC,QAAA,CAAcH,GAAd,CAAH,GAA0B,MAAOA,IAAjC,GAAyC,QAAzC,EAAqD,MAAOA,IAA5D,GAAoE,UAApE,EAAA,CAAmFI,aAAA,GAAyB,YAAzB,CAAwCN,SAAA,CAAU,KAAV,CAAiB,qCAAjB,CAAxC,CAAkGA,SAAA,CAAU,KAAV,CAArL,CAAwM,IAAK,EAE7M,GAAE,MAAOG,OAAT,GAAoB,QAApB,CAAA,CAAgCG,aAAA,GAAyB,YAAzB,CAAwCN,SAAA,CAAU,KAAV,CAAiB,yCAAjB,CAAxC;AAAsGA,SAAA,CAAU,KAAV,CAAtI,CAAyJ,IAAK,EAE9J,GAAEG,MAAF,GAAa,CAAb,EAAkBA,MAAlB,CAA2B,CAA3B,GAAgCD,IAAhC,CAAA,CAAuCI,aAAA,GAAyB,YAAzB,CAAwCN,SAAA,CAAU,KAAV,CAAiB,8CAAjB,CAAxC,CAA2GA,SAAA,CAAU,KAAV,CAAlJ,CAAqK,IAAK,EAE1K,GAAE,MAAOE,IAAAK,OAAT,GAAwB,UAAxB,CAAA,CAAsCD,aAAA,GAAyB,YAAzB,CAAwCN,SAAA,CAAU,KAAV,CAAiB,wDAAjB,CAA6E,iDAA7E,CAAxC,CAA0KA,SAAA,CAAU,KAAV,CAAhN,CAAmO,IAAK,EAKxO,IAAIE,GAAAM,eAAJ,CACE,GAAI,CACF,MAAOJ,MAAAK,UAAAC,MAAAC,KAAA,CAA2BT,GAA3B,CADL,CAEF,MAAOU,CAAP,CAAU,EAOd,IAAIC,IAAMT,KAAA,CAAMD,MAAN,CACV,KAAK,IAAIW,GAAK,CAAd,CAAiBA,EAAjB,CAAsBX,MAAtB,CAA8BW,EAAA,EAA9B,CACED,GAAA,CAAIC,EAAJ,CAAA;AAAUZ,GAAA,CAAIY,EAAJ,CAEZ,OAAOD,IA9Ba,CAgDtBE,QAASA,eAAc,CAACb,GAAD,CAAM,CAC3B,MAEE,CAAC,CAACA,GAFJ,GAIE,MAAOA,IAJT,EAIgB,QAJhB,EAI4B,MAAOA,IAJnC,EAI0C,UAJ1C,GAME,QANF,EAMcA,IANd,EAQE,EAAE,aAAF,EAAmBA,IAAnB,CARF,EAWE,MAAOA,IAAAc,SAXT,EAWyB,QAXzB,GAaEZ,KAAAC,QAAA,CAAcH,GAAd,CAbF,EAeE,QAfF,EAecA,IAfd,EAiBE,MAjBF,EAiBYA,IAjBZ,CAD2B,CA2C7Be,QAASA,qBAAoB,CAACf,GAAD,CAAM,CACjC,GAAI,CAACa,cAAA,CAAeb,GAAf,CAAL,CACE,MAAO,CAACA,GAAD,CADT,KAEO,IAAIE,KAAAC,QAAA,CAAcH,GAAd,CAAJ,CACL,MAAOA,IAAAQ,MAAA,EADF,KAGL,OAAOT,QAAA,CAAQC,GAAR,CANwB,CAUnCL,MAAAC,QAAA,CAAiBmB,oBA5HkH;",
"sources":["node_modules/fbjs/lib/createArrayFromMixed.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$createArrayFromMixed\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar invariant = require('./invariant');\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\n  // in old versions of Safari).\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","invariant","toArray","obj","length","Array","isArray","NODE_ENV","callee","hasOwnProperty","prototype","slice","call","e","ret","ii","hasArrayNature","nodeType","createArrayFromMixed"]
}
