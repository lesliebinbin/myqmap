{
"version":3,
"file":"module$node_modules$lodash$_equalByTag.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/lodash/_equalByTag.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_equalByTag\"] = function(global,process,require,module,exports,shadow$shims) {\nvar Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Symbol","Uint8Array","eq","equalArrays","mapToArray","setToArray","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","prototype","undefined","symbolValueOf","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","byteLength","byteOffset","buffer","name","message","convert","isPartial","size","stacked","get","set","result","call"]
}
