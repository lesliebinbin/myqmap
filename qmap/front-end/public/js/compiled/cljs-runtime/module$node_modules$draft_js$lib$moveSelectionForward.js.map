{
"version":3,
"file":"module$node_modules$draft_js$lib$moveSelectionForward.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,uDAAf,CAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAwBvIC,QAASA,qBAAoB,CAACC,WAAD,CAAcC,WAAd,CAA2B,CACtD,IAAIC,UAAYF,WAAAG,aAAA,EAChB,KAAIC,IAAMF,SAAAG,YAAA,EACV,KAAIC,OAASJ,SAAAK,eAAA,EACb,KAAIC,QAAUR,WAAAS,kBAAA,EAEd,KAAIC,SAAWN,GACf,KAAIO,WAEJ,KAAIC,MAAQJ,OAAAK,eAAA,CAAuBT,GAAvB,CAEZ,IAAIH,WAAJ,CAAkBW,KAAAE,QAAA,EAAAC,OAAlB,CAA2CT,MAA3C,CAAmD,CACjDI,QAAA,CAAWF,OAAAQ,YAAA,CAAoBZ,GAApB,CACXO,YAAA;AAAc,CAFmC,CAAnD,IAIEA,YAAA,CAAcL,MAAd,CAAuBL,WAGzB,OAAOC,UAAAe,MAAA,CAAgB,CAAEP,SAAUA,QAAZ,CAAsBC,YAAaA,WAAnC,CAAhB,CAlB+C,CAqBxDf,MAAAC,QAAA,CAAiBE,oBA7CsH;",
"sources":["node_modules/draft-js/lib/moveSelectionForward.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$moveSelectionForward\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule moveSelectionForward\n * @format\n * \n */\n\n'use strict';\n\n/**\n * Given a collapsed selection, move the focus `maxDistance` forward within\n * the selected block. If the selection will go beyond the end of the block,\n * move focus to the start of the next block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */\nfunction moveSelectionForward(editorState, maxDistance) {\n  var selection = editorState.getSelection();\n  var key = selection.getStartKey();\n  var offset = selection.getStartOffset();\n  var content = editorState.getCurrentContent();\n\n  var focusKey = key;\n  var focusOffset;\n\n  var block = content.getBlockForKey(key);\n\n  if (maxDistance > block.getText().length - offset) {\n    focusKey = content.getKeyAfter(key);\n    focusOffset = 0;\n  } else {\n    focusOffset = offset + maxDistance;\n  }\n\n  return selection.merge({ focusKey: focusKey, focusOffset: focusOffset });\n}\n\nmodule.exports = moveSelectionForward;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","moveSelectionForward","editorState","maxDistance","selection","getSelection","key","getStartKey","offset","getStartOffset","content","getCurrentContent","focusKey","focusOffset","block","getBlockForKey","getText","length","getKeyAfter","merge"]
}
