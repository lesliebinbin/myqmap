{
"version":3,
"file":"module$node_modules$lodash$toArray.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,oCAAf,CAAA,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CACpH,IAAIC,OAASJ,OAAA,CAAQ,oCAAR,CAAb,CACIK,UAAYL,OAAA,CAAQ,uCAAR,CADhB,CAEIM,OAASN,OAAA,CAAQ,oCAAR,CAFb,CAGIO,YAAcP,OAAA,CAAQ,wCAAR,CAHlB,CAIIQ,SAAWR,OAAA,CAAQ,qCAAR,CAJf,CAKIS,gBAAkBT,OAAA,CAAQ,6CAAR,CALtB,CAMIU,WAAaV,OAAA,CAAQ,wCAAR,CANjB;AAOIW,WAAaX,OAAA,CAAQ,wCAAR,CAPjB,CAQIY,cAAgBZ,OAAA,CAAQ,2CAAR,CARpB,CASIa,OAASb,OAAA,CAAQ,mCAAR,CAGb,KAAIc,OAAS,cAAb,CACIC,OAAS,cAGb,KAAIC,YAAcZ,MAAA,CAASA,MAAAa,SAAT,CAA2BC,SAyB7CC,SAASA,QAAO,CAACC,KAAD,CAAQ,CACtB,GAAI,CAACA,KAAL,CACE,MAAO,EAET,IAAIb,WAAA,CAAYa,KAAZ,CAAJ,CACE,MAAOZ,SAAA,CAASY,KAAT,CAAA,CAAkBR,aAAA,CAAcQ,KAAd,CAAlB,CAAyCf,SAAA,CAAUe,KAAV,CAElD,IAAIJ,WAAJ,EAAmBI,KAAA,CAAMJ,WAAN,CAAnB,CACE,MAAOP,gBAAA,CAAgBW,KAAA,CAAMJ,WAAN,CAAA,EAAhB,CAET,KAAIK,IAAMf,MAAA,CAAOc,KAAP,CAAV;AACIE,KAAOD,GAAA,EAAOP,MAAP,CAAgBJ,UAAhB,CAA8BW,GAAA,EAAON,MAAP,CAAgBJ,UAAhB,CAA6BE,MAEtE,OAAOS,KAAA,CAAKF,KAAL,CAbe,CAgBxBnB,MAAAC,QAAA,CAAiBiB,OA1DmG;",
"sources":["node_modules/lodash/toArray.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$toArray\"] = function(global,process,require,module,exports,shadow$shims) {\nvar Symbol = require('./_Symbol'),\n    copyArray = require('./_copyArray'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    iteratorToArray = require('./_iteratorToArray'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray'),\n    stringToArray = require('./_stringToArray'),\n    values = require('./values');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Built-in value references. */\nvar symIterator = Symbol ? Symbol.iterator : undefined;\n\n/**\n * Converts `value` to an array.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * _.toArray({ 'a': 1, 'b': 2 });\n * // => [1, 2]\n *\n * _.toArray('abc');\n * // => ['a', 'b', 'c']\n *\n * _.toArray(1);\n * // => []\n *\n * _.toArray(null);\n * // => []\n */\nfunction toArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (isArrayLike(value)) {\n    return isString(value) ? stringToArray(value) : copyArray(value);\n  }\n  if (symIterator && value[symIterator]) {\n    return iteratorToArray(value[symIterator]());\n  }\n  var tag = getTag(value),\n      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n  return func(value);\n}\n\nmodule.exports = toArray;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Symbol","copyArray","getTag","isArrayLike","isString","iteratorToArray","mapToArray","setToArray","stringToArray","values","mapTag","setTag","symIterator","iterator","undefined","toArray","value","tag","func"]
}
