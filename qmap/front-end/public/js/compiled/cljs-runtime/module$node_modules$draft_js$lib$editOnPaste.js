shadow$provide["module$node_modules$draft_js$lib$editOnPaste"]=function(global,process,require,module,exports,shadow$shims){var BlockMapBuilder=require("module$node_modules$draft_js$lib$BlockMapBuilder");var CharacterMetadata=require("module$node_modules$draft_js$lib$CharacterMetadata");var DataTransfer=require("module$node_modules$fbjs$lib$DataTransfer");var DraftModifier=require("module$node_modules$draft_js$lib$DraftModifier");var DraftPasteProcessor=require("module$node_modules$draft_js$lib$DraftPasteProcessor");
var EditorState=require("module$node_modules$draft_js$lib$EditorState");var RichTextEditorUtil=require("module$node_modules$draft_js$lib$RichTextEditorUtil");var getEntityKeyForSelection=require("module$node_modules$draft_js$lib$getEntityKeyForSelection");var getTextContentFromFiles=require("module$node_modules$draft_js$lib$getTextContentFromFiles");var isEventHandled=require("module$node_modules$draft_js$lib$isEventHandled");var splitTextIntoTextBlocks=require("module$node_modules$draft_js$lib$splitTextIntoTextBlocks");
function editOnPaste(editor,e){e.preventDefault();var data=new DataTransfer(e.clipboardData);if(!data.isRichText()){var files=data.getFiles();var defaultFileText=data.getText();if(files.length>0){if(editor.props.handlePastedFiles&&isEventHandled(editor.props.handlePastedFiles(files)))return;getTextContentFromFiles(files,function(fileText){fileText=fileText||defaultFileText;if(!fileText)return;var editorState=editor._latestEditorState;var blocks=splitTextIntoTextBlocks(fileText);var character=CharacterMetadata.create({style:editorState.getCurrentInlineStyle(),
entity:getEntityKeyForSelection(editorState.getCurrentContent(),editorState.getSelection())});var currentBlockType=RichTextEditorUtil.getCurrentBlockType(editorState);var text=DraftPasteProcessor.processText(blocks,character,currentBlockType);var fragment=BlockMapBuilder.createFromArray(text);var withInsertedText=DraftModifier.replaceWithFragment(editorState.getCurrentContent(),editorState.getSelection(),fragment);editor.update(EditorState.push(editorState,withInsertedText,"insert-fragment"))});return}}var textBlocks=
[];var text=data.getText();var html=data.getHTML();var editorState=editor._latestEditorState;if(editor.props.handlePastedText&&isEventHandled(editor.props.handlePastedText(text,html,editorState)))return;if(text)textBlocks=splitTextIntoTextBlocks(text);if(!editor.props.stripPastedStyles){var internalClipboard=editor.getClipboard();if(data.isRichText()&&internalClipboard){if(html.indexOf(editor.getEditorKey())!==-1||textBlocks.length===1&&internalClipboard.size===1&&internalClipboard.first().getText()===
text){editor.update(insertFragment(editor._latestEditorState,internalClipboard));return}}else if(internalClipboard&&data.types.includes("com.apple.webarchive")&&!data.types.includes("text/html")&&areTextBlocksAndClipboardEqual(textBlocks,internalClipboard)){editor.update(insertFragment(editor._latestEditorState,internalClipboard));return}if(html){var htmlFragment=DraftPasteProcessor.processHTML(html,editor.props.blockRenderMap);if(htmlFragment){var contentBlocks=htmlFragment.contentBlocks,entityMap=
htmlFragment.entityMap;if(contentBlocks){var htmlMap=BlockMapBuilder.createFromArray(contentBlocks);editor.update(insertFragment(editor._latestEditorState,htmlMap,entityMap));return}}}editor.setClipboard(null)}if(textBlocks.length){var character=CharacterMetadata.create({style:editorState.getCurrentInlineStyle(),entity:getEntityKeyForSelection(editorState.getCurrentContent(),editorState.getSelection())});var currentBlockType=RichTextEditorUtil.getCurrentBlockType(editorState);var textFragment=DraftPasteProcessor.processText(textBlocks,
character,currentBlockType);var textMap=BlockMapBuilder.createFromArray(textFragment);editor.update(insertFragment(editor._latestEditorState,textMap))}}function insertFragment(editorState,fragment,entityMap){var newContent=DraftModifier.replaceWithFragment(editorState.getCurrentContent(),editorState.getSelection(),fragment);return EditorState.push(editorState,newContent.set("entityMap",entityMap),"insert-fragment")}function areTextBlocksAndClipboardEqual(textBlocks,blockMap){return textBlocks.length===
blockMap.size&&blockMap.valueSeq().every(function(block,ii){return block.getText()===textBlocks[ii]})}module.exports=editOnPaste}
//# sourceMappingURL=module$node_modules$draft_js$lib$editOnPaste.js.map
