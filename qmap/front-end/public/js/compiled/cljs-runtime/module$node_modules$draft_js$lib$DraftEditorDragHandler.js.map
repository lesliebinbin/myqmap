{
"version":3,
"file":"module$node_modules$draft_js$lib$DraftEditorDragHandler.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAe,yDAAf,CAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBzI,IAAIC,aAAeJ,OAAA,CAAQ,2CAAR,CACnB,KAAIK,cAAgBL,OAAA,CAAQ,gDAAR,CACpB,KAAIM,YAAcN,OAAA,CAAQ,8CAAR,CAElB,KAAIO,sBAAwBP,OAAA,CAAQ,wDAAR,CAC5B,KAAIQ,wBAA0BR,OAAA,CAAQ,0DAAR,CAC9B;IAAIS,yBAA2BT,OAAA,CAAQ,2DAAR,CAC/B,KAAIU,eAAiBV,OAAA,CAAQ,iDAAR,CACrB,KAAIW,WAAaX,OAAA,CAAQ,yCAAR,CAKjBY,SAASA,qBAAoB,CAACC,KAAD,CAAQC,WAAR,CAAqB,CAChD,IAAIC,KAAO,IACX,KAAIC,OAAS,IAEb,IAAI,MAAOC,SAAAC,oBAAX,GAA4C,UAA5C,CAAwD,CACtD,IAAIC,UAAYF,QAAAC,oBAAA,CAA6BL,KAAAO,EAA7B,CAAsCP,KAAAQ,EAAtC,CAChBN,KAAA,CAAOI,SAAAG,eACPN,OAAA,CAASG,SAAAI,YAH6C,CAAxD,IAIO,IAAIV,KAAAW,YAAJ,CAAuB,CAC5BT,IAAA;AAAOF,KAAAW,YACPR,OAAA,CAASH,KAAAY,YAFmB,CAAvB,IAIL,OAAO,KAGTV,KAAA,CAAOJ,UAAA,CAAWI,IAAX,CACPC,OAAA,CAASL,UAAA,CAAWK,MAAX,CACT,KAAIU,UAAYf,UAAA,CAAWJ,qBAAA,CAAsBQ,IAAtB,CAAX,CAEhB,OAAON,yBAAA,CAAyBK,WAAzB,CAAsCY,SAAtC,CAAiDV,MAAjD,CAAyDU,SAAzD,CAAoEV,MAApE,CAnByC,CAsBlD,IAAIW,uBAAyB,CAI3BC,UAAWA,QAASA,UAAS,CAACC,MAAD,CAAS,CACpCA,MAAAC,gBAAA,EADoC,CAJX,CAW3BC,OAAQA,QAASA,OAAM,CAACF,MAAD,CAASG,CAAT,CAAY,CACjC,IAAIC,KAAO,IAAI7B,YAAJ,CAAiB4B,CAAAE,YAAAC,aAAjB,CAEX,KAAIrB,YAAce,MAAAO,mBAClB,KAAIC,cAAgBzB,oBAAA,CAAqBoB,CAAAE,YAArB;AAAoCpB,WAApC,CAEpBkB,EAAAM,eAAA,EACAT,OAAAC,gBAAA,EAEA,IAAIO,aAAJ,EAAqB,IAArB,CACE,MAGF,KAAIE,MAAQN,IAAAO,SAAA,EACZ,IAAID,KAAAE,OAAJ,CAAmB,CAAnB,CAAsB,CACpB,GAAIZ,MAAAa,MAAAC,mBAAJ,EAAuCjC,cAAA,CAAemB,MAAAa,MAAAC,mBAAA,CAAgCN,aAAhC,CAA+CE,KAA/C,CAAf,CAAvC,CACE,MAGF/B,wBAAA,CAAwB+B,KAAxB,CAA+B,QAAS,CAACK,QAAD,CAAW,CACjDA,QAAA,EAAYf,MAAAgB,OAAA,CAAcC,qBAAA,CAAsBhC,WAAtB,CAAmCuB,aAAnC,CAAkDO,QAAlD,CAAd,CADqC,CAAnD,CAGA,OARoB,CAWtB,IAAIG,SAAWlB,MAAAmB,cAAA,CAAuB,UAAvB,CAAoC,UACnD,IAAInB,MAAAa,MAAAO,WAAJ,EAA+BvC,cAAA,CAAemB,MAAAa,MAAAO,WAAA,CAAwBZ,aAAxB;AAAuCJ,IAAvC,CAA6Cc,QAA7C,CAAf,CAA/B,CACE,MAGF,IAAIlB,MAAAmB,cAAJ,CAA0B,CACxBnB,MAAAgB,OAAA,CAAcK,QAAA,CAASpC,WAAT,CAAsBuB,aAAtB,CAAd,CACA,OAFwB,CAK1BR,MAAAgB,OAAA,CAAcC,qBAAA,CAAsBhC,WAAtB,CAAmCuB,aAAnC,CAAkDJ,IAAAkB,QAAA,EAAlD,CAAd,CAnCiC,CAXR,CAkD7BD,SAASA,SAAQ,CAACpC,WAAD,CAAcsC,eAAd,CAA+B,CAC9C,IAAIC,gBAAkBhD,aAAA6C,SAAA,CAAuBpC,WAAAwC,kBAAA,EAAvB,CAAwDxC,WAAAyC,aAAA,EAAxD,CAAoFH,eAApF,CACtB,OAAO9C,YAAAkD,KAAA,CAAiB1C,WAAjB,CAA8BuC,eAA9B,CAA+C,iBAA/C,CAFuC,CAQhDP,QAASA,sBAAqB,CAAChC,WAAD,CAAc2C,SAAd,CAAyBC,IAAzB,CAA+B,CAC3D,IAAIL;AAAkBhD,aAAAsD,WAAA,CAAyB7C,WAAAwC,kBAAA,EAAzB,CAA0DG,SAA1D,CAAqEC,IAArE,CAA2E5C,WAAA8C,sBAAA,EAA3E,CACtB,OAAOtD,YAAAkD,KAAA,CAAiB1C,WAAjB,CAA8BuC,eAA9B,CAA+C,iBAA/C,CAFoD,CAK7DpD,MAAAC,QAAA,CAAiByB,sBAlHwH;",
"sources":["node_modules/draft-js/lib/DraftEditorDragHandler.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$DraftEditorDragHandler\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEditorDragHandler\n * @format\n * \n */\n\n'use strict';\n\nvar DataTransfer = require('fbjs/lib/DataTransfer');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\n\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\nvar getTextContentFromFiles = require('./getTextContentFromFiles');\nvar getUpdatedSelectionState = require('./getUpdatedSelectionState');\nvar isEventHandled = require('./isEventHandled');\nvar nullthrows = require('fbjs/lib/nullthrows');\n\n/**\n * Get a SelectionState for the supplied mouse event.\n */\nfunction getSelectionForEvent(event, editorState) {\n  var node = null;\n  var offset = null;\n\n  if (typeof document.caretRangeFromPoint === 'function') {\n    var dropRange = document.caretRangeFromPoint(event.x, event.y);\n    node = dropRange.startContainer;\n    offset = dropRange.startOffset;\n  } else if (event.rangeParent) {\n    node = event.rangeParent;\n    offset = event.rangeOffset;\n  } else {\n    return null;\n  }\n\n  node = nullthrows(node);\n  offset = nullthrows(offset);\n  var offsetKey = nullthrows(findAncestorOffsetKey(node));\n\n  return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);\n}\n\nvar DraftEditorDragHandler = {\n  /**\n   * Drag originating from input terminated.\n   */\n  onDragEnd: function onDragEnd(editor) {\n    editor.exitCurrentMode();\n  },\n\n  /**\n   * Handle data being dropped.\n   */\n  onDrop: function onDrop(editor, e) {\n    var data = new DataTransfer(e.nativeEvent.dataTransfer);\n\n    var editorState = editor._latestEditorState;\n    var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);\n\n    e.preventDefault();\n    editor.exitCurrentMode();\n\n    if (dropSelection == null) {\n      return;\n    }\n\n    var files = data.getFiles();\n    if (files.length > 0) {\n      if (editor.props.handleDroppedFiles && isEventHandled(editor.props.handleDroppedFiles(dropSelection, files))) {\n        return;\n      }\n\n      getTextContentFromFiles(files, function (fileText) {\n        fileText && editor.update(insertTextAtSelection(editorState, dropSelection, fileText));\n      });\n      return;\n    }\n\n    var dragType = editor._internalDrag ? 'internal' : 'external';\n    if (editor.props.handleDrop && isEventHandled(editor.props.handleDrop(dropSelection, data, dragType))) {\n      return;\n    }\n\n    if (editor._internalDrag) {\n      editor.update(moveText(editorState, dropSelection));\n      return;\n    }\n\n    editor.update(insertTextAtSelection(editorState, dropSelection, data.getText()));\n  }\n};\n\nfunction moveText(editorState, targetSelection) {\n  var newContentState = DraftModifier.moveText(editorState.getCurrentContent(), editorState.getSelection(), targetSelection);\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\n}\n\n/**\n * Insert text at a specified selection.\n */\nfunction insertTextAtSelection(editorState, selection, text) {\n  var newContentState = DraftModifier.insertText(editorState.getCurrentContent(), selection, text, editorState.getCurrentInlineStyle());\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\n}\n\nmodule.exports = DraftEditorDragHandler;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DataTransfer","DraftModifier","EditorState","findAncestorOffsetKey","getTextContentFromFiles","getUpdatedSelectionState","isEventHandled","nullthrows","getSelectionForEvent","event","editorState","node","offset","document","caretRangeFromPoint","dropRange","x","y","startContainer","startOffset","rangeParent","rangeOffset","offsetKey","DraftEditorDragHandler","onDragEnd","editor","exitCurrentMode","onDrop","e","data","nativeEvent","dataTransfer","_latestEditorState","dropSelection","preventDefault","files","getFiles","length","props","handleDroppedFiles","fileText","update","insertTextAtSelection","dragType","_internalDrag","handleDrop","moveText","getText","targetSelection","newContentState","getCurrentContent","getSelection","push","selection","text","insertText","getCurrentInlineStyle"]
}
