{
"version":3,
"file":"module$node_modules$draft_js$lib$DraftEntity.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/draft-js/lib/DraftEntity.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$DraftEntity\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEntity\n * @format\n * \n */\n\nvar DraftEntityInstance = require('./DraftEntityInstance');\nvar Immutable = require('immutable');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Map = Immutable.Map;\n\n\nvar instances = Map();\nvar instanceKey = 0;\n\n/**\n * Temporary utility for generating the warnings\n */\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\nvar DraftEntity = {\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return '' + instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({ type: type, mutability: mutability, data: data || {} }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    var key = '' + ++instanceKey;\n    instances = instances.set(key, instance);\n    return key;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n    var newData = _extends({}, instance.getData(), toMerge);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\n\nmodule.exports = DraftEntity;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_assign","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","DraftEntityInstance","Immutable","invariant","Map","instances","instanceKey","logWarning","oldMethodCall","newMethodCall","console","warn","DraftEntity","getLastCreatedEntityKey","__getLastCreatedEntityKey","create","type","mutability","data","__create","add","instance","__add","get","__get","mergeData","toMerge","__mergeData","replaceData","newData","__replaceData","set","NODE_ENV","getData","newInstance"]
}
