{
"version":3,
"file":"module$node_modules$lodash$_baseMergeDeep.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/lodash/_baseMergeDeep.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseMergeDeep\"] = function(global,process,require,module,exports,shadow$shims) {\nvar assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","assignMergeValue","cloneBuffer","cloneTypedArray","copyArray","initCloneObject","isArguments","isArray","isArrayLikeObject","isBuffer","isFunction","isObject","isPlainObject","isTypedArray","safeGet","toPlainObject","baseMergeDeep","object","source","key","srcIndex","mergeFunc","customizer","stack","objValue","srcValue","stacked","get","newValue","undefined","isCommon","isArr","isBuff","isTyped","set"]
}
