{
"version":3,
"file":"module$node_modules$draft_js$lib$splitBlockInContentState.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/draft-js/lib/splitBlockInContentState.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$splitBlockInContentState\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule splitBlockInContentState\n * @format\n * \n */\n\n'use strict';\n\nvar ContentBlockNode = require('./ContentBlockNode');\nvar Immutable = require('immutable');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar invariant = require('fbjs/lib/invariant');\n\nvar List = Immutable.List,\n    Map = Immutable.Map;\n\n\nvar transformBlock = function transformBlock(key, blockMap, func) {\n  if (!key) {\n    return;\n  }\n\n  var block = blockMap.get(key);\n\n  if (!block) {\n    return;\n  }\n\n  blockMap.set(key, func(block));\n};\n\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, originalBlock, belowBlock) {\n  return blockMap.withMutations(function (blocks) {\n    var originalBlockKey = originalBlock.getKey();\n    var belowBlockKey = belowBlock.getKey();\n\n    // update block parent\n    transformBlock(originalBlock.getParentKey(), blocks, function (block) {\n      var parentChildrenList = block.getChildKeys();\n      var insertionIndex = parentChildrenList.indexOf(originalBlockKey) + 1;\n      var newChildrenArray = parentChildrenList.toArray();\n\n      newChildrenArray.splice(insertionIndex, 0, belowBlockKey);\n\n      return block.merge({\n        children: List(newChildrenArray)\n      });\n    });\n\n    // update original next block\n    transformBlock(originalBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: belowBlockKey\n      });\n    });\n\n    // update original block\n    transformBlock(originalBlockKey, blocks, function (block) {\n      return block.merge({\n        nextSibling: belowBlockKey\n      });\n    });\n\n    // update below block\n    transformBlock(belowBlockKey, blocks, function (block) {\n      return block.merge({\n        prevSibling: originalBlockKey\n      });\n    });\n  });\n};\n\nvar splitBlockInContentState = function splitBlockInContentState(contentState, selectionState) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Selection range must be collapsed.') : invariant(false) : void 0;\n\n  var key = selectionState.getAnchorKey();\n  var offset = selectionState.getAnchorOffset();\n  var blockMap = contentState.getBlockMap();\n  var blockToSplit = blockMap.get(key);\n  var text = blockToSplit.getText();\n  var chars = blockToSplit.getCharacterList();\n  var keyBelow = generateRandomKey();\n  var isExperimentalTreeBlock = blockToSplit instanceof ContentBlockNode;\n\n  var blockAbove = blockToSplit.merge({\n    text: text.slice(0, offset),\n    characterList: chars.slice(0, offset)\n  });\n  var blockBelow = blockAbove.merge({\n    key: keyBelow,\n    text: text.slice(offset),\n    characterList: chars.slice(offset),\n    data: Map()\n  });\n\n  var blocksBefore = blockMap.toSeq().takeUntil(function (v) {\n    return v === blockToSplit;\n  });\n  var blocksAfter = blockMap.toSeq().skipUntil(function (v) {\n    return v === blockToSplit;\n  }).rest();\n  var newBlocks = blocksBefore.concat([[key, blockAbove], [keyBelow, blockBelow]], blocksAfter).toOrderedMap();\n\n  if (isExperimentalTreeBlock) {\n    !blockToSplit.getChildKeys().isEmpty() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ContentBlockNode must not have children') : invariant(false) : void 0;\n\n    newBlocks = updateBlockMapLinks(newBlocks, blockAbove, blockBelow);\n  }\n\n  return contentState.merge({\n    blockMap: newBlocks,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: keyBelow,\n      anchorOffset: 0,\n      focusKey: keyBelow,\n      focusOffset: 0,\n      isBackward: false\n    })\n  });\n};\n\nmodule.exports = splitBlockInContentState;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","ContentBlockNode","Immutable","generateRandomKey","invariant","List","Map","transformBlock","key","blockMap","func","block","get","set","updateBlockMapLinks","originalBlock","belowBlock","withMutations","blocks","originalBlockKey","getKey","belowBlockKey","getParentKey","parentChildrenList","getChildKeys","insertionIndex","indexOf","newChildrenArray","toArray","splice","merge","children","getNextSiblingKey","prevSibling","nextSibling","splitBlockInContentState","contentState","selectionState","isCollapsed","NODE_ENV","getAnchorKey","offset","getAnchorOffset","getBlockMap","blockToSplit","text","getText","chars","getCharacterList","keyBelow","isExperimentalTreeBlock","blockAbove","slice","characterList","blockBelow","data","blocksBefore","toSeq","takeUntil","v","blocksAfter","skipUntil","rest","newBlocks","concat","toOrderedMap","isEmpty","selectionBefore","selectionAfter","anchorKey","anchorOffset","focusKey","focusOffset","isBackward"]
}
