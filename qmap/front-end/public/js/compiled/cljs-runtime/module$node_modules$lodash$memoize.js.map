{
"version":3,
"file":"module$node_modules$lodash$memoize.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,oCAAf,CAAA,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CACpH,IAAIC,SAAWJ,OAAA,CAAQ,sCAAR,CAGf,KAAIK,gBAAkB,qBA8CtBC,SAASA,QAAO,CAACC,IAAD,CAAOC,QAAP,CAAiB,CAC/B,GAAI,MAAOD,KAAX,EAAmB,UAAnB,EAAkCC,QAAlC,EAA8C,IAA9C,EAAsD,MAAOA,SAA7D,EAAyE,UAAzE,CACE,KAAM,KAAIC,SAAJ,CAAcJ,eAAd,CAAN,CAEF,IAAIK,SAAWA,QAAQ,EAAG,CACxB,IAAIC,KAAOC,SAAX,CACIC,IAAML,QAAA,CAAWA,QAAAM,MAAA,CAAe,IAAf,CAAqBH,IAArB,CAAX,CAAwCA,IAAA,CAAK,CAAL,CADlD,CAEII,MAAQL,QAAAK,MAEZ,IAAIA,KAAAC,IAAA,CAAUH,GAAV,CAAJ,CACE,MAAOE,MAAAE,IAAA,CAAUJ,GAAV,CAET;IAAIK,OAASX,IAAAO,MAAA,CAAW,IAAX,CAAiBH,IAAjB,CACbD,SAAAK,MAAA,CAAiBA,KAAAI,IAAA,CAAUN,GAAV,CAAeK,MAAf,CAAjB,EAA2CH,KAC3C,OAAOG,OAViB,CAY1BR,SAAAK,MAAA,CAAiB,KAAKT,OAAAc,MAAL,EAAsBhB,QAAtB,CACjB,OAAOM,SAjBwB,CAqBjCJ,OAAAc,MAAA,CAAgBhB,QAEhBH,OAAAC,QAAA,CAAiBI,OAzEmG;",
"sources":["node_modules/lodash/memoize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$memoize\"] = function(global,process,require,module,exports,shadow$shims) {\nvar MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","MapCache","FUNC_ERROR_TEXT","memoize","func","resolver","TypeError","memoized","args","arguments","key","apply","cache","has","get","result","set","Cache"]
}
