{
"version":3,
"file":"module$node_modules$draft_js$lib$getEntityKeyForSelection.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,2DAAf,CAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAqB3IC,QAASA,yBAAwB,CAACC,YAAD,CAAeC,eAAf,CAAgC,CAC/D,IAAIC,SAEJ,IAAID,eAAAE,YAAA,EAAJ,CAAmC,CACjC,IAAIC,IAAMH,eAAAI,aAAA,EACV,KAAIC,OAASL,eAAAM,gBAAA,EACb,IAAID,MAAJ,CAAa,CAAb,CAAgB,CACdJ,SAAA,CAAYF,YAAAQ,eAAA,CAA4BJ,GAA5B,CAAAK,YAAA,CAA6CH,MAA7C,CAAsD,CAAtD,CACZ,IAAIJ,SAAJ,GAAkBF,YAAAQ,eAAA,CAA4BJ,GAA5B,CAAAK,YAAA,CAA6CH,MAA7C,CAAlB,CACE,MAAO,KAET,OAAOI,UAAA,CAAUV,YAAAW,aAAA,EAAV;AAAuCT,SAAvC,CALO,CAOhB,MAAO,KAV0B,CAanC,IAAIU,SAAWX,eAAAY,YAAA,EACf,KAAIC,YAAcb,eAAAc,eAAA,EAClB,KAAIC,WAAahB,YAAAQ,eAAA,CAA4BI,QAA5B,CAEjBV,UAAA,CAAYY,WAAA,GAAgBE,UAAAC,UAAA,EAAhB,CAAyC,IAAzC,CAAgDD,UAAAP,YAAA,CAAuBK,WAAvB,CAE5D,OAAOJ,UAAA,CAAUV,YAAAW,aAAA,EAAV,CAAuCT,SAAvC,CAtBwD,CA6BjEQ,QAASA,UAAS,CAACQ,SAAD,CAAYhB,SAAZ,CAAuB,CACvC,GAAIA,SAAJ,CAAe,CACb,IAAIiB,OAASD,SAAAE,MAAA,CAAgBlB,SAAhB,CACb,OAAOiB,OAAAE,cAAA,EAAA,GAA2B,SAA3B,CAAuCnB,SAAvC,CAAmD,IAF7C,CAIf,MAAO,KALgC,CAQzCN,MAAAC,QAAA,CAAiBE,wBA1D0H;",
"sources":["node_modules/draft-js/lib/getEntityKeyForSelection.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$getEntityKeyForSelection\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEntityKeyForSelection\n * @format\n * \n */\n\n'use strict';\n\n/**\n * Return the entity key that should be used when inserting text for the\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\n * and `SEGMENTED` entities should not be used for insertion behavior.\n */\nfunction getEntityKeyForSelection(contentState, targetSelection) {\n  var entityKey;\n\n  if (targetSelection.isCollapsed()) {\n    var key = targetSelection.getAnchorKey();\n    var offset = targetSelection.getAnchorOffset();\n    if (offset > 0) {\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\n        return null;\n      }\n      return filterKey(contentState.getEntityMap(), entityKey);\n    }\n    return null;\n  }\n\n  var startKey = targetSelection.getStartKey();\n  var startOffset = targetSelection.getStartOffset();\n  var startBlock = contentState.getBlockForKey(startKey);\n\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n\n  return filterKey(contentState.getEntityMap(), entityKey);\n}\n\n/**\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\n * return it. If not, return null.\n */\nfunction filterKey(entityMap, entityKey) {\n  if (entityKey) {\n    var entity = entityMap.__get(entityKey);\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\n  }\n  return null;\n}\n\nmodule.exports = getEntityKeyForSelection;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","getEntityKeyForSelection","contentState","targetSelection","entityKey","isCollapsed","key","getAnchorKey","offset","getAnchorOffset","getBlockForKey","getEntityAt","filterKey","getEntityMap","startKey","getStartKey","startOffset","getStartOffset","startBlock","getLength","entityMap","entity","__get","getMutability"]
}
