shadow$provide["module$node_modules$draft_js$lib$keyCommandBackspaceWord"]=function(global,process,require,module,exports,shadow$shims){var DraftRemovableWord=require("module$node_modules$draft_js$lib$DraftRemovableWord");var EditorState=require("module$node_modules$draft_js$lib$EditorState");var moveSelectionBackward=require("module$node_modules$draft_js$lib$moveSelectionBackward");var removeTextWithStrategy=require("module$node_modules$draft_js$lib$removeTextWithStrategy");function keyCommandBackspaceWord(editorState){var afterRemoval=
removeTextWithStrategy(editorState,function(strategyState){var selection=strategyState.getSelection();var offset=selection.getStartOffset();if(offset===0)return moveSelectionBackward(strategyState,1);var key=selection.getStartKey();var content=strategyState.getCurrentContent();var text=content.getBlockForKey(key).getText().slice(0,offset);var toRemove=DraftRemovableWord.getBackward(text);return moveSelectionBackward(strategyState,toRemove.length||1)},"backward");if(afterRemoval===editorState.getCurrentContent())return editorState;
return EditorState.push(editorState,afterRemoval,"remove-range")}module.exports=keyCommandBackspaceWord}
//# sourceMappingURL=module$node_modules$draft_js$lib$keyCommandBackspaceWord.js.map
