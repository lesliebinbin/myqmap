{
"version":3,
"file":"module$node_modules$fbjs$lib$UserAgent.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,wCAAf,CAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAWxH,IAAIC,cAAgBJ,OAAA,CAAQ,4CAAR,CACpB,KAAIK,aAAeL,OAAA,CAAQ,2CAAR,CAEnB,KAAIM,UAAYN,OAAA,CAAQ,wCAAR,CAChB,KAAIO,kBAAoBP,OAAA,CAAQ,gDAAR,CAWxBQ,SAASA,QAAO,CAACC,IAAD,CAAOC,OAAP,CAAgBC,KAAhB,CAAuBC,UAAvB,CAAmC,CAEjD,GAAIH,IAAJ,GAAaE,KAAb,CACE,MAAO,KAIT,IAAI,CAACA,KAAAE,WAAA,CAAiBJ,IAAjB,CAAL,CACE,MAAO,MAIT;IAAIK,MAAQH,KAAAI,MAAA,CAAYN,IAAAO,OAAZ,CACZ,IAAIN,OAAJ,CAAa,CACXI,KAAA,CAAQF,UAAA,CAAaA,UAAA,CAAWE,KAAX,CAAb,CAAiCA,KACzC,OAAOT,aAAAY,SAAA,CAAsBH,KAAtB,CAA6BJ,OAA7B,CAFI,CAKb,MAAO,MAlB0C,CA8BnDQ,QAASA,yBAAwB,CAACR,OAAD,CAAU,CACzC,GAAIN,aAAAe,aAAJ,GAAmC,SAAnC,CACE,MAAOT,QAAAU,QAAA,CAAgB,QAAhB,CAA0B,EAA1B,CAGT,OAAOV,QALkC,CAY3C,IAAIW,UAAY,CA4CdC,UAAWA,QAASA,UAAS,CAACX,KAAD,CAAQ,CACnC,MAAOH,QAAA,CAAQJ,aAAAmB,YAAR,CAAmCnB,aAAAoB,mBAAnC,CAAqEb,KAArE,CAD4B,CA5CvB,CAyDdc,sBAAuBA,QAASA,sBAAqB,CAACd,KAAD,CAAQ,CAC3D,MAAOH,QAAA,CAAQJ,aAAAsB,oBAAR;AAA2C,IAA3C,CAAiDf,KAAjD,CADoD,CAzD/C,CAsFdgB,SAAUA,QAASA,SAAQ,CAAChB,KAAD,CAAQ,CACjC,MAAOH,QAAA,CAAQJ,aAAAwB,WAAR,CAAkC,IAAlC,CAAwCjB,KAAxC,CAD0B,CAtFrB,CAiHdkB,SAAUA,QAASA,SAAQ,CAAClB,KAAD,CAAQ,CACjC,MAAOH,QAAA,CAAQJ,aAAA0B,WAAR,CAAkC1B,aAAA2B,cAAlC,CAA+DpB,KAA/D,CAD0B,CAjHrB,CAyJdqB,WAAYA,QAASA,WAAU,CAACrB,KAAD,CAAQ,CACrC,MAAOH,QAAA,CAAQJ,aAAAe,aAAR,CAAoCf,aAAA6B,oBAApC,CAAuEtB,KAAvE,CAA8EO,wBAA9E,CAD8B,CAzJzB,CAsKdgB,uBAAwBA,QAASA,uBAAsB,CAACvB,KAAD,CAAQ,CAC7D,MAAOH,QAAA,CAAQJ,aAAA+B,qBAAR,CAA4C,IAA5C,CAAkDxB,KAAlD,CADsD,CAtKjD,CA2KhBV,OAAAC,QAAA,CAAiBI,SAAA,CAAUe,SAAV;AAAqBd,iBAArB,CA/OuG;",
"sources":["node_modules/fbjs/lib/UserAgent.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$UserAgent\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar UserAgentData = require('./UserAgentData');\nvar VersionRange = require('./VersionRange');\n\nvar mapObject = require('./mapObject');\nvar memoizeStringOnly = require('./memoizeStringOnly');\n\n/**\n * Checks to see whether `name` and `version` satisfy `query`.\n *\n * @param {string} name Name of the browser, device, engine or platform\n * @param {?string} version Version of the browser, engine or platform\n * @param {string} query Query of form \"Name [range expression]\"\n * @param {?function} normalizer Optional pre-processor for range expression\n * @return {boolean}\n */\nfunction compare(name, version, query, normalizer) {\n  // check for exact match with no version\n  if (name === query) {\n    return true;\n  }\n\n  // check for non-matching names\n  if (!query.startsWith(name)) {\n    return false;\n  }\n\n  // full comparison with version\n  var range = query.slice(name.length);\n  if (version) {\n    range = normalizer ? normalizer(range) : range;\n    return VersionRange.contains(range, version);\n  }\n\n  return false;\n}\n\n/**\n * Normalizes `version` by stripping any \"NT\" prefix, but only on the Windows\n * platform.\n *\n * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.\n *\n * @param {string} version\n * @return {string}\n */\nfunction normalizePlatformVersion(version) {\n  if (UserAgentData.platformName === 'Windows') {\n    return version.replace(/^\\s*NT/, '');\n  }\n\n  return version;\n}\n\n/**\n * Provides client-side access to the authoritative PHP-generated User Agent\n * information supplied by the server.\n */\nvar UserAgent = {\n  /**\n   * Check if the User Agent browser matches `query`.\n   *\n   * `query` should be a string like \"Chrome\" or \"Chrome > 33\".\n   *\n   * Valid browser names include:\n   *\n   * - ACCESS NetFront\n   * - AOL\n   * - Amazon Silk\n   * - Android\n   * - BlackBerry\n   * - BlackBerry PlayBook\n   * - Chrome\n   * - Chrome for iOS\n   * - Chrome frame\n   * - Facebook PHP SDK\n   * - Facebook for iOS\n   * - Firefox\n   * - IE\n   * - IE Mobile\n   * - Mobile Safari\n   * - Motorola Internet Browser\n   * - Nokia\n   * - Openwave Mobile Browser\n   * - Opera\n   * - Opera Mini\n   * - Opera Mobile\n   * - Safari\n   * - UIWebView\n   * - Unknown\n   * - webOS\n   * - etc...\n   *\n   * An authoritative list can be found in the PHP `BrowserDetector` class and\n   * related classes in the same file (see calls to `new UserAgentBrowser` here:\n   * https://fburl.com/50728104).\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"Name [range expression]\"\n   * @return {boolean}\n   */\n  isBrowser: function isBrowser(query) {\n    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);\n  },\n\n\n  /**\n   * Check if the User Agent browser uses a 32 or 64 bit architecture.\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"32\" or \"64\".\n   * @return {boolean}\n   */\n  isBrowserArchitecture: function isBrowserArchitecture(query) {\n    return compare(UserAgentData.browserArchitecture, null, query);\n  },\n\n\n  /**\n   * Check if the User Agent device matches `query`.\n   *\n   * `query` should be a string like \"iPhone\" or \"iPad\".\n   *\n   * Valid device names include:\n   *\n   * - Kindle\n   * - Kindle Fire\n   * - Unknown\n   * - iPad\n   * - iPhone\n   * - iPod\n   * - etc...\n   *\n   * An authoritative list can be found in the PHP `DeviceDetector` class and\n   * related classes in the same file (see calls to `new UserAgentDevice` here:\n   * https://fburl.com/50728332).\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"Name\"\n   * @return {boolean}\n   */\n  isDevice: function isDevice(query) {\n    return compare(UserAgentData.deviceName, null, query);\n  },\n\n\n  /**\n   * Check if the User Agent rendering engine matches `query`.\n   *\n   * `query` should be a string like \"WebKit\" or \"WebKit >= 537\".\n   *\n   * Valid engine names include:\n   *\n   * - Gecko\n   * - Presto\n   * - Trident\n   * - WebKit\n   * - etc...\n   *\n   * An authoritative list can be found in the PHP `RenderingEngineDetector`\n   * class related classes in the same file (see calls to `new\n   * UserAgentRenderingEngine` here: https://fburl.com/50728617).\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"Name [range expression]\"\n   * @return {boolean}\n   */\n  isEngine: function isEngine(query) {\n    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);\n  },\n\n\n  /**\n   * Check if the User Agent platform matches `query`.\n   *\n   * `query` should be a string like \"Windows\" or \"iOS 5 - 6\".\n   *\n   * Valid platform names include:\n   *\n   * - Android\n   * - BlackBerry OS\n   * - Java ME\n   * - Linux\n   * - Mac OS X\n   * - Mac OS X Calendar\n   * - Mac OS X Internet Account\n   * - Symbian\n   * - SymbianOS\n   * - Windows\n   * - Windows Mobile\n   * - Windows Phone\n   * - iOS\n   * - iOS Facebook Integration Account\n   * - iOS Facebook Social Sharing UI\n   * - webOS\n   * - Chrome OS\n   * - etc...\n   *\n   * An authoritative list can be found in the PHP `PlatformDetector` class and\n   * related classes in the same file (see calls to `new UserAgentPlatform`\n   * here: https://fburl.com/50729226).\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"Name [range expression]\"\n   * @return {boolean}\n   */\n  isPlatform: function isPlatform(query) {\n    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);\n  },\n\n\n  /**\n   * Check if the User Agent platform is a 32 or 64 bit architecture.\n   *\n   * @note Function results are memoized\n   *\n   * @param {string} query Query of the form \"32\" or \"64\".\n   * @return {boolean}\n   */\n  isPlatformArchitecture: function isPlatformArchitecture(query) {\n    return compare(UserAgentData.platformArchitecture, null, query);\n  }\n};\n\nmodule.exports = mapObject(UserAgent, memoizeStringOnly);\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","UserAgentData","VersionRange","mapObject","memoizeStringOnly","compare","name","version","query","normalizer","startsWith","range","slice","length","contains","normalizePlatformVersion","platformName","replace","UserAgent","isBrowser","browserName","browserFullVersion","isBrowserArchitecture","browserArchitecture","isDevice","deviceName","isEngine","engineName","engineVersion","isPlatform","platformFullVersion","isPlatformArchitecture","platformArchitecture"]
}
