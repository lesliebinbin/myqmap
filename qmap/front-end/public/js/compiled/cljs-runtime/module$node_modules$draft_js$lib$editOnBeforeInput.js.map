{
"version":3,
"file":"module$node_modules$draft_js$lib$editOnBeforeInput.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/draft-js/lib/editOnBeforeInput.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$editOnBeforeInput\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * @format\n * \n */\n\n'use strict';\n\nvar BlockTree = require('./BlockTree');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isEventHandled = require('./isEventHandled');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar setImmediate = require('fbjs/lib/setImmediate');\n\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = '/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\n\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\nfunction editOnBeforeInput(editor, e) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var editorState = editor._latestEditorState;\n\n  var chars = e.data;\n\n  // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n  if (!chars) {\n    return;\n  }\n\n  // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\n    e.preventDefault();\n    return;\n  }\n\n  // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n  var selection = editorState.getSelection();\n  var selectionStart = selection.getStartOffset();\n  var selectionEnd = selection.getEndOffset();\n  var anchorKey = selection.getAnchorKey();\n\n  if (!selection.isCollapsed()) {\n    e.preventDefault();\n\n    // If the currently selected text matches what the user is trying to\n    // replace it with, let's just update the `SelectionState`. If not, update\n    // the `ContentState` with the new text.\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\n    if (chars === currentlySelectedChars) {\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\n        focusOffset: selectionEnd\n      })));\n    } else {\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    }\n    return;\n  }\n\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\n\n  // Bunch of different cases follow where we need to prevent native insertion.\n  var mustPreventNative = false;\n  if (!mustPreventNative) {\n    // Browsers tend to insert text in weird places in the DOM when typing at\n    // the start of a leaf, so we'll handle it ourselves.\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n  }\n  if (!mustPreventNative) {\n    // Chrome will also split up a node into two pieces if it contains a Tab\n    // char, for no explicable reason. Seemingly caused by this commit:\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\n    var nativeSelection = global.getSelection();\n    // Selection is necessarily collapsed at this point due to earlier check.\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\n      var parentNode = nativeSelection.anchorNode.parentNode;\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\t') !== -1;\n    }\n  }\n  if (!mustPreventNative) {\n    // Check the old and new \"fingerprints\" of the current block to determine\n    // whether this insertion requires any addition or removal of text nodes,\n    // in which case we would prevent the native character insertion.\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n    mustPreventNative = originalFingerprint !== newFingerprint;\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n  }\n\n  if (mustPreventNative) {\n    e.preventDefault();\n    editor.update(newEditorState);\n    return;\n  }\n\n  // We made it all the way! Let the browser do its thing and insert the char.\n  newEditorState = EditorState.set(newEditorState, {\n    nativelyRenderedContent: newEditorState.getCurrentContent()\n  });\n  // The native event is allowed to occur. To allow user onChange handlers to\n  // change the inserted text, we wait until the text is actually inserted\n  // before we actually update our state. That way when we rerender, the text\n  // we see in the DOM will already have been inserted properly.\n  editor._pendingStateFromBeforeInput = newEditorState;\n  setImmediate(function () {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n      editor.update(editor._pendingStateFromBeforeInput);\n      editor._pendingStateFromBeforeInput = undefined;\n    }\n  });\n}\n\nmodule.exports = editOnBeforeInput;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","BlockTree","DraftModifier","EditorState","UserAgent","getEntityKeyForSelection","isEventHandled","isSelectionAtLeafStart","nullthrows","setImmediate","FF_QUICKFIND_CHAR","FF_QUICKFIND_LINK_CHAR","isFirefox","isBrowser","mustPreventDefaultForCharacter","character","replaceText","editorState","text","inlineStyle","entityKey","contentState","getCurrentContent","getSelection","push","editOnBeforeInput","editor","e","_pendingStateFromBeforeInput","undefined","update","_latestEditorState","chars","data","props","handleBeforeInput","preventDefault","selection","selectionStart","getStartOffset","selectionEnd","getEndOffset","anchorKey","getAnchorKey","isCollapsed","currentlySelectedChars","getPlainText","slice","forceSelection","merge","focusOffset","getCurrentInlineStyle","newEditorState","mustPreventNative","_latestCommittedEditorState","nativeSelection","anchorNode","nodeType","Node","TEXT_NODE","parentNode","nodeName","firstChild","nodeValue","indexOf","originalFingerprint","getFingerprint","getBlockTree","newFingerprint","getDirectionMap","get","set","nativelyRenderedContent"]
}
