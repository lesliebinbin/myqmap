{
"version":3,
"file":"module$node_modules$draft_js$lib$editOnPaste.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/draft-js/lib/editOnPaste.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$editOnPaste\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnPaste\n * @format\n * \n */\n\n'use strict';\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar DataTransfer = require('fbjs/lib/DataTransfer');\nvar DraftModifier = require('./DraftModifier');\nvar DraftPasteProcessor = require('./DraftPasteProcessor');\nvar EditorState = require('./EditorState');\nvar RichTextEditorUtil = require('./RichTextEditorUtil');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar getTextContentFromFiles = require('./getTextContentFromFiles');\nvar isEventHandled = require('./isEventHandled');\nvar splitTextIntoTextBlocks = require('./splitTextIntoTextBlocks');\n\n/**\n * Paste content.\n */\nfunction editOnPaste(editor, e) {\n  e.preventDefault();\n  var data = new DataTransfer(e.clipboardData);\n\n  // Get files, unless this is likely to be a string the user wants inline.\n  if (!data.isRichText()) {\n    var files = data.getFiles();\n    var defaultFileText = data.getText();\n    if (files.length > 0) {\n      // Allow customized paste handling for images, etc. Otherwise, fall\n      // through to insert text contents into the editor.\n      if (editor.props.handlePastedFiles && isEventHandled(editor.props.handlePastedFiles(files))) {\n        return;\n      }\n\n      getTextContentFromFiles(files, function ( /*string*/fileText) {\n        fileText = fileText || defaultFileText;\n        if (!fileText) {\n          return;\n        }\n\n        var editorState = editor._latestEditorState;\n        var blocks = splitTextIntoTextBlocks(fileText);\n        var character = CharacterMetadata.create({\n          style: editorState.getCurrentInlineStyle(),\n          entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n        });\n        var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n\n        var text = DraftPasteProcessor.processText(blocks, character, currentBlockType);\n        var fragment = BlockMapBuilder.createFromArray(text);\n\n        var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n\n        editor.update(EditorState.push(editorState, withInsertedText, 'insert-fragment'));\n      });\n\n      return;\n    }\n  }\n\n  var textBlocks = [];\n  var text = data.getText();\n  var html = data.getHTML();\n  var editorState = editor._latestEditorState;\n\n  if (editor.props.handlePastedText && isEventHandled(editor.props.handlePastedText(text, html, editorState))) {\n    return;\n  }\n\n  if (text) {\n    textBlocks = splitTextIntoTextBlocks(text);\n  }\n\n  if (!editor.props.stripPastedStyles) {\n    // If the text from the paste event is rich content that matches what we\n    // already have on the internal clipboard, assume that we should just use\n    // the clipboard fragment for the paste. This will allow us to preserve\n    // styling and entities, if any are present. Note that newlines are\n    // stripped during comparison -- this is because copy/paste within the\n    // editor in Firefox and IE will not include empty lines. The resulting\n    // paste will preserve the newlines correctly.\n    var internalClipboard = editor.getClipboard();\n    if (data.isRichText() && internalClipboard) {\n      if (\n      // If the editorKey is present in the pasted HTML, it should be safe to\n      // assume this is an internal paste.\n      html.indexOf(editor.getEditorKey()) !== -1 ||\n      // The copy may have been made within a single block, in which case the\n      // editor key won't be part of the paste. In this case, just check\n      // whether the pasted text matches the internal clipboard.\n      textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {\n        editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n        return;\n      }\n    } else if (internalClipboard && data.types.includes('com.apple.webarchive') && !data.types.includes('text/html') && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {\n      // Safari does not properly store text/html in some cases.\n      // Use the internalClipboard if present and equal to what is on\n      // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.\n      editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n      return;\n    }\n\n    // If there is html paste data, try to parse that.\n    if (html) {\n      var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);\n      if (htmlFragment) {\n        var contentBlocks = htmlFragment.contentBlocks,\n            entityMap = htmlFragment.entityMap;\n\n        if (contentBlocks) {\n          var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);\n          editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));\n          return;\n        }\n      }\n    }\n\n    // Otherwise, create a new fragment from our pasted text. Also\n    // empty the internal clipboard, since it's no longer valid.\n    editor.setClipboard(null);\n  }\n\n  if (textBlocks.length) {\n    var character = CharacterMetadata.create({\n      style: editorState.getCurrentInlineStyle(),\n      entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n    });\n\n    var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n\n    var textFragment = DraftPasteProcessor.processText(textBlocks, character, currentBlockType);\n\n    var textMap = BlockMapBuilder.createFromArray(textFragment);\n    editor.update(insertFragment(editor._latestEditorState, textMap));\n  }\n}\n\nfunction insertFragment(editorState, fragment, entityMap) {\n  var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n  // TODO: merge the entity map once we stop using DraftEntity\n  // like this:\n  // const mergedEntityMap = newContent.getEntityMap().merge(entityMap);\n\n  return EditorState.push(editorState, newContent.set('entityMap', entityMap), 'insert-fragment');\n}\n\nfunction areTextBlocksAndClipboardEqual(textBlocks, blockMap) {\n  return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function (block, ii) {\n    return block.getText() === textBlocks[ii];\n  });\n}\n\nmodule.exports = editOnPaste;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","BlockMapBuilder","CharacterMetadata","DataTransfer","DraftModifier","DraftPasteProcessor","EditorState","RichTextEditorUtil","getEntityKeyForSelection","getTextContentFromFiles","isEventHandled","splitTextIntoTextBlocks","editOnPaste","editor","e","preventDefault","data","clipboardData","isRichText","files","getFiles","defaultFileText","getText","length","props","handlePastedFiles","fileText","editorState","_latestEditorState","blocks","character","create","style","getCurrentInlineStyle","entity","getCurrentContent","getSelection","currentBlockType","getCurrentBlockType","text","processText","fragment","createFromArray","withInsertedText","replaceWithFragment","update","push","textBlocks","html","getHTML","handlePastedText","stripPastedStyles","internalClipboard","getClipboard","indexOf","getEditorKey","size","first","insertFragment","types","includes","areTextBlocksAndClipboardEqual","htmlFragment","processHTML","blockRenderMap","contentBlocks","entityMap","htmlMap","setClipboard","textFragment","textMap","newContent","set","blockMap","valueSeq","every","block","ii"]
}
