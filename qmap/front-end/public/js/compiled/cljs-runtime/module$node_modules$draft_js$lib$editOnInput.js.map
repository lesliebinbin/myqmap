{
"version":3,
"file":"module$node_modules$draft_js$lib$editOnInput.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/draft-js/lib/editOnInput.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$editOnInput\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnInput\n * @format\n * \n */\n\n'use strict';\n\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar DraftModifier = require('./DraftModifier');\nvar DraftOffsetKey = require('./DraftOffsetKey');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar isGecko = UserAgent.isEngine('Gecko');\n\nvar DOUBLE_NEWLINE = '\\n\\n';\n\n/**\n * This function is intended to handle spellcheck and autocorrect changes,\n * which occur in the DOM natively without any opportunity to observe or\n * interpret the changes before they occur.\n *\n * The `input` event fires in contentEditable elements reliably for non-IE\n * browsers, immediately after changes occur to the editor DOM. Since our other\n * handlers override or otherwise handle cover other varieties of text input,\n * the DOM state should match the model in all controlled input cases. Thus,\n * when an `input` change leads to a DOM/model mismatch, the change should be\n * due to a spellcheck change, and we can incorporate it into our model.\n */\nfunction editOnInput(editor) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var domSelection = global.getSelection();\n\n  var anchorNode = domSelection.anchorNode,\n      isCollapsed = domSelection.isCollapsed;\n\n  var isNotTextNode = anchorNode.nodeType !== Node.TEXT_NODE;\n  var isNotTextOrElementNode = anchorNode.nodeType !== Node.TEXT_NODE && anchorNode.nodeType !== Node.ELEMENT_NODE;\n\n  if (DraftFeatureFlags.draft_killswitch_allow_nontextnodes) {\n    if (isNotTextNode) {\n      return;\n    }\n  } else {\n    if (isNotTextOrElementNode) {\n      // TODO: (t16149272) figure out context for this change\n      return;\n    }\n  }\n\n  if (anchorNode.nodeType === Node.TEXT_NODE && (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)) {\n    // When typing at the beginning of a visual line, Chrome splits the text\n    // nodes into two. Why? No one knows. This commit is suspicious:\n    // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724\n    // To work around, we'll merge the sibling text nodes back into this one.\n    var span = anchorNode.parentNode;\n    anchorNode.nodeValue = span.textContent;\n    for (var child = span.firstChild; child !== null; child = child.nextSibling) {\n      if (child !== anchorNode) {\n        span.removeChild(child);\n      }\n    }\n  }\n\n  var domText = anchorNode.textContent;\n  var editorState = editor._latestEditorState;\n  var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));\n\n  var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),\n      blockKey = _DraftOffsetKey$decod.blockKey,\n      decoratorKey = _DraftOffsetKey$decod.decoratorKey,\n      leafKey = _DraftOffsetKey$decod.leafKey;\n\n  var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),\n      start = _editorState$getBlock.start,\n      end = _editorState$getBlock.end;\n\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(blockKey);\n  var modelText = block.getText().slice(start, end);\n\n  // Special-case soft newlines here. If the DOM text ends in a soft newline,\n  // we will have manually inserted an extra soft newline in DraftEditorLeaf.\n  // We want to remove this extra newline for the purpose of our comparison\n  // of DOM and model text.\n  if (domText.endsWith(DOUBLE_NEWLINE)) {\n    domText = domText.slice(0, -1);\n  }\n\n  // No change -- the DOM is up to date. Nothing to do here.\n  if (domText === modelText) {\n    // This can be buggy for some Android keyboards because they don't fire\n    // standard onkeydown/pressed events and only fired editOnInput\n    // so domText is already changed by the browser and ends up being equal\n    // to modelText unexpectedly\n    return;\n  }\n\n  var selection = editorState.getSelection();\n\n  // We'll replace the entire leaf with the text content of the target.\n  var targetRange = selection.merge({\n    anchorOffset: start,\n    focusOffset: end,\n    isBackward: false\n  });\n\n  var entityKey = block.getEntityAt(start);\n  var entity = entityKey && content.getEntity(entityKey);\n  var entityType = entity && entity.getMutability();\n  var preserveEntity = entityType === 'MUTABLE';\n\n  // Immutable or segmented entities cannot properly be handled by the\n  // default browser undo, so we have to use a different change type to\n  // force using our internal undo method instead of falling through to the\n  // native browser undo.\n  var changeType = preserveEntity ? 'spellcheck-change' : 'apply-entity';\n\n  var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);\n\n  var anchorOffset, focusOffset, startOffset, endOffset;\n\n  if (isGecko) {\n    // Firefox selection does not change while the context menu is open, so\n    // we preserve the anchor and focus values of the DOM selection.\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    startOffset = start + Math.min(anchorOffset, focusOffset);\n    endOffset = startOffset + Math.abs(anchorOffset - focusOffset);\n    anchorOffset = startOffset;\n    focusOffset = endOffset;\n  } else {\n    // Browsers other than Firefox may adjust DOM selection while the context\n    // menu is open, and Safari autocorrect is prone to providing an inaccurate\n    // DOM selection. Don't trust it. Instead, use our existing SelectionState\n    // and adjust it based on the number of characters changed during the\n    // mutation.\n    var charDelta = domText.length - modelText.length;\n    startOffset = selection.getStartOffset();\n    endOffset = selection.getEndOffset();\n\n    anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;\n    focusOffset = endOffset + charDelta;\n  }\n\n  // Segmented entities are completely or partially removed when their\n  // text content changes. For this case we do not want any text to be selected\n  // after the change, so we are not merging the selection.\n  var contentWithAdjustedDOMSelection = newContent.merge({\n    selectionBefore: content.getSelectionAfter(),\n    selectionAfter: selection.merge({ anchorOffset: anchorOffset, focusOffset: focusOffset })\n  });\n\n  editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));\n}\n\nmodule.exports = editOnInput;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DraftFeatureFlags","DraftModifier","DraftOffsetKey","EditorState","UserAgent","findAncestorOffsetKey","nullthrows","isGecko","isEngine","DOUBLE_NEWLINE","editOnInput","editor","_pendingStateFromBeforeInput","undefined","update","domSelection","getSelection","anchorNode","isCollapsed","isNotTextNode","nodeType","Node","TEXT_NODE","isNotTextOrElementNode","ELEMENT_NODE","draft_killswitch_allow_nontextnodes","previousSibling","nextSibling","span","parentNode","nodeValue","textContent","child","firstChild","removeChild","domText","editorState","_latestEditorState","offsetKey","_DraftOffsetKey$decod","decode","blockKey","decoratorKey","leafKey","_editorState$getBlock","getBlockTree","getIn","start","end","content","getCurrentContent","block","getBlockForKey","modelText","getText","slice","endsWith","selection","targetRange","merge","anchorOffset","focusOffset","isBackward","entityKey","getEntityAt","entity","getEntity","entityType","getMutability","preserveEntity","changeType","newContent","replaceText","getInlineStyleAt","startOffset","endOffset","Math","min","abs","charDelta","length","getStartOffset","getEndOffset","contentWithAdjustedDOMSelection","selectionBefore","getSelectionAfter","selectionAfter","push"]
}
