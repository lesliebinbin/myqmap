{
"version":3,
"file":"module$node_modules$rc_editor_core$lib$EditorCore$customHTML2Content.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/rc-editor-core/lib/EditorCore/customHTML2Content.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rc_editor_core$lib$EditorCore$customHTML2Content\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nexports.__esModule = true;\nexports['default'] = customHTML2Content;\n\nvar _draftJs = require('draft-js');\n\nvar _toArray = require('lodash/toArray');\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nvar _immutable = require('immutable');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction compose() {\n    for (var _len = arguments.length, argument = Array(_len), _key = 0; _key < _len; _key++) {\n        argument[_key] = arguments[_key];\n    }\n\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) {\n            result = args[i].call(this, result);\n        }return result;\n    };\n}\n;\n/*\n * Helpers\n */\n// Prepares img meta data object based on img attributes\nvar getBlockSpecForElement = function getBlockSpecForElement(imgElement) {\n    return {\n        contentType: 'image',\n        src: imgElement.getAttribute('src'),\n        width: imgElement.getAttribute('width'),\n        height: imgElement.getAttribute('height'),\n        align: imgElement.style.cssFloat\n    };\n};\n// Wraps meta data in HTML element which is 'understandable' by Draft, I used <blockquote />.\nvar wrapBlockSpec = function wrapBlockSpec(blockSpec) {\n    if (blockSpec == null) {\n        return null;\n    }\n    var tempEl = document.createElement('blockquote');\n    // stringify meta data and insert it as text content of temp HTML element. We will later extract\n    // and parse it.\n    tempEl.innerText = JSON.stringify(blockSpec);\n    return tempEl;\n};\n// Replaces <img> element with our temp element\nvar replaceElement = function replaceElement(oldEl, newEl) {\n    if (!(newEl instanceof HTMLElement)) {\n        return;\n    }\n    var parentNode = oldEl.parentNode;\n    return parentNode.replaceChild(newEl, oldEl);\n};\nvar elementToBlockSpecElement = compose(wrapBlockSpec, getBlockSpecForElement);\nvar imgReplacer = function imgReplacer(imgElement) {\n    return replaceElement(imgElement, elementToBlockSpecElement(imgElement));\n};\n// creates ContentBlock based on provided spec\nvar createContentBlock = function createContentBlock(blockData, contentState) {\n    var key = blockData.key,\n        type = blockData.type,\n        text = blockData.text,\n        data = blockData.data,\n        inlineStyles = blockData.inlineStyles,\n        entityData = blockData.entityData;\n\n    var blockSpec = {\n        type: type != null ? type : 'unstyled',\n        text: text != null ? text : '',\n        key: key != null ? key : (0, _draftJs.genKey)(),\n        data: null,\n        characterList: (0, _immutable.List)([])\n    };\n    if (data) {\n        blockSpec.data = (0, _immutable.fromJS)(data);\n    }\n    if (inlineStyles || entityData) {\n        var entityKey = void 0;\n        if (entityData) {\n            var _type = entityData.type,\n                mutability = entityData.mutability,\n                _data = entityData.data;\n\n            contentState.createEntity(_type, mutability, _data);\n            entityKey = contentState.getLastCreatedEntityKey();\n        } else {\n            entityKey = null;\n        }\n        var style = (0, _immutable.OrderedSet)(inlineStyles || []);\n        var charData = _draftJs.CharacterMetadata.create({ style: style, entityKey: entityKey });\n        blockSpec.characterList = (0, _immutable.List)((0, _immutable.Repeat)(charData, text.length));\n    }\n    return new _draftJs.ContentBlock(blockSpec);\n};\n// takes HTML string and returns DraftJS ContentState\nfunction customHTML2Content(HTML, contentState) {\n    var tempDoc = new DOMParser().parseFromString(HTML, 'text/html');\n    // replace all <img /> with <blockquote /> elements\n    (0, _toArray2['default'])(tempDoc.querySelectorAll('img')).forEach(imgReplacer);\n    // use DraftJS converter to do initial conversion. I don't provide DOMBuilder and\n    // blockRenderMap arguments here since it should fall back to its default ones, which are fine\n\n    var _convertFromHTML = (0, _draftJs.convertFromHTML)(tempDoc.body.innerHTML),\n        contentBlocks = _convertFromHTML.contentBlocks;\n    // now replace <blockquote /> ContentBlocks with 'atomic' ones\n\n\n    contentBlocks = contentBlocks.reduce(function (contentBlocks, block) {\n        if (block.getType() !== 'blockquote') {\n            return contentBlocks.concat(block);\n        }\n        var image = JSON.parse(block.getText());\n        contentState.createEntity('IMAGE-ENTITY', 'IMMUTABLE', image);\n        var entityKey = contentState.getLastCreatedEntityKey();\n        var charData = _draftJs.CharacterMetadata.create({ entity: entityKey });\n        // const blockSpec = Object.assign({ type: 'atomic', text: ' ' }, { entityData })\n        // const atomicBlock = createContentBlock(blockSpec)\n        // const spacerBlock = createContentBlock({});\n        var fragmentArray = [new _draftJs.ContentBlock({\n            key: (0, _draftJs.genKey)(),\n            type: 'image-block',\n            text: ' ',\n            characterList: (0, _immutable.List)((0, _immutable.Repeat)(charData, charData.count()))\n        }), new _draftJs.ContentBlock({\n            key: (0, _draftJs.genKey)(),\n            type: 'unstyled',\n            text: '',\n            characterList: (0, _immutable.List)()\n        })];\n        return contentBlocks.concat(fragmentArray);\n    }, []);\n    // console.log('>> customHTML2Content contentBlocks', contentBlocks);\n    tempDoc = null;\n    return _draftJs.BlockMapBuilder.createFromArray(contentBlocks);\n}\nmodule.exports = exports['default'];\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","__esModule","customHTML2Content","_draftJs","_toArray","_toArray2","_interopRequireDefault","_immutable","obj","compose","_len","arguments","length","argument","Array","_key","args","start","i","result","apply","call","getBlockSpecForElement","imgElement","contentType","src","getAttribute","width","height","align","style","cssFloat","wrapBlockSpec","blockSpec","tempEl","document","createElement","innerText","JSON","stringify","replaceElement","oldEl","newEl","HTMLElement","parentNode","replaceChild","elementToBlockSpecElement","imgReplacer","createContentBlock","blockData","contentState","key","type","text","data","inlineStyles","entityData","genKey","characterList","List","fromJS","entityKey","_type","mutability","_data","createEntity","getLastCreatedEntityKey","OrderedSet","charData","CharacterMetadata","create","Repeat","ContentBlock","HTML","tempDoc","parseFromString","DOMParser","querySelectorAll","forEach","_convertFromHTML","convertFromHTML","body","innerHTML","contentBlocks","reduce","block","getType","concat","image","parse","getText","entity","fragmentArray","count","BlockMapBuilder","createFromArray"]
}
