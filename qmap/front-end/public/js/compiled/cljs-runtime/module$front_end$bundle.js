shadow$provide["module$front_end$bundle"]=function(global,process,require,module,exports,shadow$shims){(function(e,a){for(var i in a)e[i]=a[i]})(exports,function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=
modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name))Object.defineProperty(exports,name,{enumerable:true,get:getter})};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag)Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);
if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};
__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s="./src/jsx/index.jsx")}({"./node_modules/css-loader/dist/cjs.js!./src/jsx/mymap.css":function(module,exports,__webpack_require__){eval('exports \x3d module.exports \x3d __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);\n// Module\nexports.push([module.i, "", ""]);\n\n\n\n//# sourceURL\x3dwebpack:///./src/jsx/mymap.css?./node_modules/css-loader/dist/cjs.js')},
"./node_modules/css-loader/dist/runtime/api.js":function(module,exports,__webpack_require__){eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports \x3d function (useSourceMap) {\n  var list \x3d []; // return the list of modules as css string\n\n  list.toString \x3d function toString() {\n    return this.map(function (item) {\n      var content \x3d cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  }; // import a list of modules into the list\n\n\n  list.i \x3d function (modules, mediaQuery) {\n    if (typeof modules \x3d\x3d\x3d 'string') {\n      modules \x3d [[null, modules, '']];\n    }\n\n    var alreadyImportedModules \x3d {};\n\n    for (var i \x3d 0; i \x3c this.length; i++) {\n      var id \x3d this[i][0];\n\n      if (id !\x3d null) {\n        alreadyImportedModules[id] \x3d true;\n      }\n    }\n\n    for (i \x3d 0; i \x3c modules.length; i++) {\n      var item \x3d modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] \x3d\x3d null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery \x26\x26 !item[2]) {\n          item[2] \x3d mediaQuery;\n        } else if (mediaQuery) {\n          item[2] \x3d '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content \x3d item[1] || '';\n  var cssMapping \x3d item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap \x26\x26 typeof btoa \x3d\x3d\x3d 'function') {\n    var sourceMapping \x3d toComment(cssMapping);\n    var sourceURLs \x3d cssMapping.sources.map(function (source) {\n      return '/*# sourceURL\x3d' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 \x3d btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data \x3d 'sourceMappingURL\x3ddata:application/json;charset\x3dutf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}\n\n//# sourceURL\x3dwebpack:///./node_modules/css-loader/dist/runtime/api.js?")},
"./node_modules/fbjs/lib/emptyFunction.js":function(module,exports,__webpack_require__){eval("\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction \x3d function emptyFunction() {};\n\nemptyFunction.thatReturns \x3d makeEmptyFunction;\nemptyFunction.thatReturnsFalse \x3d makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue \x3d makeEmptyFunction(true);\nemptyFunction.thatReturnsNull \x3d makeEmptyFunction(null);\nemptyFunction.thatReturnsThis \x3d function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument \x3d function (arg) {\n  return arg;\n};\n\nmodule.exports \x3d emptyFunction;\n\n//# sourceURL\x3dwebpack:///./node_modules/fbjs/lib/emptyFunction.js?")},
"./node_modules/fbjs/lib/emptyObject.js":function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\nvar emptyObject \x3d {};\n\nif (true) {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports \x3d emptyObject;\n\n//# sourceURL\x3dwebpack:///./node_modules/fbjs/lib/emptyObject.js?")},"./node_modules/fbjs/lib/invariant.js":function(module,
exports,__webpack_require__){eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat \x3d function validateFormat(format) {};\n\nif (true) {\n  validateFormat \x3d function validateFormat(format) {\n    if (format \x3d\x3d\x3d undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format \x3d\x3d\x3d undefined) {\n      error \x3d new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args \x3d [a, b, c, d, e, f];\n      var argIndex \x3d 0;\n      error \x3d new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name \x3d 'Invariant Violation';\n    }\n\n    error.framesToPop \x3d 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports \x3d invariant;\n\n//# sourceURL\x3dwebpack:///./node_modules/fbjs/lib/invariant.js?")},
"./node_modules/fbjs/lib/warning.js":function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\nvar emptyFunction \x3d __webpack_require__(/*! ./emptyFunction */ \"./node_modules/fbjs/lib/emptyFunction.js\");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning \x3d emptyFunction;\n\nif (true) {\n  var printWarning \x3d function printWarning(format) {\n    for (var _len \x3d arguments.length, args \x3d Array(_len \x3e 1 ? _len - 1 : 0), _key \x3d 1; _key \x3c _len; _key++) {\n      args[_key - 1] \x3d arguments[_key];\n    }\n\n    var argIndex \x3d 0;\n    var message \x3d 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !\x3d\x3d 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning \x3d function warning(condition, format) {\n    if (format \x3d\x3d\x3d undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') \x3d\x3d\x3d 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      for (var _len2 \x3d arguments.length, args \x3d Array(_len2 \x3e 2 ? _len2 - 2 : 0), _key2 \x3d 2; _key2 \x3c _len2; _key2++) {\n        args[_key2 - 2] \x3d arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports \x3d warning;\n\n//# sourceURL\x3dwebpack:///./node_modules/fbjs/lib/warning.js?")},
"./node_modules/object-assign/index.js":function(module,exports,__webpack_require__){eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols \x3d Object.getOwnPropertySymbols;\nvar hasOwnProperty \x3d Object.prototype.hasOwnProperty;\nvar propIsEnumerable \x3d Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val \x3d\x3d\x3d null || val \x3d\x3d\x3d undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id\x3d4118\n\t\tvar test1 \x3d new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] \x3d 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] \x3d\x3d\x3d '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id\x3d3056\n\t\tvar test2 \x3d {};\n\t\tfor (var i \x3d 0; i \x3c 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] \x3d i;\n\t\t}\n\t\tvar order2 \x3d Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !\x3d\x3d '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id\x3d3056\n\t\tvar test3 \x3d {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] \x3d letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !\x3d\x3d\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports \x3d shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to \x3d toObject(target);\n\tvar symbols;\n\n\tfor (var s \x3d 1; s \x3c arguments.length; s++) {\n\t\tfrom \x3d Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] \x3d from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols \x3d getOwnPropertySymbols(from);\n\t\t\tfor (var i \x3d 0; i \x3c symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] \x3d from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n//# sourceURL\x3dwebpack:///./node_modules/object-assign/index.js?")},
"./node_modules/prop-types/checkPropTypes.js":function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar printWarning \x3d function() {};\n\nif (true) {\n  var ReactPropTypesSecret \x3d __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n  var loggedTypeFailures \x3d {};\n  var has \x3d Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning \x3d function(text) {\n    var message \x3d 'Warning: ' + text;\n    if (typeof console !\x3d\x3d 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !\x3d\x3d 'function') {\n            var err \x3d Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name \x3d 'Invariant Violation';\n            throw err;\n          }\n          error \x3d typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error \x3d ex;\n        }\n        if (error \x26\x26 !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error \x26\x26 !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] \x3d true;\n\n          var stack \x3d getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack !\x3d null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache \x3d function() {\n  if (true) {\n    loggedTypeFailures \x3d {};\n  }\n}\n\nmodule.exports \x3d checkPropTypes;\n\n\n//# sourceURL\x3dwebpack:///./node_modules/prop-types/checkPropTypes.js?")},
"./node_modules/prop-types/lib/ReactPropTypesSecret.js":function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret \x3d 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports \x3d ReactPropTypesSecret;\n\n\n//# sourceURL\x3dwebpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js?")},
"./node_modules/react/cjs/react.development.js":function(module,exports,__webpack_require__){eval("/** @license React v16.4.2\n * react.development.js\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar _assign \x3d __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\nvar invariant \x3d __webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\");\nvar emptyObject \x3d __webpack_require__(/*! fbjs/lib/emptyObject */ \"./node_modules/fbjs/lib/emptyObject.js\");\nvar warning \x3d __webpack_require__(/*! fbjs/lib/warning */ \"./node_modules/fbjs/lib/warning.js\");\nvar emptyFunction \x3d __webpack_require__(/*! fbjs/lib/emptyFunction */ \"./node_modules/fbjs/lib/emptyFunction.js\");\nvar checkPropTypes \x3d __webpack_require__(/*! prop-types/checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n\n// TODO: this is special because it gets imported during build.\n\nvar ReactVersion \x3d '16.4.2';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol \x3d typeof Symbol \x3d\x3d\x3d 'function' \x26\x26 Symbol.for;\n\nvar REACT_ELEMENT_TYPE \x3d hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE \x3d hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE \x3d hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE \x3d hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE \x3d hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE \x3d hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE \x3d hasSymbol ? Symbol.for('react.context') : 0xeace;\nvar REACT_ASYNC_MODE_TYPE \x3d hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE \x3d hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_TIMEOUT_TYPE \x3d hasSymbol ? Symbol.for('react.timeout') : 0xead1;\n\nvar MAYBE_ITERATOR_SYMBOL \x3d typeof Symbol \x3d\x3d\x3d 'function' \x26\x26 Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL \x3d '@@iterator';\n\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable \x3d\x3d\x3d null || typeof maybeIterable \x3d\x3d\x3d 'undefined') {\n    return null;\n  }\n  var maybeIterator \x3d MAYBE_ITERATOR_SYMBOL \x26\x26 maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator \x3d\x3d\x3d 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n\n// Relying on the `invariant()` implementation lets us\n// have preserve the format and params in the www builds.\n\n// Exports ReactDOM.createRoot\n\n\n// Experimental error-boundary API that can recover from errors within a single\n// render phase\n\n// Suspense\nvar enableSuspense \x3d false;\n// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\n\n\n// In some cases, StrictMode should also double-render lifecycles.\n// This can be confusing for tests though,\n// And it can be bad for performance in production.\n// This feature flag can be used to control the behavior:\n\n\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\n\n\n// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n\n\n// Warn about legacy context API\n\n\n// Gather advanced timing metrics for Profiler subtrees.\n\n\n// Only used in www builds.\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar lowPriorityWarning \x3d function () {};\n\n{\n  var printWarning \x3d function (format) {\n    for (var _len \x3d arguments.length, args \x3d Array(_len \x3e 1 ? _len - 1 : 0), _key \x3d 1; _key \x3c _len; _key++) {\n      args[_key - 1] \x3d arguments[_key];\n    }\n\n    var argIndex \x3d 0;\n    var message \x3d 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !\x3d\x3d 'undefined') {\n      console.warn(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning \x3d function (condition, format) {\n    if (format \x3d\x3d\x3d undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (!condition) {\n      for (var _len2 \x3d arguments.length, args \x3d Array(_len2 \x3e 2 ? _len2 - 2 : 0), _key2 \x3d 2; _key2 \x3c _len2; _key2++) {\n        args[_key2 - 2] \x3d arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarning$1 \x3d lowPriorityWarning;\n\nvar didWarnStateUpdateForUnmountedComponent \x3d {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor \x3d publicInstance.constructor;\n    var componentName \x3d _constructor \x26\x26 (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey \x3d componentName + '.' + callerName;\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n    warning(false, \"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state \x3d {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n    didWarnStateUpdateForUnmountedComponent[warningKey] \x3d true;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue \x3d {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props \x3d props;\n  this.context \x3d context;\n  this.refs \x3d emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater \x3d updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent \x3d {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState \x3d function (partialState, callback) {\n  !(typeof partialState \x3d\x3d\x3d 'object' || typeof partialState \x3d\x3d\x3d 'function' || partialState \x3d\x3d null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate \x3d function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n{\n  var deprecatedAPIs \x3d {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n  var defineDeprecationWarning \x3d function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype \x3d Component.prototype;\n\n/**\n * Convenience component with default shallow equality check for sCU.\n */\nfunction PureComponent(props, context, updater) {\n  this.props \x3d props;\n  this.context \x3d context;\n  this.refs \x3d emptyObject;\n  this.updater \x3d updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype \x3d PureComponent.prototype \x3d new ComponentDummy();\npureComponentPrototype.constructor \x3d PureComponent;\n// Avoid an extra prototype jump for these methods.\n_assign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent \x3d true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject \x3d {\n    current: null\n  };\n  {\n    Object.seal(refObject);\n  }\n  return refObject;\n}\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner \x3d {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar hasOwnProperty \x3d Object.prototype.hasOwnProperty;\n\nvar RESERVED_PROPS \x3d {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\nvar specialPropKeyWarningShown \x3d void 0;\nvar specialPropRefWarningShown \x3d void 0;\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter \x3d Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter \x26\x26 getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !\x3d\x3d undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter \x3d Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter \x26\x26 getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !\x3d\x3d undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey \x3d function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown \x3d true;\n      warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n  warnAboutAccessingKey.isReactWarning \x3d true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef \x3d function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown \x3d true;\n      warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n  warnAboutAccessingRef.isReactWarning \x3d true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, no instanceof check\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} key\n * @param {string|object} ref\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @param {*} owner\n * @param {*} props\n * @internal\n */\nvar ReactElement \x3d function (type, key, ref, self, source, owner, props) {\n  var element \x3d {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store \x3d {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    });\n    // self and source are DEV only properties.\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    });\n    // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\nfunction createElement(type, config, children) {\n  var propName \x3d void 0;\n\n  // Reserved names are extracted\n  var props \x3d {};\n\n  var key \x3d null;\n  var ref \x3d null;\n  var self \x3d null;\n  var source \x3d null;\n\n  if (config !\x3d null) {\n    if (hasValidRef(config)) {\n      ref \x3d config.ref;\n    }\n    if (hasValidKey(config)) {\n      key \x3d '' + config.key;\n    }\n\n    self \x3d config.__self \x3d\x3d\x3d undefined ? null : config.__self;\n    source \x3d config.__source \x3d\x3d\x3d undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) \x26\x26 !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] \x3d config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength \x3d arguments.length - 2;\n  if (childrenLength \x3d\x3d\x3d 1) {\n    props.children \x3d children;\n  } else if (childrenLength \x3e 1) {\n    var childArray \x3d Array(childrenLength);\n    for (var i \x3d 0; i \x3c childrenLength; i++) {\n      childArray[i] \x3d arguments[i + 2];\n    }\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children \x3d childArray;\n  }\n\n  // Resolve default props\n  if (type \x26\x26 type.defaultProps) {\n    var defaultProps \x3d type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] \x3d\x3d\x3d undefined) {\n        props[propName] \x3d defaultProps[propName];\n      }\n    }\n  }\n  {\n    if (key || ref) {\n      if (typeof props.$$typeof \x3d\x3d\x3d 'undefined' || props.$$typeof !\x3d\x3d REACT_ELEMENT_TYPE) {\n        var displayName \x3d typeof type \x3d\x3d\x3d 'function' ? type.displayName || type.name || 'Unknown' : type;\n        if (key) {\n          defineKeyPropWarningGetter(props, displayName);\n        }\n        if (ref) {\n          defineRefPropWarningGetter(props, displayName);\n        }\n      }\n    }\n  }\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\n\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement \x3d ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\n  return newElement;\n}\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\nfunction cloneElement(element, config, children) {\n  !!(element \x3d\x3d\x3d null || element \x3d\x3d\x3d undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;\n\n  var propName \x3d void 0;\n\n  // Original props are copied\n  var props \x3d _assign({}, element.props);\n\n  // Reserved names are extracted\n  var key \x3d element.key;\n  var ref \x3d element.ref;\n  // Self is preserved since the owner is preserved.\n  var self \x3d element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  var source \x3d element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner \x3d element._owner;\n\n  if (config !\x3d null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref \x3d config.ref;\n      owner \x3d ReactCurrentOwner.current;\n    }\n    if (hasValidKey(config)) {\n      key \x3d '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    var defaultProps \x3d void 0;\n    if (element.type \x26\x26 element.type.defaultProps) {\n      defaultProps \x3d element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) \x26\x26 !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] \x3d\x3d\x3d undefined \x26\x26 defaultProps !\x3d\x3d undefined) {\n          // Resolve default props\n          props[propName] \x3d defaultProps[propName];\n        } else {\n          props[propName] \x3d config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength \x3d arguments.length - 2;\n  if (childrenLength \x3d\x3d\x3d 1) {\n    props.children \x3d children;\n  } else if (childrenLength \x3e 1) {\n    var childArray \x3d Array(childrenLength);\n    for (var i \x3d 0; i \x3c childrenLength; i++) {\n      childArray[i] \x3d arguments[i + 2];\n    }\n    props.children \x3d childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nfunction isValidElement(object) {\n  return typeof object \x3d\x3d\x3d 'object' \x26\x26 object !\x3d\x3d null \x26\x26 object.$$typeof \x3d\x3d\x3d REACT_ELEMENT_TYPE;\n}\n\nvar ReactDebugCurrentFrame \x3d {};\n\n{\n  // Component that is being worked on\n  ReactDebugCurrentFrame.getCurrentStack \x3d null;\n\n  ReactDebugCurrentFrame.getStackAddendum \x3d function () {\n    var impl \x3d ReactDebugCurrentFrame.getCurrentStack;\n    if (impl) {\n      return impl();\n    }\n    return null;\n  };\n}\n\nvar SEPARATOR \x3d '.';\nvar SUBSEPARATOR \x3d ':';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\nfunction escape(key) {\n  var escapeRegex \x3d /[\x3d:]/g;\n  var escaperLookup \x3d {\n    '\x3d': '\x3d0',\n    ':': '\x3d2'\n  };\n  var escapedString \x3d ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar didWarnAboutMaps \x3d false;\n\nvar userProvidedKeyEscapeRegex \x3d /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$\x26/');\n}\n\nvar POOL_SIZE \x3d 10;\nvar traverseContextPool \x3d [];\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext \x3d traverseContextPool.pop();\n    traverseContext.result \x3d mapResult;\n    traverseContext.keyPrefix \x3d keyPrefix;\n    traverseContext.func \x3d mapFunction;\n    traverseContext.context \x3d mapContext;\n    traverseContext.count \x3d 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result \x3d null;\n  traverseContext.keyPrefix \x3d null;\n  traverseContext.func \x3d null;\n  traverseContext.context \x3d null;\n  traverseContext.count \x3d 0;\n  if (traverseContextPool.length \x3c POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type \x3d typeof children;\n\n  if (type \x3d\x3d\x3d 'undefined' || type \x3d\x3d\x3d 'boolean') {\n    // All of the above are perceived as null.\n    children \x3d null;\n  }\n\n  var invokeCallback \x3d false;\n\n  if (children \x3d\x3d\x3d null) {\n    invokeCallback \x3d true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback \x3d true;\n        break;\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback \x3d true;\n        }\n    }\n  }\n\n  if (invokeCallback) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar \x3d\x3d\x3d '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child \x3d void 0;\n  var nextName \x3d void 0;\n  var subtreeCount \x3d 0; // Count of children found in the current subtree.\n  var nextNamePrefix \x3d nameSoFar \x3d\x3d\x3d '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i \x3d 0; i \x3c children.length; i++) {\n      child \x3d children[i];\n      nextName \x3d nextNamePrefix + getComponentKey(child, i);\n      subtreeCount +\x3d traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn \x3d getIteratorFn(children);\n    if (typeof iteratorFn \x3d\x3d\x3d 'function') {\n      {\n        // Warn about using Maps as children\n        if (iteratorFn \x3d\x3d\x3d children.entries) {\n          !didWarnAboutMaps ? warning(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum()) : void 0;\n          didWarnAboutMaps \x3d true;\n        }\n      }\n\n      var iterator \x3d iteratorFn.call(children);\n      var step \x3d void 0;\n      var ii \x3d 0;\n      while (!(step \x3d iterator.next()).done) {\n        child \x3d step.value;\n        nextName \x3d nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount +\x3d traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type \x3d\x3d\x3d 'object') {\n      var addendum \x3d '';\n      {\n        addendum \x3d ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n      }\n      var childrenString \x3d '' + children;\n      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString \x3d\x3d\x3d '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children \x3d\x3d null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof component \x3d\x3d\x3d 'object' \x26\x26 component !\x3d\x3d null \x26\x26 component.key !\x3d null) {\n    // Explicit key\n    return escape(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func \x3d bookKeeping.func,\n      context \x3d bookKeeping.context;\n\n  func.call(context, child, bookKeeping.count++);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children \x3d\x3d null) {\n    return children;\n  }\n  var traverseContext \x3d getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result \x3d bookKeeping.result,\n      keyPrefix \x3d bookKeeping.keyPrefix,\n      func \x3d bookKeeping.func,\n      context \x3d bookKeeping.context;\n\n\n  var mappedChild \x3d func.call(context, child, bookKeeping.count++);\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);\n  } else if (mappedChild !\x3d null) {\n    if (isValidElement(mappedChild)) {\n      mappedChild \x3d cloneAndReplaceKey(mappedChild,\n      // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key \x26\x26 (!child || child.key !\x3d\x3d mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix \x3d '';\n  if (prefix !\x3d null) {\n    escapedPrefix \x3d escapeUserProvidedKey(prefix) + '/';\n  }\n  var traverseContext \x3d getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children \x3d\x3d null) {\n    return children;\n  }\n  var result \x3d [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children) {\n  return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\nfunction toArray(children) {\n  var result \x3d [];\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);\n  return result;\n}\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits \x3d\x3d\x3d undefined) {\n    calculateChangedBits \x3d null;\n  } else {\n    {\n      !(calculateChangedBits \x3d\x3d\x3d null || typeof calculateChangedBits \x3d\x3d\x3d 'function') ? warning(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;\n    }\n  }\n\n  var context \x3d {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    _defaultValue: defaultValue,\n    _currentValue: defaultValue,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue2: defaultValue,\n    _changedBits: 0,\n    _changedBits2: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n\n  context.Provider \x3d {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  context.Consumer \x3d context;\n\n  {\n    context._currentRenderer \x3d null;\n    context._currentRenderer2 \x3d null;\n  }\n\n  return context;\n}\n\nfunction forwardRef(render) {\n  {\n    !(typeof render \x3d\x3d\x3d 'function') ? warning(false, 'forwardRef requires a render function but was given %s.', render \x3d\x3d\x3d null ? 'null' : typeof render) : void 0;\n\n    if (render !\x3d null) {\n      !(render.defaultProps \x3d\x3d null \x26\x26 render.propTypes \x3d\x3d null) ? warning(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;\n    }\n  }\n\n  return {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n}\n\nvar describeComponentFrame \x3d function (name, source, ownerName) {\n  return '\\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n};\n\nfunction isValidElementType(type) {\n  return typeof type \x3d\x3d\x3d 'string' || typeof type \x3d\x3d\x3d 'function' ||\n  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type \x3d\x3d\x3d REACT_FRAGMENT_TYPE || type \x3d\x3d\x3d REACT_ASYNC_MODE_TYPE || type \x3d\x3d\x3d REACT_PROFILER_TYPE || type \x3d\x3d\x3d REACT_STRICT_MODE_TYPE || type \x3d\x3d\x3d REACT_TIMEOUT_TYPE || typeof type \x3d\x3d\x3d 'object' \x26\x26 type !\x3d\x3d null \x26\x26 (type.$$typeof \x3d\x3d\x3d REACT_PROVIDER_TYPE || type.$$typeof \x3d\x3d\x3d REACT_CONTEXT_TYPE || type.$$typeof \x3d\x3d\x3d REACT_FORWARD_REF_TYPE);\n}\n\nfunction getComponentName(fiber) {\n  var type \x3d fiber.type;\n\n  if (typeof type \x3d\x3d\x3d 'function') {\n    return type.displayName || type.name;\n  }\n  if (typeof type \x3d\x3d\x3d 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_ASYNC_MODE_TYPE:\n      return 'AsyncMode';\n    case REACT_CONTEXT_TYPE:\n      return 'Context.Consumer';\n    case REACT_FRAGMENT_TYPE:\n      return 'ReactFragment';\n    case REACT_PORTAL_TYPE:\n      return 'ReactPortal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler(' + fiber.pendingProps.id + ')';\n    case REACT_PROVIDER_TYPE:\n      return 'Context.Provider';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_TIMEOUT_TYPE:\n      return 'Timeout';\n  }\n  if (typeof type \x3d\x3d\x3d 'object' \x26\x26 type !\x3d\x3d null) {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        var functionName \x3d type.render.displayName || type.render.name || '';\n        return functionName !\x3d\x3d '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';\n    }\n  }\n  return null;\n}\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\nvar currentlyValidatingElement \x3d void 0;\nvar propTypesMisspellWarningShown \x3d void 0;\n\nvar getDisplayName \x3d function () {};\nvar getStackAddendum \x3d function () {};\n\n{\n  currentlyValidatingElement \x3d null;\n\n  propTypesMisspellWarningShown \x3d false;\n\n  getDisplayName \x3d function (element) {\n    if (element \x3d\x3d null) {\n      return '#empty';\n    } else if (typeof element \x3d\x3d\x3d 'string' || typeof element \x3d\x3d\x3d 'number') {\n      return '#text';\n    } else if (typeof element.type \x3d\x3d\x3d 'string') {\n      return element.type;\n    }\n\n    var type \x3d element.type;\n    if (type \x3d\x3d\x3d REACT_FRAGMENT_TYPE) {\n      return 'React.Fragment';\n    } else if (typeof type \x3d\x3d\x3d 'object' \x26\x26 type !\x3d\x3d null \x26\x26 type.$$typeof \x3d\x3d\x3d REACT_FORWARD_REF_TYPE) {\n      var functionName \x3d type.render.displayName || type.render.name || '';\n      return functionName !\x3d\x3d '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';\n    } else {\n      return type.displayName || type.name || 'Unknown';\n    }\n  };\n\n  getStackAddendum \x3d function () {\n    var stack \x3d '';\n    if (currentlyValidatingElement) {\n      var name \x3d getDisplayName(currentlyValidatingElement);\n      var owner \x3d currentlyValidatingElement._owner;\n      stack +\x3d describeComponentFrame(name, currentlyValidatingElement._source, owner \x26\x26 getComponentName(owner));\n    }\n    stack +\x3d ReactDebugCurrentFrame.getStackAddendum() || '';\n    return stack;\n  };\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name \x3d getComponentName(ReactCurrentOwner.current);\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(elementProps) {\n  if (elementProps !\x3d\x3d null \x26\x26 elementProps !\x3d\x3d undefined \x26\x26 elementProps.__source !\x3d\x3d undefined) {\n    var source \x3d elementProps.__source;\n    var fileName \x3d source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber \x3d source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning \x3d {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info \x3d getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName \x3d typeof parentType \x3d\x3d\x3d 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      info \x3d '\\n\\nCheck the top-level render call using \x3c' + parentName + '\x3e.';\n    }\n  }\n  return info;\n}\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key !\x3d null) {\n    return;\n  }\n  element._store.validated \x3d true;\n\n  var currentComponentErrorInfo \x3d getCurrentComponentErrorInfo(parentType);\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n  ownerHasKeyUseWarning[currentComponentErrorInfo] \x3d true;\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwner \x3d '';\n  if (element \x26\x26 element._owner \x26\x26 element._owner !\x3d\x3d ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner \x3d ' It was passed a child from ' + getComponentName(element._owner) + '.';\n  }\n\n  currentlyValidatingElement \x3d element;\n  {\n    warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());\n  }\n  currentlyValidatingElement \x3d null;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !\x3d\x3d 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i \x3d 0; i \x3c node.length; i++) {\n      var child \x3d node[i];\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated \x3d true;\n    }\n  } else if (node) {\n    var iteratorFn \x3d getIteratorFn(node);\n    if (typeof iteratorFn \x3d\x3d\x3d 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !\x3d\x3d node.entries) {\n        var iterator \x3d iteratorFn.call(node);\n        var step \x3d void 0;\n        while (!(step \x3d iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var type \x3d element.type;\n  var name \x3d void 0,\n      propTypes \x3d void 0;\n  if (typeof type \x3d\x3d\x3d 'function') {\n    // Class or functional component\n    name \x3d type.displayName || type.name;\n    propTypes \x3d type.propTypes;\n  } else if (typeof type \x3d\x3d\x3d 'object' \x26\x26 type !\x3d\x3d null \x26\x26 type.$$typeof \x3d\x3d\x3d REACT_FORWARD_REF_TYPE) {\n    // ForwardRef\n    var functionName \x3d type.render.displayName || type.render.name || '';\n    name \x3d functionName !\x3d\x3d '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';\n    propTypes \x3d type.propTypes;\n  } else {\n    return;\n  }\n  if (propTypes) {\n    currentlyValidatingElement \x3d element;\n    checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);\n    currentlyValidatingElement \x3d null;\n  } else if (type.PropTypes !\x3d\x3d undefined \x26\x26 !propTypesMisspellWarningShown) {\n    propTypesMisspellWarningShown \x3d true;\n    warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n  }\n  if (typeof type.getDefaultProps \x3d\x3d\x3d 'function') {\n    !type.getDefaultProps.isReactClassApproved ? warning(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\nfunction validateFragmentProps(fragment) {\n  currentlyValidatingElement \x3d fragment;\n\n  var keys \x3d Object.keys(fragment.props);\n  for (var i \x3d 0; i \x3c keys.length; i++) {\n    var key \x3d keys[i];\n    if (key !\x3d\x3d 'children' \x26\x26 key !\x3d\x3d 'key') {\n      warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());\n      break;\n    }\n  }\n\n  if (fragment.ref !\x3d\x3d null) {\n    warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());\n  }\n\n  currentlyValidatingElement \x3d null;\n}\n\nfunction createElementWithValidation(type, props, children) {\n  var validType \x3d isValidElementType(type);\n\n  // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n  if (!validType) {\n    var info \x3d '';\n    if (type \x3d\x3d\x3d undefined || typeof type \x3d\x3d\x3d 'object' \x26\x26 type !\x3d\x3d null \x26\x26 Object.keys(type).length \x3d\x3d\x3d 0) {\n      info +\x3d ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo \x3d getSourceInfoErrorAddendum(props);\n    if (sourceInfo) {\n      info +\x3d sourceInfo;\n    } else {\n      info +\x3d getDeclarationErrorAddendum();\n    }\n\n    info +\x3d getStackAddendum() || '';\n\n    var typeString \x3d void 0;\n    if (type \x3d\x3d\x3d null) {\n      typeString \x3d 'null';\n    } else if (Array.isArray(type)) {\n      typeString \x3d 'array';\n    } else {\n      typeString \x3d typeof type;\n    }\n\n    warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element \x3d createElement.apply(this, arguments);\n\n  // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n  if (element \x3d\x3d null) {\n    return element;\n  }\n\n  // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n  if (validType) {\n    for (var i \x3d 2; i \x3c arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type \x3d\x3d\x3d REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\n\nfunction createFactoryWithValidation(type) {\n  var validatedFactory \x3d createElementWithValidation.bind(null, type);\n  validatedFactory.type \x3d type;\n  // Legacy hook: remove it\n  {\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\n\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement \x3d cloneElement.apply(this, arguments);\n  for (var i \x3d 2; i \x3c arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n  validatePropTypes(newElement);\n  return newElement;\n}\n\nvar React \x3d {\n  Children: {\n    map: mapChildren,\n    forEach: forEachChildren,\n    count: countChildren,\n    toArray: toArray,\n    only: onlyChild\n  },\n\n  createRef: createRef,\n  Component: Component,\n  PureComponent: PureComponent,\n\n  createContext: createContext,\n  forwardRef: forwardRef,\n\n  Fragment: REACT_FRAGMENT_TYPE,\n  StrictMode: REACT_STRICT_MODE_TYPE,\n  unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,\n  unstable_Profiler: REACT_PROFILER_TYPE,\n\n  createElement: createElementWithValidation,\n  cloneElement: cloneElementWithValidation,\n  createFactory: createFactoryWithValidation,\n  isValidElement: isValidElement,\n\n  version: ReactVersion,\n\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    ReactCurrentOwner: ReactCurrentOwner,\n    // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n    assign: _assign\n  }\n};\n\nif (enableSuspense) {\n  React.Timeout \x3d REACT_TIMEOUT_TYPE;\n}\n\n{\n  _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\n\n\nvar React$2 \x3d Object.freeze({\n\tdefault: React\n});\n\nvar React$3 \x3d ( React$2 \x26\x26 React ) || React$2;\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nvar react \x3d React$3.default ? React$3.default : React$3;\n\nmodule.exports \x3d react;\n  })();\n}\n\n\n//# sourceURL\x3dwebpack:///./node_modules/react/cjs/react.development.js?")},
"./node_modules/react/index.js":function(module,exports,__webpack_require__){eval('\n\nif (false) {} else {\n  module.exports \x3d __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");\n}\n\n\n//# sourceURL\x3dwebpack:///./node_modules/react/index.js?')},"./node_modules/style-loader/lib/addStyles.js":function(module,exports,__webpack_require__){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom \x3d {};\n\nvar\tmemoize \x3d function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo \x3d\x3d\x3d "undefined") memo \x3d fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE \x3d memoize(function () {\n\t// Test for IE \x3c\x3d 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window \x26\x26 document \x26\x26 document.all \x26\x26 !window.atob;\n});\n\nvar getTarget \x3d function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement \x3d (function (fn) {\n\tvar memo \x3d {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve "head" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }\n                // }\n                if (typeof target \x3d\x3d\x3d \'function\') {\n                        return target();\n                }\n                if (typeof memo[target] \x3d\x3d\x3d "undefined") {\n\t\t\tvar styleTarget \x3d getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement \x26\x26 styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget \x3d styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget \x3d null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] \x3d styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton \x3d null;\nvar\tsingletonCounter \x3d 0;\nvar\tstylesInsertedAtTop \x3d [];\n\nvar\tfixUrls \x3d __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");\n\nmodule.exports \x3d function(list, options) {\n\tif (typeof DEBUG !\x3d\x3d "undefined" \x26\x26 DEBUG) {\n\t\tif (typeof document !\x3d\x3d "object") throw new Error("The style-loader cannot be used in a non-browser environment");\n\t}\n\n\toptions \x3d options || {};\n\n\toptions.attrs \x3d typeof options.attrs \x3d\x3d\x3d "object" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of \x3cstyle\x3e\n\t// tags it will allow on a page\n\tif (!options.singleton \x26\x26 typeof options.singleton !\x3d\x3d "boolean") options.singleton \x3d isOldIE();\n\n\t// By default, add \x3cstyle\x3e tags to the \x3chead\x3e element\n        if (!options.insertInto) options.insertInto \x3d "head";\n\n\t// By default, add \x3cstyle\x3e tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt \x3d "bottom";\n\n\tvar styles \x3d listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove \x3d [];\n\n\t\tfor (var i \x3d 0; i \x3c styles.length; i++) {\n\t\t\tvar item \x3d styles[i];\n\t\t\tvar domStyle \x3d stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles \x3d listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i \x3d 0; i \x3c mayRemove.length; i++) {\n\t\t\tvar domStyle \x3d mayRemove[i];\n\n\t\t\tif(domStyle.refs \x3d\x3d\x3d 0) {\n\t\t\t\tfor (var j \x3d 0; j \x3c domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i \x3d 0; i \x3c styles.length; i++) {\n\t\tvar item \x3d styles[i];\n\t\tvar domStyle \x3d stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j \x3d 0; j \x3c domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j \x3c item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts \x3d [];\n\n\t\t\tfor(var j \x3d 0; j \x3c item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] \x3d {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles \x3d [];\n\tvar newStyles \x3d {};\n\n\tfor (var i \x3d 0; i \x3c list.length; i++) {\n\t\tvar item \x3d list[i];\n\t\tvar id \x3d options.base ? item[0] + options.base : item[0];\n\t\tvar css \x3d item[1];\n\t\tvar media \x3d item[2];\n\t\tvar sourceMap \x3d item[3];\n\t\tvar part \x3d {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] \x3d {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target \x3d getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error("Couldn\'t find a style target. This probably means that the value for the \'insertInto\' parameter is invalid.");\n\t}\n\n\tvar lastStyleElementInsertedAtTop \x3d stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt \x3d\x3d\x3d "top") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt \x3d\x3d\x3d "bottom") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt \x3d\x3d\x3d "object" \x26\x26 options.insertAt.before) {\n\t\tvar nextSibling \x3d getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error("[Style Loader]\\n\\n Invalid value for parameter \'insertAt\' (\'options.insertAt\') found.\\n Must be \'top\', \'bottom\', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode \x3d\x3d\x3d null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx \x3d stylesInsertedAtTop.indexOf(style);\n\tif(idx \x3e\x3d 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style \x3d document.createElement("style");\n\n\tif(options.attrs.type \x3d\x3d\x3d undefined) {\n\t\toptions.attrs.type \x3d "text/css";\n\t}\n\n\tif(options.attrs.nonce \x3d\x3d\x3d undefined) {\n\t\tvar nonce \x3d getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce \x3d nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link \x3d document.createElement("link");\n\n\tif(options.attrs.type \x3d\x3d\x3d undefined) {\n\t\toptions.attrs.type \x3d "text/css";\n\t}\n\toptions.attrs.rel \x3d "stylesheet";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform \x26\x26 obj.css) {\n\t    result \x3d typeof options.transform \x3d\x3d\x3d \'function\'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css \x3d result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don\'t add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex \x3d singletonCounter++;\n\n\t\tstyle \x3d singleton || (singleton \x3d createStyleElement(options));\n\n\t\tupdate \x3d applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove \x3d applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap \x26\x26\n\t\ttypeof URL \x3d\x3d\x3d "function" \x26\x26\n\t\ttypeof URL.createObjectURL \x3d\x3d\x3d "function" \x26\x26\n\t\ttypeof URL.revokeObjectURL \x3d\x3d\x3d "function" \x26\x26\n\t\ttypeof Blob \x3d\x3d\x3d "function" \x26\x26\n\t\ttypeof btoa \x3d\x3d\x3d "function"\n\t) {\n\t\tstyle \x3d createLinkElement(options);\n\t\tupdate \x3d updateLink.bind(null, style, options);\n\t\tremove \x3d function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle \x3d createStyleElement(options);\n\t\tupdate \x3d applyToTag.bind(null, style);\n\t\tremove \x3d function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css \x3d\x3d\x3d obj.css \x26\x26\n\t\t\t\tnewObj.media \x3d\x3d\x3d obj.media \x26\x26\n\t\t\t\tnewObj.sourceMap \x3d\x3d\x3d obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj \x3d newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText \x3d (function () {\n\tvar textStore \x3d [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] \x3d replacement;\n\n\t\treturn textStore.filter(Boolean).join(\'\\n\');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css \x3d remove ? "" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText \x3d replaceText(index, css);\n\t} else {\n\t\tvar cssNode \x3d document.createTextNode(css);\n\t\tvar childNodes \x3d style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css \x3d obj.css;\n\tvar media \x3d obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute("media", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText \x3d css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css \x3d obj.css;\n\tvar sourceMap \x3d obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn\'t defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls \x3d options.convertToAbsoluteUrls \x3d\x3d\x3d undefined \x26\x26 sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss \x3d fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss +\x3d "\\n/*# sourceMappingURL\x3ddata:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";\n\t}\n\n\tvar blob \x3d new Blob([css], { type: "text/css" });\n\n\tvar oldSrc \x3d link.href;\n\n\tlink.href \x3d URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n//# sourceURL\x3dwebpack:///./node_modules/style-loader/lib/addStyles.js?')},
"./node_modules/style-loader/lib/urls.js":function(module,exports){eval('\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function "fixes" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports \x3d function (css) {\n  // get current location\n  var location \x3d typeof window !\x3d\x3d "undefined" \x26\x26 window.location;\n\n  if (!location) {\n    throw new Error("fixUrls requires window.location");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !\x3d\x3d "string") {\n\t  return css;\n  }\n\n  var baseUrl \x3d location.protocol + "//" + location.host;\n  var currentDir \x3d baseUrl + location.pathname.replace(/\\/[^\\/]*$/, "/");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  \x3d Match on the word "url" with any whitespace after it and then a parens\n\t   (  \x3d Start a capturing group\n\t     (?:  \x3d Start a non-capturing group\n\t         [^)(]  \x3d Match anything that isn\'t a parentheses\n\t         |  \x3d OR\n\t         \\(  \x3d Match a start parentheses\n\t             (?:  \x3d Start another non-capturing groups\n\t                 [^)(]+  \x3d Match anything that isn\'t a parentheses\n\t                 |  \x3d OR\n\t                 \\(  \x3d Match a start parentheses\n\t                     [^)(]*  \x3d Match anything that isn\'t a parentheses\n\t                 \\)  \x3d Match a end parentheses\n\t             )  \x3d End Group\n              *\\) \x3d Match anything and then a close parens\n          )  \x3d Close non-capturing group\n          *  \x3d Match anything\n       )  \x3d Close capturing group\n\t \\)  \x3d Match a close parens\n\n\t /gi  \x3d Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss \x3d css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl \x3d origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^"(.*)"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^\'(.*)\'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf("//") \x3d\x3d\x3d 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl \x3d unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf("/") \x3d\x3d\x3d 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl \x3d baseUrl + unquotedOrigUrl; // already starts with \'/\'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl \x3d currentDir + unquotedOrigUrl.replace(/^\\.\\//, ""); // Strip leading \'./\'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn "url(" + JSON.stringify(newUrl) + ")";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n//# sourceURL\x3dwebpack:///./node_modules/style-loader/lib/urls.js?')},
"./src/jsx/index.jsx":function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fuck", function() { return fuck; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return index; });\n/* harmony import */ var _mymap_css__WEBPACK_IMPORTED_MODULE_0__ \x3d __webpack_require__(/*! ./mymap.css */ "./src/jsx/mymap.css");\n/* harmony import */ var _mymap_css__WEBPACK_IMPORTED_MODULE_0___default \x3d /*#__PURE__*/__webpack_require__.n(_mymap_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ \x3d __webpack_require__(/*! react */ "./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default \x3d /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst fuck \x3d "hello world";\n\nclass index extends react__WEBPACK_IMPORTED_MODULE_1__["Component"] {\n  render() {\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\n      "div",\n      null,\n      react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\n        "p",\n        null,\n        "fuck you..."\n      ),\n      react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\n        "p",\n        null,\n        "fuck you..."\n      ),\n      react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\n        "p",\n        null,\n        "fuck you..."\n      )\n    );\n  }\n}\n\n//# sourceURL\x3dwebpack:///./src/jsx/index.jsx?')},
"./src/jsx/mymap.css":function(module,exports,__webpack_require__){eval('\nvar content \x3d __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./mymap.css */ "./node_modules/css-loader/dist/cjs.js!./src/jsx/mymap.css");\n\nif(typeof content \x3d\x3d\x3d \'string\') content \x3d [[module.i, content, \'\']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options \x3d {"hmr":true}\n\noptions.transform \x3d transform\noptions.insertInto \x3d undefined;\n\nvar update \x3d __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);\n\nif(content.locals) module.exports \x3d content.locals;\n\nif(false) {}\n\n//# sourceURL\x3dwebpack:///./src/jsx/mymap.css?')}}))}
//# sourceMappingURL=module$front_end$bundle.js.map
