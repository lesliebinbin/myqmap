{
"version":3,
"file":"module$node_modules$draft_js$lib$decodeInlineStyleRanges.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,0DAAf,CAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgB1I,IAAIC,SAAWJ,OAAA,CAAQ,8CAAR,CAAf,CACIK,WAAaD,QAAAC,WAEjB,KAAIC,aAAeN,OAAA,CAAQ,2CAAR,CAEnB,KAAIO,OAASD,YAAAC,OAGb,KAAIC,UAAYH,UAAA,EAKhBI,SAASA,wBAAuB,CAACC,IAAD,CAAOC,MAAP,CAAe,CAC7C,IAAIC,OAASC,KAAA,CAAMH,IAAAI,OAAN,CAAAC,KAAA,CAAwBP,SAAxB,CACb,IAAIG,MAAJ,CACEA,MAAAK,QAAA,CAAe,QAAS,CAAYC,KAAZ,CAAmB,CACzC,IAAIC;AAASX,MAAA,CAAOG,IAAP,CAAa,CAAb,CAAgBO,KAAAE,OAAhB,CAAAL,OACb,KAAIM,IAAMF,MAANE,CAAeb,MAAA,CAAOG,IAAP,CAAaO,KAAAE,OAAb,CAA2BF,KAAAH,OAA3B,CAAAA,OACnB,OAAOI,MAAP,CAAgBE,GAAhB,CAAqB,CACnBR,MAAA,CAAOM,MAAP,CAAA,CAAiBN,MAAA,CAAOM,MAAP,CAAAG,IAAA,CAAmBJ,KAAAK,MAAnB,CACjBJ,OAAA,EAFmB,CAHoB,CAA3C,CASF,OAAON,OAZsC,CAe/CX,MAAAC,QAAA,CAAiBO,uBA5CyH;",
"sources":["node_modules/draft-js/lib/decodeInlineStyleRanges.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$decodeInlineStyleRanges\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule decodeInlineStyleRanges\n * @format\n * \n */\n\n'use strict';\n\nvar _require = require('immutable'),\n    OrderedSet = _require.OrderedSet;\n\nvar UnicodeUtils = require('fbjs/lib/UnicodeUtils');\n\nvar substr = UnicodeUtils.substr;\n\n\nvar EMPTY_SET = OrderedSet();\n\n/**\n * Convert to native JavaScript string lengths to determine ranges.\n */\nfunction decodeInlineStyleRanges(text, ranges) {\n  var styles = Array(text.length).fill(EMPTY_SET);\n  if (ranges) {\n    ranges.forEach(function ( /*object*/range) {\n      var cursor = substr(text, 0, range.offset).length;\n      var end = cursor + substr(text, range.offset, range.length).length;\n      while (cursor < end) {\n        styles[cursor] = styles[cursor].add(range.style);\n        cursor++;\n      }\n    });\n  }\n  return styles;\n}\n\nmodule.exports = decodeInlineStyleRanges;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_require","OrderedSet","UnicodeUtils","substr","EMPTY_SET","decodeInlineStyleRanges","text","ranges","styles","Array","length","fill","forEach","range","cursor","offset","end","add","style"]
}
