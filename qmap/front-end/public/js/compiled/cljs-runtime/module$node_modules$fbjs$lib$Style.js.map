{
"version":3,
"file":"module$node_modules$fbjs$lib$Style.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,oCAAf,CAAA,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAYpH,IAAIC,iBAAmBJ,OAAA,CAAQ,+CAAR,CAOvBK,SAASA,kBAAiB,CAACC,OAAD,CAAUC,IAAV,CAAgB,CACxC,IAAIC,SAAWC,KAAAC,IAAA,CAAUJ,OAAV,CAAmBC,IAAnB,CACf,OAAOC,SAAP,GAAoB,MAApB,EAA8BA,QAA9B,GAA2C,QAFH,CAQ1C,IAAIC,MAAQ,CASVC,IAAKN,gBATK,CAmBVO,gBAAiBA,QAASA,gBAAe,CAACC,IAAD,CAAO,CAC9C,GAAI,CAACA,IAAL,CACE,MAAO,KAET,KAAIC,cAAgBD,IAAAC,cACpB,OAAOD,IAAP,EAAeA,IAAf,GAAwBC,aAAAC,KAAxB,CAA4C,CAC1C,GAAIT,iBAAA,CAAkBO,IAAlB;AAAwB,UAAxB,CAAJ,EAA2CP,iBAAA,CAAkBO,IAAlB,CAAwB,WAAxB,CAA3C,EAAmFP,iBAAA,CAAkBO,IAAlB,CAAwB,WAAxB,CAAnF,CACE,MAAOA,KAETA,KAAA,CAAOA,IAAAG,WAJmC,CAM5C,MAAOF,cAAAG,YAAP,EAAoCH,aAAAI,aAXU,CAnBtC,CAmCZhB,OAAAC,QAAA,CAAiBO,KA9DmG;",
"sources":["node_modules/fbjs/lib/Style.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$Style\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar getStyleProperty = require('./getStyleProperty');\n\n/**\n * @param {DOMNode} element [description]\n * @param {string} name Overflow style property name.\n * @return {boolean} True if the supplied ndoe is scrollable.\n */\nfunction _isNodeScrollable(element, name) {\n  var overflow = Style.get(element, name);\n  return overflow === 'auto' || overflow === 'scroll';\n}\n\n/**\n * Utilities for querying and mutating style properties.\n */\nvar Style = {\n  /**\n   * Gets the style property for the supplied node. This will return either the\n   * computed style, if available, or the declared style.\n   *\n   * @param {DOMNode} node\n   * @param {string} name Style property name.\n   * @return {?string} Style property value.\n   */\n  get: getStyleProperty,\n\n  /**\n   * Determines the nearest ancestor of a node that is scrollable.\n   *\n   * NOTE: This can be expensive if used repeatedly or on a node nested deeply.\n   *\n   * @param {?DOMNode} node Node from which to start searching.\n   * @return {?DOMWindow|DOMElement} Scroll parent of the supplied node.\n   */\n  getScrollParent: function getScrollParent(node) {\n    if (!node) {\n      return null;\n    }\n    var ownerDocument = node.ownerDocument;\n    while (node && node !== ownerDocument.body) {\n      if (_isNodeScrollable(node, 'overflow') || _isNodeScrollable(node, 'overflowY') || _isNodeScrollable(node, 'overflowX')) {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return ownerDocument.defaultView || ownerDocument.parentWindow;\n  }\n\n};\n\nmodule.exports = Style;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","getStyleProperty","_isNodeScrollable","element","name","overflow","Style","get","getScrollParent","node","ownerDocument","body","parentNode","defaultView","parentWindow"]
}
