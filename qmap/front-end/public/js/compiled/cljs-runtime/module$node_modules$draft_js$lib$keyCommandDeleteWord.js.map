{
"version":3,
"file":"module$node_modules$draft_js$lib$keyCommandDeleteWord.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,uDAAf,CAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBvI,IAAIC,mBAAqBJ,OAAA,CAAQ,qDAAR,CACzB,KAAIK,YAAcL,OAAA,CAAQ,8CAAR,CAElB,KAAIM,qBAAuBN,OAAA,CAAQ,uDAAR,CAC3B,KAAIO,uBAAyBP,OAAA,CAAQ,yDAAR,CAM7BQ,SAASA,qBAAoB,CAACC,WAAD,CAAc,CACzC,IAAIC;AAAeH,sBAAA,CAAuBE,WAAvB,CAAoC,QAAS,CAACE,aAAD,CAAgB,CAC9E,IAAIC,UAAYD,aAAAE,aAAA,EAChB,KAAIC,OAASF,SAAAG,eAAA,EACb,KAAIC,IAAMJ,SAAAK,YAAA,EACV,KAAIC,QAAUP,aAAAQ,kBAAA,EACd,KAAIC,KAAOF,OAAAG,eAAA,CAAuBL,GAAvB,CAAAM,QAAA,EAAAC,MAAA,CAA4CT,MAA5C,CACX,KAAIU,SAAWpB,kBAAAqB,WAAA,CAA8BL,IAA9B,CAGf,OAAOd,qBAAA,CAAqBK,aAArB,CAAoCa,QAAAE,OAApC,EAAuD,CAAvD,CATuE,CAA7D,CAUhB,SAVgB,CAYnB,IAAIhB,YAAJ,GAAqBD,WAAAU,kBAAA,EAArB,CACE,MAAOV,YAGT,OAAOJ,YAAAsB,KAAA,CAAiBlB,WAAjB;AAA8BC,YAA9B,CAA4C,cAA5C,CAjBkC,CAoB3CT,MAAAC,QAAA,CAAiBM,oBA9CsH;",
"sources":["node_modules/draft-js/lib/keyCommandDeleteWord.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$keyCommandDeleteWord\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandDeleteWord\n * @format\n * \n */\n\n'use strict';\n\nvar DraftRemovableWord = require('./DraftRemovableWord');\nvar EditorState = require('./EditorState');\n\nvar moveSelectionForward = require('./moveSelectionForward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\n/**\n * Delete the word that is right of the cursor, as well as any spaces or\n * punctuation before the word.\n */\nfunction keyCommandDeleteWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(offset);\n    var toRemove = DraftRemovableWord.getForward(text);\n\n    // If there are no words in front of the cursor, remove the newline.\n    return moveSelectionForward(strategyState, toRemove.length || 1);\n  }, 'forward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandDeleteWord;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DraftRemovableWord","EditorState","moveSelectionForward","removeTextWithStrategy","keyCommandDeleteWord","editorState","afterRemoval","strategyState","selection","getSelection","offset","getStartOffset","key","getStartKey","content","getCurrentContent","text","getBlockForKey","getText","slice","toRemove","getForward","length","push"]
}
