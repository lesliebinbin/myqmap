{
"version":3,
"file":"module$node_modules$draft_js$lib$keyCommandUndo.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,iDAAf,CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBjI,IAAIC,YAAcJ,OAAA,CAAQ,8CAAR,CAElBK,SAASA,eAAc,CAACC,CAAD,CAAIC,WAAJ,CAAiBC,QAAjB,CAA2B,CAChD,IAAIC,YAAcL,WAAAM,KAAA,CAAiBH,WAAjB,CAMlB,IAAIA,WAAAI,kBAAA,EAAJ,GAAwC,mBAAxC,CAA6D,CAC3D,IAAIC,wBAA0BH,WAAAI,kBAAA,EAC9BL,SAAA,CAASJ,WAAAU,IAAA,CAAgBL,WAAhB,CAA6B,CAAEG,wBAAyBA,uBAA3B,CAA7B,CAAT,CACA,OAH2D,CAO7DN,CAAAS,eAAA,EACA;GAAI,CAACR,WAAAS,2BAAA,EAAL,CAA+C,CAC7CR,QAAA,CAASC,WAAT,CACA,OAF6C,CAO/CD,QAAA,CAASJ,WAAAU,IAAA,CAAgBP,WAAhB,CAA6B,CAAEK,wBAAyB,IAA3B,CAA7B,CAAT,CAIAK,WAAA,CAAW,QAAS,EAAG,CACrBT,QAAA,CAASC,WAAT,CADqB,CAAvB,CAEG,CAFH,CA1BgD,CA+BlDR,MAAAC,QAAA,CAAiBG,cAjDgH;",
"sources":["node_modules/draft-js/lib/keyCommandUndo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$keyCommandUndo\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandUndo\n * @format\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\n\nfunction keyCommandUndo(e, editorState, updateFn) {\n  var undoneState = EditorState.undo(editorState);\n\n  // If the last change to occur was a spellcheck change, allow the undo\n  // event to fall through to the browser. This allows the browser to record\n  // the unwanted change, which should soon lead it to learn not to suggest\n  // the correction again.\n  if (editorState.getLastChangeType() === 'spellcheck-change') {\n    var nativelyRenderedContent = undoneState.getCurrentContent();\n    updateFn(EditorState.set(undoneState, { nativelyRenderedContent: nativelyRenderedContent }));\n    return;\n  }\n\n  // Otheriwse, manage the undo behavior manually.\n  e.preventDefault();\n  if (!editorState.getNativelyRenderedContent()) {\n    updateFn(undoneState);\n    return;\n  }\n\n  // Trigger a re-render with the current content state to ensure that the\n  // component tree has up-to-date props for comparison.\n  updateFn(EditorState.set(editorState, { nativelyRenderedContent: null }));\n\n  // Wait to ensure that the re-render has occurred before performing\n  // the undo action.\n  setTimeout(function () {\n    updateFn(undoneState);\n  }, 0);\n}\n\nmodule.exports = keyCommandUndo;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","EditorState","keyCommandUndo","e","editorState","updateFn","undoneState","undo","getLastChangeType","nativelyRenderedContent","getCurrentContent","set","preventDefault","getNativelyRenderedContent","setTimeout"]
}
