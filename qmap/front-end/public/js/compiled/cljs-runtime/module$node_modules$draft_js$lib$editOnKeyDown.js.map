{
"version":3,
"file":"module$node_modules$draft_js$lib$editOnKeyDown.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/draft-js/lib/editOnKeyDown.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$editOnKeyDown\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnKeyDown\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar KeyBindingUtil = require('./KeyBindingUtil');\nvar Keys = require('fbjs/lib/Keys');\nvar SecondaryClipboard = require('./SecondaryClipboard');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar isEventHandled = require('./isEventHandled');\nvar keyCommandBackspaceToStartOfLine = require('./keyCommandBackspaceToStartOfLine');\nvar keyCommandBackspaceWord = require('./keyCommandBackspaceWord');\nvar keyCommandDeleteWord = require('./keyCommandDeleteWord');\nvar keyCommandInsertNewline = require('./keyCommandInsertNewline');\nvar keyCommandMoveSelectionToEndOfBlock = require('./keyCommandMoveSelectionToEndOfBlock');\nvar keyCommandMoveSelectionToStartOfBlock = require('./keyCommandMoveSelectionToStartOfBlock');\nvar keyCommandPlainBackspace = require('./keyCommandPlainBackspace');\nvar keyCommandPlainDelete = require('./keyCommandPlainDelete');\nvar keyCommandTransposeCharacters = require('./keyCommandTransposeCharacters');\nvar keyCommandUndo = require('./keyCommandUndo');\n\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\n\nvar isChrome = UserAgent.isBrowser('Chrome');\n\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\nfunction onKeyCommand(command, editorState) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState);\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n    default:\n      return editorState;\n  }\n}\n\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault();\n      // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n      break;\n    case Keys.ESC:\n      e.preventDefault();\n      editor.props.onEscape && editor.props.onEscape(e);\n      return;\n    case Keys.TAB:\n      editor.props.onTab && editor.props.onTab(e);\n      return;\n    case Keys.UP:\n      editor.props.onUpArrow && editor.props.onUpArrow(e);\n      return;\n    case Keys.RIGHT:\n      editor.props.onRightArrow && editor.props.onRightArrow(e);\n      return;\n    case Keys.DOWN:\n      editor.props.onDownArrow && editor.props.onDownArrow(e);\n      return;\n    case Keys.LEFT:\n      editor.props.onLeftArrow && editor.props.onLeftArrow(e);\n      return;\n    case Keys.SPACE:\n      // Handling for OSX where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n        // Insert a nbsp into the editor.\n        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), '\\xA0');\n        editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n        return;\n      }\n  }\n\n  var command = editor.props.keyBindingFn(e);\n\n  // If no command is specified, allow keydown event to continue.\n  if (!command) {\n    return;\n  }\n\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  }\n\n  // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n  e.preventDefault();\n\n  // Allow components higher up the tree to handle the command first.\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState))) {\n    return;\n  }\n\n  var newState = onKeyCommand(command, editorState);\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\n\nmodule.exports = editOnKeyDown;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DraftModifier","EditorState","KeyBindingUtil","Keys","SecondaryClipboard","UserAgent","isEventHandled","keyCommandBackspaceToStartOfLine","keyCommandBackspaceWord","keyCommandDeleteWord","keyCommandInsertNewline","keyCommandMoveSelectionToEndOfBlock","keyCommandMoveSelectionToStartOfBlock","keyCommandPlainBackspace","keyCommandPlainDelete","keyCommandTransposeCharacters","keyCommandUndo","isOptionKeyCommand","isChrome","isBrowser","onKeyCommand","command","editorState","redo","cut","paste","editOnKeyDown","editor","e","keyCode","which","_latestEditorState","RETURN","preventDefault","props","handleReturn","ESC","onEscape","TAB","onTab","UP","onUpArrow","RIGHT","onRightArrow","DOWN","onDownArrow","LEFT","onLeftArrow","SPACE","contentState","replaceText","getCurrentContent","getSelection","update","push","keyBindingFn","handleKeyCommand","newState"]
}
