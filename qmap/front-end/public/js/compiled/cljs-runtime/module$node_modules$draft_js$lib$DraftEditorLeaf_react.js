shadow$provide["module$node_modules$draft_js$lib$DraftEditorLeaf_react"]=function(global,process,require,module,exports,shadow$shims){var _assign=require("module$node_modules$object_assign$index");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function");}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return call&&(typeof call===
"object"||typeof call==="function")?call:self}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}var DraftEditorTextNode=
require("module$node_modules$draft_js$lib$DraftEditorTextNode_react");var React=require("module$node_modules$react$index");var ReactDOM=require("module$node_modules$react_dom$index");var invariant=require("module$node_modules$fbjs$lib$invariant");var setDraftEditorSelection=require("module$node_modules$draft_js$lib$setDraftEditorSelection");var DraftEditorLeaf=function(_React$Component){_inherits(DraftEditorLeaf,_React$Component);function DraftEditorLeaf(){_classCallCheck(this,DraftEditorLeaf);return _possibleConstructorReturn(this,
_React$Component.apply(this,arguments))}DraftEditorLeaf.prototype._setSelection=function _setSelection(){var selection=this.props.selection;if(selection==null||!selection.getHasFocus())return;var _props=this.props,block=_props.block,start=_props.start,text=_props.text;var blockKey=block.getKey();var end=start+text.length;if(!selection.hasEdgeWithin(blockKey,start,end))return;var node=ReactDOM.findDOMNode(this);!node?"development"!=="production"?invariant(false,"Missing node"):invariant(false):void 0;
var child=node.firstChild;!child?"development"!=="production"?invariant(false,"Missing child"):invariant(false):void 0;var targetNode=void 0;if(child.nodeType===Node.TEXT_NODE)targetNode=child;else if(child.tagName==="BR")targetNode=node;else{targetNode=child.firstChild;!targetNode?"development"!=="production"?invariant(false,"Missing targetNode"):invariant(false):void 0}setDraftEditorSelection(selection,targetNode,blockKey,start,end)};DraftEditorLeaf.prototype.shouldComponentUpdate=function shouldComponentUpdate(nextProps){var leafNode=
ReactDOM.findDOMNode(this.leaf);!leafNode?"development"!=="production"?invariant(false,"Missing leafNode"):invariant(false):void 0;return leafNode.textContent!==nextProps.text||nextProps.styleSet!==this.props.styleSet||nextProps.forceSelection};DraftEditorLeaf.prototype.componentDidUpdate=function componentDidUpdate(){this._setSelection()};DraftEditorLeaf.prototype.componentDidMount=function componentDidMount(){this._setSelection()};DraftEditorLeaf.prototype.render=function render(){var _this2=this;
var block=this.props.block;var text=this.props.text;if(text.endsWith("\n")&&this.props.isLast)text+="\n";var _props2=this.props,customStyleMap=_props2.customStyleMap,customStyleFn=_props2.customStyleFn,offsetKey=_props2.offsetKey,styleSet=_props2.styleSet;var styleObj=styleSet.reduce(function(map,styleName){var mergedStyles={};var style=customStyleMap[styleName];if(style!==undefined&&map.textDecoration!==style.textDecoration)mergedStyles.textDecoration=[map.textDecoration,style.textDecoration].join(" ").trim();
return _assign(map,style,mergedStyles)},{});if(customStyleFn){var newStyles=customStyleFn(styleSet,block);styleObj=_assign(styleObj,newStyles)}return React.createElement("span",{"data-offset-key":offsetKey,ref:function ref(_ref){return _this2.leaf=_ref},style:styleObj},React.createElement(DraftEditorTextNode,null,text))};return DraftEditorLeaf}(React.Component);module.exports=DraftEditorLeaf}
//# sourceMappingURL=module$node_modules$draft_js$lib$DraftEditorLeaf_react.js.map
