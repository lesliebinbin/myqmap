{
"version":3,
"file":"module$node_modules$draft_js$lib$AtomicBlockUtils.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/draft-js/lib/AtomicBlockUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$AtomicBlockUtils\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AtomicBlockUtils\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar moveBlockInContentState = require('./moveBlockInContentState');\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\n\n\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n\n    var charData = CharacterMetadata.create({ entity: entityKey });\n\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _extends({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _extends({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var withMovedAtomicBlock = void 0;\n\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\n\nmodule.exports = AtomicBlockUtils;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_assign","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","BlockMapBuilder","CharacterMetadata","ContentBlock","ContentBlockNode","DraftFeatureFlags","DraftModifier","EditorState","Immutable","SelectionState","generateRandomKey","moveBlockInContentState","experimentalTreeDataSupport","draft_tree_data_support","ContentBlockRecord","List","Repeat","AtomicBlockUtils","insertAtomicBlock","editorState","entityKey","character","contentState","getCurrentContent","selectionState","getSelection","afterRemoval","removeRange","targetSelection","getSelectionAfter","afterSplit","splitBlock","insertionTarget","asAtomicBlock","setBlockType","charData","create","entity","atomicBlockConfig","type","text","characterList","atomicDividerBlockConfig","nextSibling","prevSibling","fragmentArray","fragment","createFromArray","withAtomicBlock","replaceWithFragment","newContent","merge","selectionBefore","selectionAfter","set","push","moveAtomicBlock","atomicBlock","targetRange","insertionMode","withMovedAtomicBlock","targetBlock","getBlockForKey","getStartKey","getEndKey","selectionAfterRemoval","_targetBlock","getFocusKey","getStartOffset","getEndOffset","getLength","selectionAfterSplit","_targetBlock2"]
}
