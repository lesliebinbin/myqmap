shadow$provide["module$node_modules$draft_js$lib$DraftEditorDragHandler"]=function(global,process,require,module,exports,shadow$shims){var DataTransfer=require("module$node_modules$fbjs$lib$DataTransfer");var DraftModifier=require("module$node_modules$draft_js$lib$DraftModifier");var EditorState=require("module$node_modules$draft_js$lib$EditorState");var findAncestorOffsetKey=require("module$node_modules$draft_js$lib$findAncestorOffsetKey");var getTextContentFromFiles=require("module$node_modules$draft_js$lib$getTextContentFromFiles");
var getUpdatedSelectionState=require("module$node_modules$draft_js$lib$getUpdatedSelectionState");var isEventHandled=require("module$node_modules$draft_js$lib$isEventHandled");var nullthrows=require("module$node_modules$fbjs$lib$nullthrows");function getSelectionForEvent(event,editorState){var node=null;var offset=null;if(typeof document.caretRangeFromPoint==="function"){var dropRange=document.caretRangeFromPoint(event.x,event.y);node=dropRange.startContainer;offset=dropRange.startOffset}else if(event.rangeParent){node=
event.rangeParent;offset=event.rangeOffset}else return null;node=nullthrows(node);offset=nullthrows(offset);var offsetKey=nullthrows(findAncestorOffsetKey(node));return getUpdatedSelectionState(editorState,offsetKey,offset,offsetKey,offset)}var DraftEditorDragHandler={onDragEnd:function onDragEnd(editor){editor.exitCurrentMode()},onDrop:function onDrop(editor,e){var data=new DataTransfer(e.nativeEvent.dataTransfer);var editorState=editor._latestEditorState;var dropSelection=getSelectionForEvent(e.nativeEvent,
editorState);e.preventDefault();editor.exitCurrentMode();if(dropSelection==null)return;var files=data.getFiles();if(files.length>0){if(editor.props.handleDroppedFiles&&isEventHandled(editor.props.handleDroppedFiles(dropSelection,files)))return;getTextContentFromFiles(files,function(fileText){fileText&&editor.update(insertTextAtSelection(editorState,dropSelection,fileText))});return}var dragType=editor._internalDrag?"internal":"external";if(editor.props.handleDrop&&isEventHandled(editor.props.handleDrop(dropSelection,
data,dragType)))return;if(editor._internalDrag){editor.update(moveText(editorState,dropSelection));return}editor.update(insertTextAtSelection(editorState,dropSelection,data.getText()))}};function moveText(editorState,targetSelection){var newContentState=DraftModifier.moveText(editorState.getCurrentContent(),editorState.getSelection(),targetSelection);return EditorState.push(editorState,newContentState,"insert-fragment")}function insertTextAtSelection(editorState,selection,text){var newContentState=
DraftModifier.insertText(editorState.getCurrentContent(),selection,text,editorState.getCurrentInlineStyle());return EditorState.push(editorState,newContentState,"insert-fragment")}module.exports=DraftEditorDragHandler}
//# sourceMappingURL=module$node_modules$draft_js$lib$DraftEditorDragHandler.js.map
