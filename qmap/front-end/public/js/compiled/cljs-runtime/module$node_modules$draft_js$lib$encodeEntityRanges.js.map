{
"version":3,
"file":"module$node_modules$draft_js$lib$encodeEntityRanges.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,qDAAf,CAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAgBrI,IAAIC,eAAiBJ,OAAA,CAAQ,iDAAR,CACrB,KAAIK,aAAeL,OAAA,CAAQ,2CAAR,CAEnB,KAAIM,OAASD,YAAAC,OAMbC,SAASA,mBAAkB,CAACC,KAAD,CAAQC,UAAR,CAAoB,CAC7C,IAAIC,QAAU,EACdF,MAAAG,iBAAA,CAAuB,QAAS,CAACC,SAAD,CAAY,CAC1C,MAAO,CAAC,CAACA,SAAAC,UAAA,EADiC,CAA5C,CAEG,QAAS,CAAYC,KAAZ,CAA6BC,GAA7B,CAAkC,CAC5C,IAAIC,KAAOR,KAAAS,QAAA,EACX,KAAIC,IAAMV,KAAAW,YAAA,CAAkBL,KAAlB,CACVJ;OAAAU,KAAA,CAAa,CACXC,OAAQf,MAAA,CAAOU,IAAAM,MAAA,CAAW,CAAX,CAAcR,KAAd,CAAP,CADG,CAEXS,OAAQjB,MAAA,CAAOU,IAAAM,MAAA,CAAWR,KAAX,CAAkBC,GAAlB,CAAP,CAFG,CAIXG,IAAKM,MAAA,CAAOf,UAAA,CAAWL,cAAAqB,UAAA,CAAyBP,GAAzB,CAAX,CAAP,CAJM,CAAb,CAH4C,CAF9C,CAYA,OAAOR,QAdsC,CAiB/CT,MAAAC,QAAA,CAAiBK,kBA1CoH;",
"sources":["node_modules/draft-js/lib/encodeEntityRanges.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$draft_js$lib$encodeEntityRanges\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule encodeEntityRanges\n * @format\n * \n */\n\n'use strict';\n\nvar DraftStringKey = require('./DraftStringKey');\nvar UnicodeUtils = require('fbjs/lib/UnicodeUtils');\n\nvar strlen = UnicodeUtils.strlen;\n\n/**\n * Convert to UTF-8 character counts for storage.\n */\n\nfunction encodeEntityRanges(block, storageMap) {\n  var encoded = [];\n  block.findEntityRanges(function (character) {\n    return !!character.getEntity();\n  }, function ( /*number*/start, /*number*/end) {\n    var text = block.getText();\n    var key = block.getEntityAt(start);\n    encoded.push({\n      offset: strlen(text.slice(0, start)),\n      length: strlen(text.slice(start, end)),\n      // Encode the key as a number for range storage.\n      key: Number(storageMap[DraftStringKey.stringify(key)])\n    });\n  });\n  return encoded;\n}\n\nmodule.exports = encodeEntityRanges;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","DraftStringKey","UnicodeUtils","strlen","encodeEntityRanges","block","storageMap","encoded","findEntityRanges","character","getEntity","start","end","text","getText","key","getEntityAt","push","offset","slice","length","Number","stringify"]
}
