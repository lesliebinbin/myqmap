{
"version":3,
"file":"module$node_modules$enquire_DOT_js$src$MediaQuery.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,mDAAf,CAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CACnI,IAAIC,aAAeJ,OAAA,CAAQ,qDAAR,CACnB,KAAIK,KAAOL,OAAA,CAAQ,6CAAR,CAAAK,KASXC,SAASA,WAAU,CAACC,KAAD,CAAQC,eAAR,CAAyB,CACxC,IAAAD,MAAA,CAAaA,KACb,KAAAC,gBAAA,CAAuBA,eACvB,KAAAC,SAAA,CAAgB,EAChB,KAAAC,IAAA,CAAWC,MAAAC,WAAA,CAAkBL,KAAlB,CAEX,KAAIM,KAAO,IACX,KAAAC,SAAA,CAAgBC,QAAQ,CAACL,GAAD,CAAM,CAE1BG,IAAAH,IAAA,CAAWA,GAAAM,cAAX,EAAgCN,GAChCG,KAAAI,OAAA,EAH0B,CAK9B;IAAAP,IAAAQ,YAAA,CAAqB,IAAAJ,SAArB,CAZwC,CAe5CR,UAAAa,UAAA,CAAuB,CAEnBC,WAAad,UAFM,CAanBe,WAAaA,QAAQ,CAACC,OAAD,CAAU,CAC3B,IAAIC,GAAK,IAAInB,YAAJ,CAAiBkB,OAAjB,CACT,KAAAb,SAAAe,KAAA,CAAmBD,EAAnB,CAEA,KAAAE,QAAA,EAAA,EAAkBF,EAAAG,GAAA,EAJS,CAbZ,CAyBnBC,cAAgBA,QAAQ,CAACL,OAAD,CAAU,CAC9B,IAAIb,SAAW,IAAAA,SACfJ,KAAA,CAAKI,QAAL,CAAe,QAAQ,CAACmB,CAAD,CAAIC,CAAJ,CAAO,CAC1B,GAAGD,CAAAE,OAAA,CAASR,OAAT,CAAH,CAAsB,CAClBM,CAAAG,QAAA,EACA,OAAO,CAACtB,QAAAuB,OAAA,CAAgBH,CAAhB,CAAkB,CAAlB,CAFU,CADI,CAA9B,CAF8B,CAzBf,CAwCnBJ,QAAUA,QAAQ,EAAG,CACjB,MAAO,KAAAf,IAAAe,QAAP,EAA2B,IAAAjB,gBADV,CAxCF,CA+CnByB,MAAQA,QAAQ,EAAG,CACf5B,IAAA,CAAK,IAAAI,SAAL,CAAoB,QAAQ,CAACa,OAAD,CAAU,CAClCA,OAAAS,QAAA,EADkC,CAAtC,CAGA,KAAArB,IAAAwB,eAAA,CAAwB,IAAApB,SAAxB,CACA;IAAAL,SAAA0B,OAAA,CAAuB,CALR,CA/CA,CA0DnBlB,OAASA,QAAQ,EAAG,CAChB,IAAImB,OAAS,IAAAX,QAAA,EAAA,CAAiB,IAAjB,CAAwB,KAErCpB,KAAA,CAAK,IAAAI,SAAL,CAAoB,QAAQ,CAACa,OAAD,CAAU,CAClCA,OAAA,CAAQc,MAAR,CAAA,EADkC,CAAtC,CAHgB,CA1DD,CAmEvBnC,OAAAC,QAAA,CAAiBI,UA7FkH;",
"sources":["node_modules/enquire_DOT_js/src/MediaQuery.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$enquire_DOT_js$src$MediaQuery\"] = function(global,process,require,module,exports,shadow$shims) {\nvar QueryHandler = require('./QueryHandler');\nvar each = require('./Util').each;\n\n/**\n * Represents a single media query, manages it's state and registered handlers for this query\n *\n * @constructor\n * @param {string} query the media query string\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\n */\nfunction MediaQuery(query, isUnconditional) {\n    this.query = query;\n    this.isUnconditional = isUnconditional;\n    this.handlers = [];\n    this.mql = window.matchMedia(query);\n\n    var self = this;\n    this.listener = function(mql) {\n        // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\n        self.mql = mql.currentTarget || mql;\n        self.assess();\n    };\n    this.mql.addListener(this.listener);\n}\n\nMediaQuery.prototype = {\n\n    constuctor : MediaQuery,\n\n    /**\n     * add a handler for this query, triggering if already active\n     *\n     * @param {object} handler\n     * @param {function} handler.match callback for when query is activated\n     * @param {function} [handler.unmatch] callback for when query is deactivated\n     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\n     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\n     */\n    addHandler : function(handler) {\n        var qh = new QueryHandler(handler);\n        this.handlers.push(qh);\n\n        this.matches() && qh.on();\n    },\n\n    /**\n     * removes the given handler from the collection, and calls it's destroy methods\n     *\n     * @param {object || function} handler the handler to remove\n     */\n    removeHandler : function(handler) {\n        var handlers = this.handlers;\n        each(handlers, function(h, i) {\n            if(h.equals(handler)) {\n                h.destroy();\n                return !handlers.splice(i,1); //remove from array and exit each early\n            }\n        });\n    },\n\n    /**\n     * Determine whether the media query should be considered a match\n     *\n     * @return {Boolean} true if media query can be considered a match, false otherwise\n     */\n    matches : function() {\n        return this.mql.matches || this.isUnconditional;\n    },\n\n    /**\n     * Clears all handlers and unbinds events\n     */\n    clear : function() {\n        each(this.handlers, function(handler) {\n            handler.destroy();\n        });\n        this.mql.removeListener(this.listener);\n        this.handlers.length = 0; //clear array\n    },\n\n    /*\n        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\n        */\n    assess : function() {\n        var action = this.matches() ? 'on' : 'off';\n\n        each(this.handlers, function(handler) {\n            handler[action]();\n        });\n    }\n};\n\nmodule.exports = MediaQuery;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","QueryHandler","each","MediaQuery","query","isUnconditional","handlers","mql","window","matchMedia","self","listener","this.listener","currentTarget","assess","addListener","prototype","constuctor","addHandler","handler","qh","push","matches","on","removeHandler","h","i","equals","destroy","splice","clear","removeListener","length","action"]
}
